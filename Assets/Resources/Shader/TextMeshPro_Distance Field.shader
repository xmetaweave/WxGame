//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "TextMeshPro/Distance Field" {
Properties {
_FaceTex ("Face Texture", 2D) = "white" { }
_FaceUVSpeedX ("Face UV Speed X", Range(-5, 5)) = 0
_FaceUVSpeedY ("Face UV Speed Y", Range(-5, 5)) = 0
_FaceColor ("Face Color", Color) = (1,1,1,1)
_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_OutlineTex ("Outline Texture", 2D) = "white" { }
_OutlineUVSpeedX ("Outline UV Speed X", Range(-5, 5)) = 0
_OutlineUVSpeedY ("Outline UV Speed Y", Range(-5, 5)) = 0
_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
_Bevel ("Bevel", Range(0, 1)) = 0.5
_BevelOffset ("Bevel Offset", Range(-0.5, 0.5)) = 0
_BevelWidth ("Bevel Width", Range(-0.5, 0.5)) = 0
_BevelClamp ("Bevel Clamp", Range(0, 1)) = 0
_BevelRoundness ("Bevel Roundness", Range(0, 1)) = 0
_LightAngle ("Light Angle", Range(0, 6.283185)) = 3.1416
_SpecularColor ("Specular", Color) = (1,1,1,1)
_SpecularPower ("Specular", Range(0, 4)) = 2
_Reflectivity ("Reflectivity", Range(5, 15)) = 10
_Diffuse ("Diffuse", Range(0, 1)) = 0.5
_Ambient ("Ambient", Range(1, 0)) = 0.5
_BumpMap ("Normal map", 2D) = "bump" { }
_BumpOutline ("Bump Outline", Range(0, 1)) = 0
_BumpFace ("Bump Face", Range(0, 1)) = 0
_ReflectFaceColor ("Reflection Color", Color) = (0,0,0,1)
_ReflectOutlineColor ("Reflection Color", Color) = (0,0,0,1)
_Cube ("Reflection Cubemap", Cube) = "black" { }
_EnvMatrixRotation ("Texture Rotation", Vector) = (0,0,0,0)
_UnderlayColor ("Border Color", Color) = (0,0,0,0.5)
_UnderlayOffsetX ("Border OffsetX", Range(-1, 1)) = 0
_UnderlayOffsetY ("Border OffsetY", Range(-1, 1)) = 0
_UnderlayDilate ("Border Dilate", Range(-1, 1)) = 0
_UnderlaySoftness ("Border Softness", Range(0, 1)) = 0
_GlowColor ("Color", Color) = (0,1,0,0.5)
_GlowOffset ("Offset", Range(-1, 1)) = 0
_GlowInner ("Inner", Range(0, 1)) = 0.05
_GlowOuter ("Outer", Range(0, 1)) = 0.05
_GlowPower ("Falloff", Range(1, 0)) = 0.75
_WeightNormal ("Weight Normal", Float) = 0
_WeightBold ("Weight Bold", Float) = 0.5
_ShaderFlags ("Flags", Float) = 0
_ScaleRatioA ("Scale RatioA", Float) = 1
_ScaleRatioB ("Scale RatioB", Float) = 1
_ScaleRatioC ("Scale RatioC", Float) = 1
_MainTex ("Font Atlas", 2D) = "white" { }
_TextureWidth ("Texture Width", Float) = 512
_TextureHeight ("Texture Height", Float) = 512
_GradientScale ("Gradient Scale", Float) = 5
_ScaleX ("Scale X", Float) = 1
_ScaleY ("Scale Y", Float) = 1
_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
_Sharpness ("Sharpness", Range(-1, 1)) = 0
_VertexOffsetX ("Vertex OffsetX", Float) = 0
_VertexOffsetY ("Vertex OffsetY", Float) = 0
_MaskCoord ("Mask Coordinates", Vector) = (0,0,32767,32767)
_ClipRect ("Clip Rect", Vector) = (-32767,-32767,32767,32767)
_MaskSoftnessX ("Mask SoftnessX", Float) = 0
_MaskSoftnessY ("Mask SoftnessY", Float) = 0
_StencilComp ("Stencil Comparison", Float) = 8
_Stencil ("Stencil ID", Float) = 0
_StencilOp ("Stencil Operation", Float) = 0
_StencilWriteMask ("Stencil Write Mask", Float) = 255
_StencilReadMask ("Stencil Read Mask", Float) = 255
_ColorMask ("Color Mask", Float) = 15
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  Blend One OneMinusSrcAlpha, One OneMinusSrcAlpha
  ColorMask 0 0
  ZTest Off
  ZWrite Off
  Cull Off
  Stencil {
   ReadMask 0
   WriteMask 0
   Comp Disabled
   Pass Keep
   Fail Keep
   ZFail Keep
  }
  Fog {
   Mode Off
  }
  GpuProgramID 37247
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4 = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4 = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4 = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 276
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %270 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                Private f32* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %243 = OpVariable Private 
                                             %269 = OpTypePointer Output %7 
                               Output f32_4* %270 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                                      OpStore %236 %242 
                                         f32 %244 = OpLoad %236 
                                  Input f32* %245 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFMul %244 %246 
                                                      OpStore %243 %247 
                                         f32 %248 = OpLoad %236 
                                  Input f32* %249 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                         f32 %252 = OpFAdd %251 %86 
                                                      OpStore %84 %252 
                                         f32 %253 = OpLoad %243 
                                         f32 %254 = OpFMul %253 %90 
                                         f32 %255 = OpLoad %88 
                                         f32 %256 = OpFAdd %254 %255 
                                                      OpStore %88 %256 
                                         f32 %257 = OpLoad %88 
                                         f32 %258 = OpLoad %84 
                                         f32 %259 = OpFDiv %257 %258 
                                                      OpStore %84 %259 
                                         f32 %260 = OpLoad %84 
                                         f32 %261 = OpExtInst %1 43 %260 %55 %86 
                                                      OpStore %84 %261 
                                         f32 %262 = OpLoad %84 
                                         f32 %263 = OpFNegate %262 
                                         f32 %264 = OpFAdd %263 %86 
                                                      OpStore %84 %264 
                                       f32_4 %265 = OpLoad %176 
                                         f32 %266 = OpLoad %84 
                                       f32_4 %267 = OpCompositeConstruct %266 %266 %266 %266 
                                       f32_4 %268 = OpFMul %265 %267 
                                                      OpStore %176 %268 
                                       f32_4 %271 = OpLoad %176 
                                       f32_4 %272 = OpLoad %147 
                                       f32_4 %273 = OpVectorShuffle %272 %272 3 3 3 3 
                                       f32_4 %274 = OpFMul %271 %273 
                                                      OpStore %270 %274 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 276
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %270 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                Private f32* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %243 = OpVariable Private 
                                             %269 = OpTypePointer Output %7 
                               Output f32_4* %270 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                                      OpStore %236 %242 
                                         f32 %244 = OpLoad %236 
                                  Input f32* %245 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFMul %244 %246 
                                                      OpStore %243 %247 
                                         f32 %248 = OpLoad %236 
                                  Input f32* %249 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                         f32 %252 = OpFAdd %251 %86 
                                                      OpStore %84 %252 
                                         f32 %253 = OpLoad %243 
                                         f32 %254 = OpFMul %253 %90 
                                         f32 %255 = OpLoad %88 
                                         f32 %256 = OpFAdd %254 %255 
                                                      OpStore %88 %256 
                                         f32 %257 = OpLoad %88 
                                         f32 %258 = OpLoad %84 
                                         f32 %259 = OpFDiv %257 %258 
                                                      OpStore %84 %259 
                                         f32 %260 = OpLoad %84 
                                         f32 %261 = OpExtInst %1 43 %260 %55 %86 
                                                      OpStore %84 %261 
                                         f32 %262 = OpLoad %84 
                                         f32 %263 = OpFNegate %262 
                                         f32 %264 = OpFAdd %263 %86 
                                                      OpStore %84 %264 
                                       f32_4 %265 = OpLoad %176 
                                         f32 %266 = OpLoad %84 
                                       f32_4 %267 = OpCompositeConstruct %266 %266 %266 %266 
                                       f32_4 %268 = OpFMul %265 %267 
                                                      OpStore %176 %268 
                                       f32_4 %271 = OpLoad %176 
                                       f32_4 %272 = OpLoad %147 
                                       f32_4 %273 = OpVectorShuffle %272 %272 3 3 3 3 
                                       f32_4 %274 = OpFMul %271 %273 
                                                      OpStore %270 %274 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 276
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %270 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                                Private f32* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %243 = OpVariable Private 
                                             %269 = OpTypePointer Output %7 
                               Output f32_4* %270 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                                      OpStore %236 %242 
                                         f32 %244 = OpLoad %236 
                                  Input f32* %245 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFMul %244 %246 
                                                      OpStore %243 %247 
                                         f32 %248 = OpLoad %236 
                                  Input f32* %249 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                         f32 %252 = OpFAdd %251 %86 
                                                      OpStore %84 %252 
                                         f32 %253 = OpLoad %243 
                                         f32 %254 = OpFMul %253 %90 
                                         f32 %255 = OpLoad %88 
                                         f32 %256 = OpFAdd %254 %255 
                                                      OpStore %88 %256 
                                         f32 %257 = OpLoad %88 
                                         f32 %258 = OpLoad %84 
                                         f32 %259 = OpFDiv %257 %258 
                                                      OpStore %84 %259 
                                         f32 %260 = OpLoad %84 
                                         f32 %261 = OpExtInst %1 43 %260 %55 %86 
                                                      OpStore %84 %261 
                                         f32 %262 = OpLoad %84 
                                         f32 %263 = OpFNegate %262 
                                         f32 %264 = OpFAdd %263 %86 
                                                      OpStore %84 %264 
                                       f32_4 %265 = OpLoad %176 
                                         f32 %266 = OpLoad %84 
                                       f32_4 %267 = OpCompositeConstruct %266 %266 %266 %266 
                                       f32_4 %268 = OpFMul %265 %267 
                                                      OpStore %176 %268 
                                       f32_4 %271 = OpLoad %176 
                                       f32_4 %272 = OpLoad %147 
                                       f32_4 %273 = OpVectorShuffle %272 %272 3 3 3 3 
                                       f32_4 %274 = OpFMul %271 %273 
                                                      OpStore %270 %274 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(((int(u_xlatb4) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(((int(u_xlatb4) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(((int(u_xlatb4) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 298
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %145 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %172 DescriptorSet 172 
                                                      OpDecorate %172 Binding 172 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                              Private f32_4* %144 = OpVariable Private 
                                Input f32_4* %145 = OpVariable Input 
                                             %146 = OpTypeVector %6 3 
                                         i32 %149 = OpConstant 3 
                                         i32 %158 = OpConstant 2 
                              Private f32_4* %169 = OpVariable Private 
        UniformConstant read_only Texture2D* %170 = OpVariable UniformConstant 
                    UniformConstant sampler* %172 = OpVariable UniformConstant 
                              Private f32_4* %177 = OpVariable Private 
                                Private f32* %185 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                         f32 %275 = OpConstant 3.674022E-40 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                               Private bool* %287 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %147 = OpLoad %145 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %70 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFMul %148 %152 
                                       f32_4 %154 = OpLoad %144 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %144 %155 
                                Uniform f32* %156 = OpAccessChain %70 %60 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %159 = OpAccessChain %70 %158 
                                         f32 %160 = OpLoad %159 
                                       f32_2 %161 = OpCompositeConstruct %157 %160 
                              Uniform f32_4* %162 = OpAccessChain %70 %59 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 1 1 
                                       f32_2 %165 = OpFMul %161 %164 
                                       f32_4 %166 = OpLoad vs_TEXCOORD5 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFAdd %165 %167 
                                                      OpStore %42 %168 
                         read_only Texture2D %171 = OpLoad %170 
                                     sampler %173 = OpLoad %172 
                  read_only Texture2DSampled %174 = OpSampledImage %171 %173 
                                       f32_2 %175 = OpLoad %42 
                                       f32_4 %176 = OpImageSampleImplicitLod %174 %175 
                                                      OpStore %169 %176 
                                       f32_4 %178 = OpLoad %144 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %169 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %177 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %177 %184 
                                Private f32* %186 = OpAccessChain %169 %26 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %70 %149 %26 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_4 %191 = OpLoad %177 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpLoad %185 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %144 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %144 %197 
                                       f32_4 %198 = OpLoad %138 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %138 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %144 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFNegate %204 
                                       f32_3 %206 = OpFAdd %202 %205 
                                       f32_4 %207 = OpLoad %138 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %138 %208 
                                Uniform f32* %209 = OpAccessChain %70 %140 %26 
                                         f32 %210 = OpLoad %209 
                                Private f32* %211 = OpAccessChain %9 %26 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                         f32 %214 = OpLoad %185 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %213 %215 
                                Private f32* %217 = OpAccessChain %138 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %84 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %138 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %138 %221 
                                Uniform f32* %222 = OpAccessChain %70 %149 %26 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %169 %26 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %138 %26 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFAdd %226 %228 
                                Private f32* %230 = OpAccessChain %144 %26 
                                                      OpStore %230 %229 
                                       f32_4 %231 = OpLoad %177 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                         f32 %233 = OpLoad %185 
                                       f32_3 %234 = OpCompositeConstruct %233 %233 %233 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %138 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFAdd %235 %237 
                                       f32_4 %239 = OpLoad %144 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %144 %240 
                                Uniform f32* %242 = OpAccessChain %70 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %70 %75 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %42 %28 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %42 %28 
                                         f32 %249 = OpLoad %248 
                                  Input f32* %250 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                                      OpStore %31 %252 
                                Private f32* %253 = OpAccessChain %42 %28 
                                         f32 %254 = OpLoad %253 
                                  Input f32* %255 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %254 %256 
                                         f32 %258 = OpFAdd %257 %86 
                                                      OpStore %84 %258 
                                         f32 %259 = OpLoad %31 
                                         f32 %260 = OpFMul %259 %90 
                                         f32 %261 = OpLoad %88 
                                         f32 %262 = OpFAdd %260 %261 
                                                      OpStore %88 %262 
                                         f32 %263 = OpLoad %88 
                                         f32 %264 = OpLoad %84 
                                         f32 %265 = OpFDiv %263 %264 
                                                      OpStore %84 %265 
                                         f32 %266 = OpLoad %84 
                                         f32 %267 = OpExtInst %1 43 %266 %55 %86 
                                                      OpStore %84 %267 
                                         f32 %268 = OpLoad %84 
                                         f32 %269 = OpFNegate %268 
                                         f32 %270 = OpFAdd %269 %86 
                                                      OpStore %84 %270 
                                Private f32* %271 = OpAccessChain %144 %26 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpLoad %84 
                                         f32 %274 = OpFMul %272 %273 
                                         f32 %276 = OpFAdd %274 %275 
                                                      OpStore %88 %276 
                                         f32 %277 = OpLoad %84 
                                       f32_4 %278 = OpCompositeConstruct %277 %277 %277 %277 
                                       f32_4 %279 = OpLoad %144 
                                       f32_4 %280 = OpFMul %278 %279 
                                                      OpStore %177 %280 
                                       f32_4 %283 = OpLoad %177 
                                       f32_4 %284 = OpLoad %145 
                                       f32_4 %285 = OpVectorShuffle %284 %284 3 3 3 3 
                                       f32_4 %286 = OpFMul %283 %285 
                                                      OpStore %282 %286 
                                         f32 %288 = OpLoad %88 
                                        bool %289 = OpFOrdLessThan %288 %55 
                                                      OpStore %287 %289 
                                        bool %290 = OpLoad %287 
                                         i32 %291 = OpSelect %290 %60 %59 
                                         i32 %292 = OpIMul %291 %62 
                                        bool %293 = OpINotEqual %292 %59 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %295 
                                             %294 = OpLabel 
                                                      OpKill
                                             %295 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 298
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %145 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %172 DescriptorSet 172 
                                                      OpDecorate %172 Binding 172 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                              Private f32_4* %144 = OpVariable Private 
                                Input f32_4* %145 = OpVariable Input 
                                             %146 = OpTypeVector %6 3 
                                         i32 %149 = OpConstant 3 
                                         i32 %158 = OpConstant 2 
                              Private f32_4* %169 = OpVariable Private 
        UniformConstant read_only Texture2D* %170 = OpVariable UniformConstant 
                    UniformConstant sampler* %172 = OpVariable UniformConstant 
                              Private f32_4* %177 = OpVariable Private 
                                Private f32* %185 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                         f32 %275 = OpConstant 3.674022E-40 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                               Private bool* %287 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %147 = OpLoad %145 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %70 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFMul %148 %152 
                                       f32_4 %154 = OpLoad %144 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %144 %155 
                                Uniform f32* %156 = OpAccessChain %70 %60 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %159 = OpAccessChain %70 %158 
                                         f32 %160 = OpLoad %159 
                                       f32_2 %161 = OpCompositeConstruct %157 %160 
                              Uniform f32_4* %162 = OpAccessChain %70 %59 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 1 1 
                                       f32_2 %165 = OpFMul %161 %164 
                                       f32_4 %166 = OpLoad vs_TEXCOORD5 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFAdd %165 %167 
                                                      OpStore %42 %168 
                         read_only Texture2D %171 = OpLoad %170 
                                     sampler %173 = OpLoad %172 
                  read_only Texture2DSampled %174 = OpSampledImage %171 %173 
                                       f32_2 %175 = OpLoad %42 
                                       f32_4 %176 = OpImageSampleImplicitLod %174 %175 
                                                      OpStore %169 %176 
                                       f32_4 %178 = OpLoad %144 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %169 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %177 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %177 %184 
                                Private f32* %186 = OpAccessChain %169 %26 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %70 %149 %26 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_4 %191 = OpLoad %177 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpLoad %185 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %144 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %144 %197 
                                       f32_4 %198 = OpLoad %138 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %138 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %144 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFNegate %204 
                                       f32_3 %206 = OpFAdd %202 %205 
                                       f32_4 %207 = OpLoad %138 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %138 %208 
                                Uniform f32* %209 = OpAccessChain %70 %140 %26 
                                         f32 %210 = OpLoad %209 
                                Private f32* %211 = OpAccessChain %9 %26 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                         f32 %214 = OpLoad %185 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %213 %215 
                                Private f32* %217 = OpAccessChain %138 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %84 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %138 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %138 %221 
                                Uniform f32* %222 = OpAccessChain %70 %149 %26 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %169 %26 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %138 %26 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFAdd %226 %228 
                                Private f32* %230 = OpAccessChain %144 %26 
                                                      OpStore %230 %229 
                                       f32_4 %231 = OpLoad %177 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                         f32 %233 = OpLoad %185 
                                       f32_3 %234 = OpCompositeConstruct %233 %233 %233 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %138 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFAdd %235 %237 
                                       f32_4 %239 = OpLoad %144 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %144 %240 
                                Uniform f32* %242 = OpAccessChain %70 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %70 %75 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %42 %28 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %42 %28 
                                         f32 %249 = OpLoad %248 
                                  Input f32* %250 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                                      OpStore %31 %252 
                                Private f32* %253 = OpAccessChain %42 %28 
                                         f32 %254 = OpLoad %253 
                                  Input f32* %255 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %254 %256 
                                         f32 %258 = OpFAdd %257 %86 
                                                      OpStore %84 %258 
                                         f32 %259 = OpLoad %31 
                                         f32 %260 = OpFMul %259 %90 
                                         f32 %261 = OpLoad %88 
                                         f32 %262 = OpFAdd %260 %261 
                                                      OpStore %88 %262 
                                         f32 %263 = OpLoad %88 
                                         f32 %264 = OpLoad %84 
                                         f32 %265 = OpFDiv %263 %264 
                                                      OpStore %84 %265 
                                         f32 %266 = OpLoad %84 
                                         f32 %267 = OpExtInst %1 43 %266 %55 %86 
                                                      OpStore %84 %267 
                                         f32 %268 = OpLoad %84 
                                         f32 %269 = OpFNegate %268 
                                         f32 %270 = OpFAdd %269 %86 
                                                      OpStore %84 %270 
                                Private f32* %271 = OpAccessChain %144 %26 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpLoad %84 
                                         f32 %274 = OpFMul %272 %273 
                                         f32 %276 = OpFAdd %274 %275 
                                                      OpStore %88 %276 
                                         f32 %277 = OpLoad %84 
                                       f32_4 %278 = OpCompositeConstruct %277 %277 %277 %277 
                                       f32_4 %279 = OpLoad %144 
                                       f32_4 %280 = OpFMul %278 %279 
                                                      OpStore %177 %280 
                                       f32_4 %283 = OpLoad %177 
                                       f32_4 %284 = OpLoad %145 
                                       f32_4 %285 = OpVectorShuffle %284 %284 3 3 3 3 
                                       f32_4 %286 = OpFMul %283 %285 
                                                      OpStore %282 %286 
                                         f32 %288 = OpLoad %88 
                                        bool %289 = OpFOrdLessThan %288 %55 
                                                      OpStore %287 %289 
                                        bool %290 = OpLoad %287 
                                         i32 %291 = OpSelect %290 %60 %59 
                                         i32 %292 = OpIMul %291 %62 
                                        bool %293 = OpINotEqual %292 %59 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %295 
                                             %294 = OpLabel 
                                                      OpKill
                                             %295 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 298
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %145 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %172 DescriptorSet 172 
                                                      OpDecorate %172 Binding 172 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                              Private f32_4* %144 = OpVariable Private 
                                Input f32_4* %145 = OpVariable Input 
                                             %146 = OpTypeVector %6 3 
                                         i32 %149 = OpConstant 3 
                                         i32 %158 = OpConstant 2 
                              Private f32_4* %169 = OpVariable Private 
        UniformConstant read_only Texture2D* %170 = OpVariable UniformConstant 
                    UniformConstant sampler* %172 = OpVariable UniformConstant 
                              Private f32_4* %177 = OpVariable Private 
                                Private f32* %185 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                         f32 %275 = OpConstant 3.674022E-40 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                               Private bool* %287 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %147 = OpLoad %145 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %70 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFMul %148 %152 
                                       f32_4 %154 = OpLoad %144 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %144 %155 
                                Uniform f32* %156 = OpAccessChain %70 %60 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %159 = OpAccessChain %70 %158 
                                         f32 %160 = OpLoad %159 
                                       f32_2 %161 = OpCompositeConstruct %157 %160 
                              Uniform f32_4* %162 = OpAccessChain %70 %59 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 1 1 
                                       f32_2 %165 = OpFMul %161 %164 
                                       f32_4 %166 = OpLoad vs_TEXCOORD5 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_2 %168 = OpFAdd %165 %167 
                                                      OpStore %42 %168 
                         read_only Texture2D %171 = OpLoad %170 
                                     sampler %173 = OpLoad %172 
                  read_only Texture2DSampled %174 = OpSampledImage %171 %173 
                                       f32_2 %175 = OpLoad %42 
                                       f32_4 %176 = OpImageSampleImplicitLod %174 %175 
                                                      OpStore %169 %176 
                                       f32_4 %178 = OpLoad %144 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %169 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %177 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %177 %184 
                                Private f32* %186 = OpAccessChain %169 %26 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %70 %149 %26 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_4 %191 = OpLoad %177 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpLoad %185 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %144 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %144 %197 
                                       f32_4 %198 = OpLoad %138 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %138 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %144 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFNegate %204 
                                       f32_3 %206 = OpFAdd %202 %205 
                                       f32_4 %207 = OpLoad %138 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %138 %208 
                                Uniform f32* %209 = OpAccessChain %70 %140 %26 
                                         f32 %210 = OpLoad %209 
                                Private f32* %211 = OpAccessChain %9 %26 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                         f32 %214 = OpLoad %185 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %213 %215 
                                Private f32* %217 = OpAccessChain %138 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %84 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %138 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %138 %221 
                                Uniform f32* %222 = OpAccessChain %70 %149 %26 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %169 %26 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %138 %26 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFAdd %226 %228 
                                Private f32* %230 = OpAccessChain %144 %26 
                                                      OpStore %230 %229 
                                       f32_4 %231 = OpLoad %177 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                         f32 %233 = OpLoad %185 
                                       f32_3 %234 = OpCompositeConstruct %233 %233 %233 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %138 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFAdd %235 %237 
                                       f32_4 %239 = OpLoad %144 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %144 %240 
                                Uniform f32* %242 = OpAccessChain %70 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %70 %75 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %42 %28 
                                                      OpStore %247 %246 
                                Private f32* %248 = OpAccessChain %42 %28 
                                         f32 %249 = OpLoad %248 
                                  Input f32* %250 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                                      OpStore %31 %252 
                                Private f32* %253 = OpAccessChain %42 %28 
                                         f32 %254 = OpLoad %253 
                                  Input f32* %255 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %254 %256 
                                         f32 %258 = OpFAdd %257 %86 
                                                      OpStore %84 %258 
                                         f32 %259 = OpLoad %31 
                                         f32 %260 = OpFMul %259 %90 
                                         f32 %261 = OpLoad %88 
                                         f32 %262 = OpFAdd %260 %261 
                                                      OpStore %88 %262 
                                         f32 %263 = OpLoad %88 
                                         f32 %264 = OpLoad %84 
                                         f32 %265 = OpFDiv %263 %264 
                                                      OpStore %84 %265 
                                         f32 %266 = OpLoad %84 
                                         f32 %267 = OpExtInst %1 43 %266 %55 %86 
                                                      OpStore %84 %267 
                                         f32 %268 = OpLoad %84 
                                         f32 %269 = OpFNegate %268 
                                         f32 %270 = OpFAdd %269 %86 
                                                      OpStore %84 %270 
                                Private f32* %271 = OpAccessChain %144 %26 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpLoad %84 
                                         f32 %274 = OpFMul %272 %273 
                                         f32 %276 = OpFAdd %274 %275 
                                                      OpStore %88 %276 
                                         f32 %277 = OpLoad %84 
                                       f32_4 %278 = OpCompositeConstruct %277 %277 %277 %277 
                                       f32_4 %279 = OpLoad %144 
                                       f32_4 %280 = OpFMul %278 %279 
                                                      OpStore %177 %280 
                                       f32_4 %283 = OpLoad %177 
                                       f32_4 %284 = OpLoad %145 
                                       f32_4 %285 = OpVectorShuffle %284 %284 3 3 3 3 
                                       f32_4 %286 = OpFMul %283 %285 
                                                      OpStore %282 %286 
                                         f32 %288 = OpLoad %88 
                                        bool %289 = OpFOrdLessThan %288 %55 
                                                      OpStore %287 %289 
                                        bool %290 = OpLoad %287 
                                         i32 %291 = OpSelect %290 %60 %59 
                                         i32 %292 = OpIMul %291 %62 
                                        bool %293 = OpINotEqual %292 %59 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %295 
                                             %294 = OpLabel 
                                                      OpKill
                                             %295 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 312
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %282 %306 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 282 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %306 Location 306 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                              Private f32_2* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                         i32 %272 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                             %305 = OpTypePointer Output %7 
                               Output f32_4* %306 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                Private f32* %243 = OpAccessChain %236 %28 
                                                      OpStore %243 %242 
                                Private f32* %245 = OpAccessChain %236 %28 
                                         f32 %246 = OpLoad %245 
                                  Input f32* %247 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %244 %249 
                                Private f32* %250 = OpAccessChain %236 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpFAdd %254 %86 
                                                      OpStore %84 %255 
                                         f32 %256 = OpLoad %244 
                                         f32 %257 = OpFMul %256 %90 
                                         f32 %258 = OpLoad %88 
                                         f32 %259 = OpFAdd %257 %258 
                                                      OpStore %88 %259 
                                         f32 %260 = OpLoad %88 
                                         f32 %261 = OpLoad %84 
                                         f32 %262 = OpFDiv %260 %261 
                                                      OpStore %84 %262 
                                         f32 %263 = OpLoad %84 
                                         f32 %264 = OpExtInst %1 43 %263 %55 %86 
                                                      OpStore %84 %264 
                                         f32 %265 = OpLoad %84 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %86 
                                                      OpStore %84 %267 
                                       f32_4 %268 = OpLoad %176 
                                         f32 %269 = OpLoad %84 
                                       f32_4 %270 = OpCompositeConstruct %269 %269 %269 %269 
                                       f32_4 %271 = OpFMul %268 %270 
                                                      OpStore %176 %271 
                              Uniform f32_4* %273 = OpAccessChain %70 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFNegate %275 
                              Uniform f32_4* %277 = OpAccessChain %70 %272 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 2 3 
                                       f32_2 %280 = OpFAdd %276 %279 
                                                      OpStore %236 %280 
                                       f32_2 %281 = OpLoad %236 
                                       f32_4 %283 = OpLoad vs_TEXCOORD2 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_2 %285 = OpExtInst %1 4 %284 
                                       f32_2 %286 = OpFNegate %285 
                                       f32_2 %287 = OpFAdd %281 %286 
                                                      OpStore %236 %287 
                                       f32_2 %288 = OpLoad %236 
                                       f32_4 %289 = OpLoad vs_TEXCOORD2 
                                       f32_2 %290 = OpVectorShuffle %289 %289 2 3 
                                       f32_2 %291 = OpFMul %288 %290 
                                                      OpStore %236 %291 
                                       f32_2 %292 = OpLoad %236 
                                       f32_2 %293 = OpCompositeConstruct %55 %55 
                                       f32_2 %294 = OpCompositeConstruct %86 %86 
                                       f32_2 %295 = OpExtInst %1 43 %292 %293 %294 
                                                      OpStore %236 %295 
                                Private f32* %296 = OpAccessChain %236 %80 
                                         f32 %297 = OpLoad %296 
                                Private f32* %298 = OpAccessChain %236 %28 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %297 %299 
                                                      OpStore %84 %300 
                                       f32_4 %301 = OpLoad %176 
                                         f32 %302 = OpLoad %84 
                                       f32_4 %303 = OpCompositeConstruct %302 %302 %302 %302 
                                       f32_4 %304 = OpFMul %301 %303 
                                                      OpStore %176 %304 
                                       f32_4 %307 = OpLoad %176 
                                       f32_4 %308 = OpLoad %147 
                                       f32_4 %309 = OpVectorShuffle %308 %308 3 3 3 3 
                                       f32_4 %310 = OpFMul %307 %309 
                                                      OpStore %306 %310 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 312
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %282 %306 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 282 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %306 Location 306 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                              Private f32_2* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                         i32 %272 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                             %305 = OpTypePointer Output %7 
                               Output f32_4* %306 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                Private f32* %243 = OpAccessChain %236 %28 
                                                      OpStore %243 %242 
                                Private f32* %245 = OpAccessChain %236 %28 
                                         f32 %246 = OpLoad %245 
                                  Input f32* %247 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %244 %249 
                                Private f32* %250 = OpAccessChain %236 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpFAdd %254 %86 
                                                      OpStore %84 %255 
                                         f32 %256 = OpLoad %244 
                                         f32 %257 = OpFMul %256 %90 
                                         f32 %258 = OpLoad %88 
                                         f32 %259 = OpFAdd %257 %258 
                                                      OpStore %88 %259 
                                         f32 %260 = OpLoad %88 
                                         f32 %261 = OpLoad %84 
                                         f32 %262 = OpFDiv %260 %261 
                                                      OpStore %84 %262 
                                         f32 %263 = OpLoad %84 
                                         f32 %264 = OpExtInst %1 43 %263 %55 %86 
                                                      OpStore %84 %264 
                                         f32 %265 = OpLoad %84 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %86 
                                                      OpStore %84 %267 
                                       f32_4 %268 = OpLoad %176 
                                         f32 %269 = OpLoad %84 
                                       f32_4 %270 = OpCompositeConstruct %269 %269 %269 %269 
                                       f32_4 %271 = OpFMul %268 %270 
                                                      OpStore %176 %271 
                              Uniform f32_4* %273 = OpAccessChain %70 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFNegate %275 
                              Uniform f32_4* %277 = OpAccessChain %70 %272 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 2 3 
                                       f32_2 %280 = OpFAdd %276 %279 
                                                      OpStore %236 %280 
                                       f32_2 %281 = OpLoad %236 
                                       f32_4 %283 = OpLoad vs_TEXCOORD2 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_2 %285 = OpExtInst %1 4 %284 
                                       f32_2 %286 = OpFNegate %285 
                                       f32_2 %287 = OpFAdd %281 %286 
                                                      OpStore %236 %287 
                                       f32_2 %288 = OpLoad %236 
                                       f32_4 %289 = OpLoad vs_TEXCOORD2 
                                       f32_2 %290 = OpVectorShuffle %289 %289 2 3 
                                       f32_2 %291 = OpFMul %288 %290 
                                                      OpStore %236 %291 
                                       f32_2 %292 = OpLoad %236 
                                       f32_2 %293 = OpCompositeConstruct %55 %55 
                                       f32_2 %294 = OpCompositeConstruct %86 %86 
                                       f32_2 %295 = OpExtInst %1 43 %292 %293 %294 
                                                      OpStore %236 %295 
                                Private f32* %296 = OpAccessChain %236 %80 
                                         f32 %297 = OpLoad %296 
                                Private f32* %298 = OpAccessChain %236 %28 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %297 %299 
                                                      OpStore %84 %300 
                                       f32_4 %301 = OpLoad %176 
                                         f32 %302 = OpLoad %84 
                                       f32_4 %303 = OpCompositeConstruct %302 %302 %302 %302 
                                       f32_4 %304 = OpFMul %301 %303 
                                                      OpStore %176 %304 
                                       f32_4 %307 = OpLoad %176 
                                       f32_4 %308 = OpLoad %147 
                                       f32_4 %309 = OpVectorShuffle %308 %308 3 3 3 3 
                                       f32_4 %310 = OpFMul %307 %309 
                                                      OpStore %306 %310 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 312
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %282 %306 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 282 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %306 Location 306 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                              Private f32_2* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                         i32 %272 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                             %305 = OpTypePointer Output %7 
                               Output f32_4* %306 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                Private f32* %243 = OpAccessChain %236 %28 
                                                      OpStore %243 %242 
                                Private f32* %245 = OpAccessChain %236 %28 
                                         f32 %246 = OpLoad %245 
                                  Input f32* %247 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %244 %249 
                                Private f32* %250 = OpAccessChain %236 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpFAdd %254 %86 
                                                      OpStore %84 %255 
                                         f32 %256 = OpLoad %244 
                                         f32 %257 = OpFMul %256 %90 
                                         f32 %258 = OpLoad %88 
                                         f32 %259 = OpFAdd %257 %258 
                                                      OpStore %88 %259 
                                         f32 %260 = OpLoad %88 
                                         f32 %261 = OpLoad %84 
                                         f32 %262 = OpFDiv %260 %261 
                                                      OpStore %84 %262 
                                         f32 %263 = OpLoad %84 
                                         f32 %264 = OpExtInst %1 43 %263 %55 %86 
                                                      OpStore %84 %264 
                                         f32 %265 = OpLoad %84 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %86 
                                                      OpStore %84 %267 
                                       f32_4 %268 = OpLoad %176 
                                         f32 %269 = OpLoad %84 
                                       f32_4 %270 = OpCompositeConstruct %269 %269 %269 %269 
                                       f32_4 %271 = OpFMul %268 %270 
                                                      OpStore %176 %271 
                              Uniform f32_4* %273 = OpAccessChain %70 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFNegate %275 
                              Uniform f32_4* %277 = OpAccessChain %70 %272 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 2 3 
                                       f32_2 %280 = OpFAdd %276 %279 
                                                      OpStore %236 %280 
                                       f32_2 %281 = OpLoad %236 
                                       f32_4 %283 = OpLoad vs_TEXCOORD2 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_2 %285 = OpExtInst %1 4 %284 
                                       f32_2 %286 = OpFNegate %285 
                                       f32_2 %287 = OpFAdd %281 %286 
                                                      OpStore %236 %287 
                                       f32_2 %288 = OpLoad %236 
                                       f32_4 %289 = OpLoad vs_TEXCOORD2 
                                       f32_2 %290 = OpVectorShuffle %289 %289 2 3 
                                       f32_2 %291 = OpFMul %288 %290 
                                                      OpStore %236 %291 
                                       f32_2 %292 = OpLoad %236 
                                       f32_2 %293 = OpCompositeConstruct %55 %55 
                                       f32_2 %294 = OpCompositeConstruct %86 %86 
                                       f32_2 %295 = OpExtInst %1 43 %292 %293 %294 
                                                      OpStore %236 %295 
                                Private f32* %296 = OpAccessChain %236 %80 
                                         f32 %297 = OpLoad %296 
                                Private f32* %298 = OpAccessChain %236 %28 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %297 %299 
                                                      OpStore %84 %300 
                                       f32_4 %301 = OpLoad %176 
                                         f32 %302 = OpLoad %84 
                                       f32_4 %303 = OpCompositeConstruct %302 %302 %302 %302 
                                       f32_4 %304 = OpFMul %301 %303 
                                                      OpStore %176 %304 
                                       f32_4 %307 = OpLoad %176 
                                       f32_4 %308 = OpLoad %147 
                                       f32_4 %309 = OpVectorShuffle %308 %308 3 3 3 3 
                                       f32_4 %310 = OpFMul %307 %309 
                                                      OpStore %306 %310 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(((int(u_xlatb4) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(((int(u_xlatb4) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(((int(u_xlatb5) * int(0xffffffffu)))!=0){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(((int(u_xlatb4) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %282 %312 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 282 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %312 Location 312 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                              Private f32_2* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                         i32 %272 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         f32 %305 = OpConstant 3.674022E-40 
                                             %311 = OpTypePointer Output %7 
                               Output f32_4* %312 = OpVariable Output 
                               Private bool* %317 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                Private f32* %243 = OpAccessChain %236 %28 
                                                      OpStore %243 %242 
                                Private f32* %245 = OpAccessChain %236 %28 
                                         f32 %246 = OpLoad %245 
                                  Input f32* %247 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %244 %249 
                                Private f32* %250 = OpAccessChain %236 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpFAdd %254 %86 
                                                      OpStore %84 %255 
                                         f32 %256 = OpLoad %244 
                                         f32 %257 = OpFMul %256 %90 
                                         f32 %258 = OpLoad %88 
                                         f32 %259 = OpFAdd %257 %258 
                                                      OpStore %88 %259 
                                         f32 %260 = OpLoad %88 
                                         f32 %261 = OpLoad %84 
                                         f32 %262 = OpFDiv %260 %261 
                                                      OpStore %84 %262 
                                         f32 %263 = OpLoad %84 
                                         f32 %264 = OpExtInst %1 43 %263 %55 %86 
                                                      OpStore %84 %264 
                                         f32 %265 = OpLoad %84 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %86 
                                                      OpStore %84 %267 
                                       f32_4 %268 = OpLoad %176 
                                         f32 %269 = OpLoad %84 
                                       f32_4 %270 = OpCompositeConstruct %269 %269 %269 %269 
                                       f32_4 %271 = OpFMul %268 %270 
                                                      OpStore %176 %271 
                              Uniform f32_4* %273 = OpAccessChain %70 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFNegate %275 
                              Uniform f32_4* %277 = OpAccessChain %70 %272 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 2 3 
                                       f32_2 %280 = OpFAdd %276 %279 
                                                      OpStore %236 %280 
                                       f32_2 %281 = OpLoad %236 
                                       f32_4 %283 = OpLoad vs_TEXCOORD2 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_2 %285 = OpExtInst %1 4 %284 
                                       f32_2 %286 = OpFNegate %285 
                                       f32_2 %287 = OpFAdd %281 %286 
                                                      OpStore %236 %287 
                                       f32_2 %288 = OpLoad %236 
                                       f32_4 %289 = OpLoad vs_TEXCOORD2 
                                       f32_2 %290 = OpVectorShuffle %289 %289 2 3 
                                       f32_2 %291 = OpFMul %288 %290 
                                                      OpStore %236 %291 
                                       f32_2 %292 = OpLoad %236 
                                       f32_2 %293 = OpCompositeConstruct %55 %55 
                                       f32_2 %294 = OpCompositeConstruct %86 %86 
                                       f32_2 %295 = OpExtInst %1 43 %292 %293 %294 
                                                      OpStore %236 %295 
                                Private f32* %296 = OpAccessChain %236 %80 
                                         f32 %297 = OpLoad %296 
                                Private f32* %298 = OpAccessChain %236 %28 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %297 %299 
                                                      OpStore %84 %300 
                                Private f32* %301 = OpAccessChain %176 %26 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpLoad %84 
                                         f32 %304 = OpFMul %302 %303 
                                         f32 %306 = OpFAdd %304 %305 
                                                      OpStore %88 %306 
                                       f32_4 %307 = OpLoad %176 
                                         f32 %308 = OpLoad %84 
                                       f32_4 %309 = OpCompositeConstruct %308 %308 %308 %308 
                                       f32_4 %310 = OpFMul %307 %309 
                                                      OpStore %176 %310 
                                       f32_4 %313 = OpLoad %176 
                                       f32_4 %314 = OpLoad %147 
                                       f32_4 %315 = OpVectorShuffle %314 %314 3 3 3 3 
                                       f32_4 %316 = OpFMul %313 %315 
                                                      OpStore %312 %316 
                                         f32 %318 = OpLoad %88 
                                        bool %319 = OpFOrdLessThan %318 %55 
                                                      OpStore %317 %319 
                                        bool %320 = OpLoad %317 
                                         i32 %321 = OpSelect %320 %60 %59 
                                         i32 %322 = OpIMul %321 %62 
                                        bool %323 = OpINotEqual %322 %59 
                                                      OpSelectionMerge %325 None 
                                                      OpBranchConditional %323 %324 %325 
                                             %324 = OpLabel 
                                                      OpKill
                                             %325 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %282 %312 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 282 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %312 Location 312 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                              Private f32_2* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                         i32 %272 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         f32 %305 = OpConstant 3.674022E-40 
                                             %311 = OpTypePointer Output %7 
                               Output f32_4* %312 = OpVariable Output 
                               Private bool* %317 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                Private f32* %243 = OpAccessChain %236 %28 
                                                      OpStore %243 %242 
                                Private f32* %245 = OpAccessChain %236 %28 
                                         f32 %246 = OpLoad %245 
                                  Input f32* %247 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %244 %249 
                                Private f32* %250 = OpAccessChain %236 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpFAdd %254 %86 
                                                      OpStore %84 %255 
                                         f32 %256 = OpLoad %244 
                                         f32 %257 = OpFMul %256 %90 
                                         f32 %258 = OpLoad %88 
                                         f32 %259 = OpFAdd %257 %258 
                                                      OpStore %88 %259 
                                         f32 %260 = OpLoad %88 
                                         f32 %261 = OpLoad %84 
                                         f32 %262 = OpFDiv %260 %261 
                                                      OpStore %84 %262 
                                         f32 %263 = OpLoad %84 
                                         f32 %264 = OpExtInst %1 43 %263 %55 %86 
                                                      OpStore %84 %264 
                                         f32 %265 = OpLoad %84 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %86 
                                                      OpStore %84 %267 
                                       f32_4 %268 = OpLoad %176 
                                         f32 %269 = OpLoad %84 
                                       f32_4 %270 = OpCompositeConstruct %269 %269 %269 %269 
                                       f32_4 %271 = OpFMul %268 %270 
                                                      OpStore %176 %271 
                              Uniform f32_4* %273 = OpAccessChain %70 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFNegate %275 
                              Uniform f32_4* %277 = OpAccessChain %70 %272 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 2 3 
                                       f32_2 %280 = OpFAdd %276 %279 
                                                      OpStore %236 %280 
                                       f32_2 %281 = OpLoad %236 
                                       f32_4 %283 = OpLoad vs_TEXCOORD2 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_2 %285 = OpExtInst %1 4 %284 
                                       f32_2 %286 = OpFNegate %285 
                                       f32_2 %287 = OpFAdd %281 %286 
                                                      OpStore %236 %287 
                                       f32_2 %288 = OpLoad %236 
                                       f32_4 %289 = OpLoad vs_TEXCOORD2 
                                       f32_2 %290 = OpVectorShuffle %289 %289 2 3 
                                       f32_2 %291 = OpFMul %288 %290 
                                                      OpStore %236 %291 
                                       f32_2 %292 = OpLoad %236 
                                       f32_2 %293 = OpCompositeConstruct %55 %55 
                                       f32_2 %294 = OpCompositeConstruct %86 %86 
                                       f32_2 %295 = OpExtInst %1 43 %292 %293 %294 
                                                      OpStore %236 %295 
                                Private f32* %296 = OpAccessChain %236 %80 
                                         f32 %297 = OpLoad %296 
                                Private f32* %298 = OpAccessChain %236 %28 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %297 %299 
                                                      OpStore %84 %300 
                                Private f32* %301 = OpAccessChain %176 %26 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpLoad %84 
                                         f32 %304 = OpFMul %302 %303 
                                         f32 %306 = OpFAdd %304 %305 
                                                      OpStore %88 %306 
                                       f32_4 %307 = OpLoad %176 
                                         f32 %308 = OpLoad %84 
                                       f32_4 %309 = OpCompositeConstruct %308 %308 %308 %308 
                                       f32_4 %310 = OpFMul %307 %309 
                                                      OpStore %176 %310 
                                       f32_4 %313 = OpLoad %176 
                                       f32_4 %314 = OpLoad %147 
                                       f32_4 %315 = OpVectorShuffle %314 %314 3 3 3 3 
                                       f32_4 %316 = OpFMul %313 %315 
                                                      OpStore %312 %316 
                                         f32 %318 = OpLoad %88 
                                        bool %319 = OpFOrdLessThan %318 %55 
                                                      OpStore %317 %319 
                                        bool %320 = OpLoad %317 
                                         i32 %321 = OpSelect %320 %60 %59 
                                         i32 %322 = OpIMul %321 %62 
                                        bool %323 = OpINotEqual %322 %59 
                                                      OpSelectionMerge %325 None 
                                                      OpBranchConditional %323 %324 %325 
                                             %324 = OpLabel 
                                                      OpKill
                                             %325 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %127 %147 %282 %312 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 RelaxedPrecision 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 RelaxedPrecision 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %133 DescriptorSet 133 
                                                      OpDecorate %133 Binding 133 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 282 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %312 Location 312 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypePointer Private %20 
                               Private f32_2* %42 = OpVariable Private 
                                          u32 %46 = OpConstant 2 
                                              %51 = OpTypeBool 
                                              %52 = OpTypePointer Private %51 
                                Private bool* %53 = OpVariable Private 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 0 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                              %68 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 8 
                                              %72 = OpTypePointer Uniform %6 
                                          i32 %75 = OpConstant 9 
                                          u32 %80 = OpConstant 1 
                                 Private f32* %84 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                 Private f32* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %94 = OpVariable Private 
                                         i32 %115 = OpConstant 5 
                                         i32 %118 = OpConstant 6 
                                             %122 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %131 = OpVariable UniformConstant 
                    UniformConstant sampler* %133 = OpVariable UniformConstant 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %140 = OpConstant 7 
                                             %144 = OpTypeVector %6 3 
                                             %145 = OpTypePointer Private %144 
                              Private f32_3* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 3 
                                         i32 %157 = OpConstant 2 
                              Private f32_4* %168 = OpVariable Private 
        UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                              Private f32_4* %176 = OpVariable Private 
                                Private f32* %183 = OpVariable Private 
                              Private f32_2* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                         i32 %272 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         f32 %305 = OpConstant 3.674022E-40 
                                             %311 = OpTypePointer Output %7 
                               Output f32_4* %312 = OpVariable Output 
                               Private bool* %317 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %43 = OpAccessChain %9 %28 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                   Input f32* %47 = OpAccessChain vs_TEXCOORD1 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFAdd %45 %48 
                                 Private f32* %50 = OpAccessChain %42 %28 
                                                      OpStore %50 %49 
                                          f32 %54 = OpLoad %31 
                                         bool %56 = OpFOrdLessThan %54 %55 
                                                      OpStore %53 %56 
                                         bool %57 = OpLoad %53 
                                          i32 %61 = OpSelect %57 %60 %59 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %59 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                 Uniform f32* %73 = OpAccessChain %70 %71 
                                          f32 %74 = OpLoad %73 
                                 Uniform f32* %76 = OpAccessChain %70 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %74 %77 
                                                      OpStore %31 %78 
                                          f32 %79 = OpLoad %31 
                                   Input f32* %81 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                                      OpStore %31 %83 
                                          f32 %85 = OpLoad %31 
                                          f32 %87 = OpExtInst %1 37 %85 %86 
                                                      OpStore %84 %87 
                                          f32 %89 = OpLoad %31 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %88 %91 
                                          f32 %92 = OpLoad %84 
                                          f32 %93 = OpExtInst %1 31 %92 
                                                      OpStore %84 %93 
                                 Private f32* %95 = OpAccessChain %42 %28 
                                          f32 %96 = OpLoad %95 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %80 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %96 %98 
                                         f32 %100 = OpLoad %88 
                                         f32 %101 = OpFAdd %99 %100 
                                                      OpStore %94 %101 
                                         f32 %102 = OpLoad %94 
                                         f32 %103 = OpExtInst %1 43 %102 %55 %86 
                                                      OpStore %94 %103 
                                Private f32* %104 = OpAccessChain %42 %28 
                                         f32 %105 = OpLoad %104 
                                  Input f32* %106 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %105 %107 
                                         f32 %109 = OpLoad %88 
                                         f32 %110 = OpFNegate %109 
                                         f32 %111 = OpFAdd %108 %110 
                                                      OpStore %88 %111 
                                         f32 %112 = OpLoad %84 
                                         f32 %113 = OpLoad %94 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %84 %114 
                                Uniform f32* %116 = OpAccessChain %70 %115 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %119 = OpAccessChain %70 %118 
                                         f32 %120 = OpLoad %119 
                                       f32_2 %121 = OpCompositeConstruct %117 %120 
                              Uniform f32_4* %123 = OpAccessChain %70 %59 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 1 1 
                                       f32_2 %126 = OpFMul %121 %125 
                                       f32_4 %128 = OpLoad vs_TEXCOORD5 
                                       f32_2 %129 = OpVectorShuffle %128 %128 2 3 
                                       f32_2 %130 = OpFAdd %126 %129 
                                                      OpStore %42 %130 
                         read_only Texture2D %132 = OpLoad %131 
                                     sampler %134 = OpLoad %133 
                  read_only Texture2DSampled %135 = OpSampledImage %132 %134 
                                       f32_2 %136 = OpLoad %42 
                                       f32_4 %137 = OpImageSampleImplicitLod %135 %136 
                                                      OpStore %9 %137 
                                       f32_4 %139 = OpLoad %9 
                              Uniform f32_4* %141 = OpAccessChain %70 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFMul %139 %142 
                                                      OpStore %138 %143 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %70 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %146 %154 
                                Uniform f32* %155 = OpAccessChain %70 %60 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %70 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                              Uniform f32_4* %161 = OpAccessChain %70 %59 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 1 1 
                                       f32_2 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFAdd %164 %166 
                                                      OpStore %42 %167 
                         read_only Texture2D %170 = OpLoad %169 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                       f32_2 %174 = OpLoad %42 
                                       f32_4 %175 = OpImageSampleImplicitLod %173 %174 
                                                      OpStore %168 %175 
                                       f32_3 %177 = OpLoad %146 
                                       f32_4 %178 = OpLoad %168 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %176 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %176 %182 
                                Private f32* %184 = OpAccessChain %168 %26 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %70 %150 %26 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                                      OpStore %183 %188 
                                       f32_4 %189 = OpLoad %176 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpLoad %183 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpFMul %190 %192 
                                                      OpStore %146 %193 
                                       f32_4 %194 = OpLoad %138 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_4 %196 = OpLoad %138 
                                       f32_3 %197 = OpVectorShuffle %196 %196 3 3 3 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_3 %199 = OpLoad %146 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %138 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %138 %203 
                                Uniform f32* %204 = OpAccessChain %70 %140 %26 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %9 %26 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %183 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                Private f32* %212 = OpAccessChain %138 %26 
                                                      OpStore %212 %211 
                                         f32 %213 = OpLoad %84 
                                       f32_4 %214 = OpCompositeConstruct %213 %213 %213 %213 
                                       f32_4 %215 = OpLoad %138 
                                       f32_4 %216 = OpFMul %214 %215 
                                                      OpStore %138 %216 
                                       f32_4 %217 = OpLoad %176 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %183 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %138 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %176 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %176 %226 
                                Uniform f32* %227 = OpAccessChain %70 %150 %26 
                                         f32 %228 = OpLoad %227 
                                Private f32* %229 = OpAccessChain %168 %26 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Private f32* %232 = OpAccessChain %138 %26 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                Private f32* %235 = OpAccessChain %176 %26 
                                                      OpStore %235 %234 
                                Uniform f32* %238 = OpAccessChain %70 %237 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %70 %75 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                Private f32* %243 = OpAccessChain %236 %28 
                                                      OpStore %243 %242 
                                Private f32* %245 = OpAccessChain %236 %28 
                                         f32 %246 = OpLoad %245 
                                  Input f32* %247 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %244 %249 
                                Private f32* %250 = OpAccessChain %236 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %80 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpFAdd %254 %86 
                                                      OpStore %84 %255 
                                         f32 %256 = OpLoad %244 
                                         f32 %257 = OpFMul %256 %90 
                                         f32 %258 = OpLoad %88 
                                         f32 %259 = OpFAdd %257 %258 
                                                      OpStore %88 %259 
                                         f32 %260 = OpLoad %88 
                                         f32 %261 = OpLoad %84 
                                         f32 %262 = OpFDiv %260 %261 
                                                      OpStore %84 %262 
                                         f32 %263 = OpLoad %84 
                                         f32 %264 = OpExtInst %1 43 %263 %55 %86 
                                                      OpStore %84 %264 
                                         f32 %265 = OpLoad %84 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %86 
                                                      OpStore %84 %267 
                                       f32_4 %268 = OpLoad %176 
                                         f32 %269 = OpLoad %84 
                                       f32_4 %270 = OpCompositeConstruct %269 %269 %269 %269 
                                       f32_4 %271 = OpFMul %268 %270 
                                                      OpStore %176 %271 
                              Uniform f32_4* %273 = OpAccessChain %70 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFNegate %275 
                              Uniform f32_4* %277 = OpAccessChain %70 %272 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 2 3 
                                       f32_2 %280 = OpFAdd %276 %279 
                                                      OpStore %236 %280 
                                       f32_2 %281 = OpLoad %236 
                                       f32_4 %283 = OpLoad vs_TEXCOORD2 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_2 %285 = OpExtInst %1 4 %284 
                                       f32_2 %286 = OpFNegate %285 
                                       f32_2 %287 = OpFAdd %281 %286 
                                                      OpStore %236 %287 
                                       f32_2 %288 = OpLoad %236 
                                       f32_4 %289 = OpLoad vs_TEXCOORD2 
                                       f32_2 %290 = OpVectorShuffle %289 %289 2 3 
                                       f32_2 %291 = OpFMul %288 %290 
                                                      OpStore %236 %291 
                                       f32_2 %292 = OpLoad %236 
                                       f32_2 %293 = OpCompositeConstruct %55 %55 
                                       f32_2 %294 = OpCompositeConstruct %86 %86 
                                       f32_2 %295 = OpExtInst %1 43 %292 %293 %294 
                                                      OpStore %236 %295 
                                Private f32* %296 = OpAccessChain %236 %80 
                                         f32 %297 = OpLoad %296 
                                Private f32* %298 = OpAccessChain %236 %28 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %297 %299 
                                                      OpStore %84 %300 
                                Private f32* %301 = OpAccessChain %176 %26 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpLoad %84 
                                         f32 %304 = OpFMul %302 %303 
                                         f32 %306 = OpFAdd %304 %305 
                                                      OpStore %88 %306 
                                       f32_4 %307 = OpLoad %176 
                                         f32 %308 = OpLoad %84 
                                       f32_4 %309 = OpCompositeConstruct %308 %308 %308 %308 
                                       f32_4 %310 = OpFMul %307 %309 
                                                      OpStore %176 %310 
                                       f32_4 %313 = OpLoad %176 
                                       f32_4 %314 = OpLoad %147 
                                       f32_4 %315 = OpVectorShuffle %314 %314 3 3 3 3 
                                       f32_4 %316 = OpFMul %313 %315 
                                                      OpStore %312 %316 
                                         f32 %318 = OpLoad %88 
                                        bool %319 = OpFOrdLessThan %318 %55 
                                                      OpStore %317 %319 
                                        bool %320 = OpLoad %317 
                                         i32 %321 = OpSelect %320 %60 %59 
                                         i32 %322 = OpIMul %321 %62 
                                        bool %323 = OpINotEqual %322 %59 
                                                      OpSelectionMerge %325 None 
                                                      OpBranchConditional %323 %324 %325 
                                             %324 = OpLabel 
                                                      OpKill
                                             %325 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
}
}
}
Fallback "TextMeshPro/Mobile/Distance Field"
CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}