//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "TextMeshPro/Mobile/Distance Field (Surface)" {
Properties {
_FaceTex ("Fill Texture", 2D) = "white" { }
_FaceColor ("Fill Color", Color) = (1,1,1,1)
_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_OutlineTex ("Outline Texture", 2D) = "white" { }
_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
_GlowColor ("Color", Color) = (0,1,0,0.5)
_GlowOffset ("Offset", Range(-1, 1)) = 0
_GlowInner ("Inner", Range(0, 1)) = 0.05
_GlowOuter ("Outer", Range(0, 1)) = 0.05
_GlowPower ("Falloff", Range(1, 0)) = 0.75
_WeightNormal ("Weight Normal", Float) = 0
_WeightBold ("Weight Bold", Float) = 0.5
_ShaderFlags ("Flags", Float) = 0
_ScaleRatioA ("Scale RatioA", Float) = 1
_ScaleRatioB ("Scale RatioB", Float) = 1
_ScaleRatioC ("Scale RatioC", Float) = 1
_MainTex ("Font Atlas", 2D) = "white" { }
_TextureWidth ("Texture Width", Float) = 512
_TextureHeight ("Texture Height", Float) = 512
_GradientScale ("Gradient Scale", Float) = 5
_ScaleX ("Scale X", Float) = 1
_ScaleY ("Scale Y", Float) = 1
_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
_Sharpness ("Sharpness", Range(-1, 1)) = 0
_VertexOffsetX ("Vertex OffsetX", Float) = 0
_VertexOffsetY ("Vertex OffsetY", Float) = 0
}
SubShader {
 LOD 300
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARD"
  LOD 300
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  GpuProgramID 10770
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat1.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat1.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat1.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 681
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %105 %117 %143 %158 %170 %221 %387 %488 %492 %570 %574 %596 %597 %620 %666 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 RelaxedPrecision 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpMemberDecorate %23 25 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %103 0 BuiltIn 103 
                                                      OpMemberDecorate %103 1 BuiltIn 103 
                                                      OpMemberDecorate %103 2 BuiltIn 103 
                                                      OpDecorate %103 Block 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate vs_TEXCOORD0 Location 143 
                                                      OpDecorate vs_TEXCOORD1 Location 158 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate vs_TEXCOORD5 Location 221 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate vs_TEXCOORD2 Location 488 
                                                      OpDecorate %492 Location 492 
                                                      OpDecorate vs_TEXCOORD3 Location 570 
                                                      OpDecorate vs_TEXCOORD4 Location 574 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %596 Location 596 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %597 Location 597 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 620 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 666 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeArray %7 %17 
                                              %22 = OpTypeArray %7 %17 
                                              %23 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %19 %7 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 16 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 17 
                               Private f32_4* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 6 
                                          i32 %42 = OpConstant 1 
                                              %43 = OpTypePointer Uniform %7 
                                          i32 %47 = OpConstant 0 
                                          i32 %55 = OpConstant 2 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                               Private f32_4* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 10 
                                         u32 %101 = OpConstant 1 
                                             %102 = OpTypeArray %6 %101 
                                             %103 = OpTypeStruct %7 %6 %102 
                                             %104 = OpTypePointer Output %103 
        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
                                             %113 = OpTypePointer Output %7 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %116 = OpVariable Private 
                                Input f32_4* %117 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Input %6 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_2 %139 = OpConstantComposite %138 %138 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %146 = OpConstant 24 
                                             %157 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %161 = OpConstant 25 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 23 
                                             %184 = OpTypeBool 
                                             %185 = OpTypePointer Private %184 
                               Private bool* %186 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %192 = OpConstant 3.674022E-40 
                                Private f32* %194 = OpVariable Private 
                                         i32 %195 = OpConstant 13 
                                         i32 %199 = OpConstant 14 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %212 = OpConstant 11 
                                         i32 %217 = OpConstant 15 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %223 = OpConstant 3.674022E-40 
                                             %225 = OpTypePointer Output %6 
                                         u32 %229 = OpConstant 3 
                                         u32 %242 = OpConstant 2 
                                         i32 %258 = OpConstant 9 
                                         i32 %279 = OpConstant 19 
                                         i32 %282 = OpConstant 20 
                                         i32 %306 = OpConstant 18 
                                         i32 %310 = OpConstant 22 
                                             %323 = OpTypePointer Private %15 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %325 = OpConstant 21 
                                             %344 = OpTypePointer Uniform %15 
                                         i32 %348 = OpConstant 7 
                                             %386 = OpTypePointer Input %15 
                                Input f32_3* %387 = OpVariable Input 
                                             %393 = OpTypePointer Private %26 
                                Private i32* %394 = OpVariable Private 
                                         u32 %398 = OpConstant 4294967295 
                                Private i32* %401 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                Input f32_4* %492 = OpVariable Input 
                              Private f32_3* %537 = OpVariable Private 
                                         i32 %553 = OpConstant 8 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %596 = OpVariable Output 
                                Input f32_4* %597 = OpVariable Input 
                                         i32 %601 = OpConstant 12 
                                             %619 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                Private f32* %630 = OpVariable Private 
                              Private f32_4* %644 = OpVariable Private 
                              Private f32_3* %649 = OpVariable Private 
                                         i32 %660 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                         i32 %667 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %14 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 2 3 
                                                      OpStore %9 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %39 1 1 1 1 
                               Uniform f32_4* %44 = OpAccessChain %25 %41 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_4 %46 = OpFMul %40 %45 
                                                      OpStore %38 %46 
                               Uniform f32_4* %48 = OpAccessChain %25 %41 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 0 0 0 0 
                                        f32_4 %52 = OpFMul %49 %51 
                                        f32_4 %53 = OpLoad %38 
                                        f32_4 %54 = OpFAdd %52 %53 
                                                      OpStore %38 %54 
                               Uniform f32_4* %56 = OpAccessChain %25 %41 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %11 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %38 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %38 %62 
                                        f32_4 %64 = OpLoad %38 
                               Uniform f32_4* %66 = OpAccessChain %25 %41 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %41 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %11 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %38 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %38 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %38 %79 
                                        f32_4 %81 = OpLoad %63 
                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %25 %83 %42 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFMul %82 %85 
                                                      OpStore %80 %86 
                               Uniform f32_4* %87 = OpAccessChain %25 %83 %47 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpLoad %63 
                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %80 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %80 %93 
                               Uniform f32_4* %94 = OpAccessChain %25 %83 %55 
                                        f32_4 %95 = OpLoad %94 
                                        f32_4 %96 = OpLoad %63 
                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
                                        f32_4 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %80 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %80 %100 
                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %63 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %80 
                                       f32_4 %112 = OpFAdd %110 %111 
                               Output f32_4* %114 = OpAccessChain %105 %47 
                                                      OpStore %114 %112 
                                  Input f32* %120 = OpAccessChain %117 %118 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %116 %123 
                                         f32 %124 = OpLoad %116 
                                         f32 %125 = OpExtInst %1 8 %124 
                                Private f32* %126 = OpAccessChain %80 %118 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %80 %118 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %131 = OpFMul %129 %130 
                                  Input f32* %132 = OpAccessChain %117 %118 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %80 %101 
                                                      OpStore %135 %134 
                                       f32_4 %136 = OpLoad %80 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %80 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
                                                      OpStore %80 %142 
                                       f32_4 %144 = OpLoad %80 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %147 = OpAccessChain %25 %146 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFMul %145 %149 
                              Uniform f32_4* %151 = OpAccessChain %25 %146 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
                                       f32_2 %154 = OpFAdd %150 %153 
                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %156 
                                       f32_4 %159 = OpLoad %80 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                              Uniform f32_4* %162 = OpAccessChain %25 %161 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFMul %160 %164 
                              Uniform f32_4* %166 = OpAccessChain %25 %161 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFAdd %165 %168 
                                                      OpStore vs_TEXCOORD1 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %183 
                                  Input f32* %188 = OpAccessChain %117 %101 
                                         f32 %189 = OpLoad %188 
                                        bool %190 = OpFOrdGreaterThanEqual %187 %189 
                                                      OpStore %186 %190 
                                        bool %191 = OpLoad %186 
                                         f32 %193 = OpSelect %191 %192 %187 
                                                      OpStore %116 %193 
                                Uniform f32* %196 = OpAccessChain %25 %195 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                Uniform f32* %200 = OpAccessChain %25 %199 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %198 %201 
                                                      OpStore %194 %202 
                                         f32 %203 = OpLoad %116 
                                         f32 %204 = OpLoad %194 
                                         f32 %205 = OpFMul %203 %204 
                                Uniform f32* %206 = OpAccessChain %25 %195 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFAdd %205 %207 
                                                      OpStore %116 %208 
                                         f32 %209 = OpLoad %116 
                                         f32 %211 = OpFMul %209 %210 
                                Uniform f32* %213 = OpAccessChain %25 %212 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFAdd %211 %214 
                                                      OpStore %116 %215 
                                         f32 %216 = OpLoad %116 
                                Uniform f32* %218 = OpAccessChain %25 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %116 %220 
                                         f32 %222 = OpLoad %116 
                                         f32 %224 = OpFMul %222 %223 
                                 Output f32* %226 = OpAccessChain vs_TEXCOORD5 %118 
                                                      OpStore %226 %224 
                                Private f32* %227 = OpAccessChain %63 %101 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %230 = OpAccessChain %25 %83 %42 %229 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %228 %231 
                                                      OpStore %116 %232 
                                Uniform f32* %233 = OpAccessChain %25 %83 %47 %229 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %63 %118 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                         f32 %238 = OpLoad %116 
                                         f32 %239 = OpFAdd %237 %238 
                                                      OpStore %116 %239 
                                Uniform f32* %240 = OpAccessChain %25 %83 %55 %229 
                                         f32 %241 = OpLoad %240 
                                Private f32* %243 = OpAccessChain %63 %242 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %241 %244 
                                         f32 %246 = OpLoad %116 
                                         f32 %247 = OpFAdd %245 %246 
                                                      OpStore %116 %247 
                                Uniform f32* %248 = OpAccessChain %25 %83 %65 %229 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %63 %229 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpLoad %116 
                                         f32 %254 = OpFAdd %252 %253 
                                                      OpStore %116 %254 
                              Uniform f32_4* %255 = OpAccessChain %25 %42 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 1 
                              Uniform f32_4* %259 = OpAccessChain %25 %258 %42 
                                       f32_4 %260 = OpLoad %259 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_2 %262 = OpFMul %257 %261 
                                       f32_4 %263 = OpLoad %63 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
                                                      OpStore %63 %264 
                              Uniform f32_4* %265 = OpAccessChain %25 %258 %47 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                              Uniform f32_4* %268 = OpAccessChain %25 %42 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 0 
                                       f32_2 %271 = OpFMul %267 %270 
                                       f32_4 %272 = OpLoad %63 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %63 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %63 %276 
                                       f32_4 %277 = OpLoad %63 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                Uniform f32* %280 = OpAccessChain %25 %279 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %283 = OpAccessChain %25 %282 
                                         f32 %284 = OpLoad %283 
                                       f32_2 %285 = OpCompositeConstruct %281 %284 
                                       f32_2 %286 = OpFMul %278 %285 
                                       f32_4 %287 = OpLoad %63 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
                                                      OpStore %63 %288 
                                         f32 %289 = OpLoad %116 
                                       f32_2 %290 = OpCompositeConstruct %289 %289 
                                       f32_4 %291 = OpLoad %63 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                       f32_2 %293 = OpFDiv %290 %292 
                                       f32_4 %294 = OpLoad %63 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 2 3 
                                                      OpStore %63 %295 
                                       f32_4 %296 = OpLoad %63 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpLoad %63 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                         f32 %300 = OpDot %297 %299 
                                                      OpStore %116 %300 
                                         f32 %301 = OpLoad %116 
                                         f32 %302 = OpExtInst %1 32 %301 
                                                      OpStore %116 %302 
                                  Input f32* %303 = OpAccessChain %117 %101 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 4 %304 
                                Uniform f32* %307 = OpAccessChain %25 %306 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %305 %308 
                                                      OpStore %194 %309 
                                Uniform f32* %311 = OpAccessChain %25 %310 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFAdd %312 %192 
                                Private f32* %314 = OpAccessChain %63 %118 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %194 
                                Private f32* %316 = OpAccessChain %63 %118 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                                      OpStore %194 %318 
                                         f32 %319 = OpLoad %116 
                                         f32 %320 = OpLoad %194 
                                         f32 %321 = OpFMul %319 %320 
                                Private f32* %322 = OpAccessChain %63 %118 
                                                      OpStore %322 %321 
                                Uniform f32* %326 = OpAccessChain %25 %325 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                         f32 %329 = OpFAdd %328 %192 
                                Private f32* %330 = OpAccessChain %324 %118 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %324 %118 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %63 %118 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %63 %118 
                                                      OpStore %336 %335 
                                         f32 %337 = OpLoad %116 
                                         f32 %338 = OpLoad %194 
                                         f32 %339 = OpFMul %337 %338 
                                Private f32* %340 = OpAccessChain %63 %118 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %339 %342 
                                                      OpStore %116 %343 
                              Uniform f32_3* %345 = OpAccessChain %25 %47 
                                       f32_3 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 1 1 1 
                              Uniform f32_4* %349 = OpAccessChain %25 %348 %42 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %324 %352 
                              Uniform f32_4* %353 = OpAccessChain %25 %348 %47 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %25 %47 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %355 %358 
                                       f32_3 %360 = OpLoad %324 
                                       f32_3 %361 = OpFAdd %359 %360 
                                                      OpStore %324 %361 
                              Uniform f32_4* %362 = OpAccessChain %25 %348 %55 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_3* %365 = OpAccessChain %25 %47 
                                       f32_3 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 2 2 
                                       f32_3 %368 = OpFMul %364 %367 
                                       f32_3 %369 = OpLoad %324 
                                       f32_3 %370 = OpFAdd %368 %369 
                                                      OpStore %324 %370 
                                       f32_3 %371 = OpLoad %324 
                              Uniform f32_4* %372 = OpAccessChain %25 %348 %65 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFAdd %371 %374 
                                                      OpStore %324 %375 
                                  Input f32* %376 = OpAccessChain %11 %242 
                                         f32 %377 = OpLoad %376 
                                Private f32* %378 = OpAccessChain %9 %242 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFNegate %380 
                                       f32_3 %382 = OpLoad %324 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %388 = OpLoad %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %391 = OpDot %388 %390 
                                Private f32* %392 = OpAccessChain %9 %118 
                                                      OpStore %392 %391 
                                Private f32* %395 = OpAccessChain %9 %118 
                                         f32 %396 = OpLoad %395 
                                        bool %397 = OpFOrdLessThan %187 %396 
                                         u32 %399 = OpSelect %397 %398 %118 
                                         i32 %400 = OpBitcast %399 
                                                      OpStore %394 %400 
                                Private f32* %402 = OpAccessChain %9 %118 
                                         f32 %403 = OpLoad %402 
                                        bool %404 = OpFOrdLessThan %403 %187 
                                         u32 %405 = OpSelect %404 %398 %118 
                                         i32 %406 = OpBitcast %405 
                                                      OpStore %401 %406 
                                         i32 %407 = OpLoad %394 
                                         i32 %408 = OpSNegate %407 
                                         i32 %409 = OpLoad %401 
                                         i32 %410 = OpIAdd %408 %409 
                                                      OpStore %401 %410 
                                         i32 %411 = OpLoad %401 
                                         f32 %412 = OpConvertSToF %411 
                                Private f32* %413 = OpAccessChain %9 %118 
                                                      OpStore %413 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpLoad %387 
                                       f32_3 %417 = OpFMul %415 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %9 %419 
                                       f32_4 %420 = OpLoad %9 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                              Uniform f32_4* %422 = OpAccessChain %25 %348 %47 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                         f32 %425 = OpDot %421 %424 
                                Private f32* %426 = OpAccessChain %80 %118 
                                                      OpStore %426 %425 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                              Uniform f32_4* %429 = OpAccessChain %25 %348 %42 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %428 %431 
                                Private f32* %433 = OpAccessChain %80 %101 
                                                      OpStore %433 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                              Uniform f32_4* %436 = OpAccessChain %25 %348 %55 
                                       f32_4 %437 = OpLoad %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                         f32 %439 = OpDot %435 %438 
                                Private f32* %440 = OpAccessChain %80 %242 
                                                      OpStore %440 %439 
                                       f32_4 %441 = OpLoad %80 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_4 %443 = OpLoad %80 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                         f32 %445 = OpDot %442 %444 
                                Private f32* %446 = OpAccessChain %9 %118 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %9 %118 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 32 %448 
                                Private f32* %450 = OpAccessChain %9 %118 
                                                      OpStore %450 %449 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 0 
                                       f32_4 %453 = OpLoad %80 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 1 2 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %80 %455 
                                       f32_4 %456 = OpLoad %38 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFNegate %457 
                              Uniform f32_3* %459 = OpAccessChain %25 %47 
                                       f32_3 %460 = OpLoad %459 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %194 %468 
                                         f32 %469 = OpLoad %194 
                                         f32 %470 = OpExtInst %1 32 %469 
                                                      OpStore %194 %470 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                         f32 %473 = OpLoad %194 
                                       f32_3 %474 = OpCompositeConstruct %473 %473 %473 
                                       f32_3 %475 = OpFMul %472 %474 
                                                      OpStore %324 %475 
                                       f32_4 %476 = OpLoad %80 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 3 
                                       f32_3 %478 = OpLoad %324 
                                         f32 %479 = OpDot %477 %478 
                                                      OpStore %194 %479 
                                         f32 %480 = OpLoad %194 
                                         f32 %481 = OpExtInst %1 4 %480 
                                         f32 %482 = OpLoad %116 
                                         f32 %483 = OpFMul %481 %482 
                                Private f32* %484 = OpAccessChain %63 %118 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFAdd %483 %485 
                                 Output f32* %487 = OpAccessChain vs_TEXCOORD5 %101 
                                                      OpStore %487 %486 
                                Private f32* %489 = OpAccessChain %38 %118 
                                         f32 %490 = OpLoad %489 
                                 Output f32* %491 = OpAccessChain vs_TEXCOORD2 %229 
                                                      OpStore %491 %490 
                                       f32_4 %493 = OpLoad %492 
                                       f32_3 %494 = OpVectorShuffle %493 %493 1 1 1 
                              Uniform f32_4* %495 = OpAccessChain %25 %41 %42 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 1 2 0 
                                       f32_3 %498 = OpFMul %494 %497 
                                       f32_4 %499 = OpLoad %63 
                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
                                                      OpStore %63 %500 
                              Uniform f32_4* %501 = OpAccessChain %25 %41 %47 
                                       f32_4 %502 = OpLoad %501 
                                       f32_3 %503 = OpVectorShuffle %502 %502 1 2 0 
                                       f32_4 %504 = OpLoad %492 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 0 0 
                                       f32_3 %506 = OpFMul %503 %505 
                                       f32_4 %507 = OpLoad %63 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFAdd %506 %508 
                                       f32_4 %510 = OpLoad %63 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %63 %511 
                              Uniform f32_4* %512 = OpAccessChain %25 %41 %55 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 1 2 0 
                                       f32_4 %515 = OpLoad %492 
                                       f32_3 %516 = OpVectorShuffle %515 %515 2 2 2 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %63 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpFAdd %517 %519 
                                       f32_4 %521 = OpLoad %63 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %63 %522 
                                       f32_4 %523 = OpLoad %63 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_4 %525 = OpLoad %63 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                         f32 %527 = OpDot %524 %526 
                                                      OpStore %116 %527 
                                         f32 %528 = OpLoad %116 
                                         f32 %529 = OpExtInst %1 32 %528 
                                                      OpStore %116 %529 
                                         f32 %530 = OpLoad %116 
                                       f32_3 %531 = OpCompositeConstruct %530 %530 %530 
                                       f32_4 %532 = OpLoad %63 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFMul %531 %533 
                                       f32_4 %535 = OpLoad %63 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %63 %536 
                                       f32_4 %538 = OpLoad %63 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %80 
                                       f32_3 %541 = OpVectorShuffle %540 %540 3 0 1 
                                       f32_3 %542 = OpFMul %539 %541 
                                                      OpStore %537 %542 
                                       f32_4 %543 = OpLoad %80 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %63 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_3 %548 = OpLoad %537 
                                       f32_3 %549 = OpFNegate %548 
                                       f32_3 %550 = OpFAdd %547 %549 
                                                      OpStore %537 %550 
                                  Input f32* %551 = OpAccessChain %492 %229 
                                         f32 %552 = OpLoad %551 
                                Uniform f32* %554 = OpAccessChain %25 %553 %229 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpFMul %552 %555 
                                                      OpStore %116 %556 
                                         f32 %557 = OpLoad %116 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %537 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %537 %560 
                                Private f32* %561 = OpAccessChain %537 %118 
                                         f32 %562 = OpLoad %561 
                                 Output f32* %563 = OpAccessChain vs_TEXCOORD2 %101 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %80 %118 
                                         f32 %565 = OpLoad %564 
                                 Output f32* %566 = OpAccessChain vs_TEXCOORD2 %242 
                                                      OpStore %566 %565 
                                Private f32* %567 = OpAccessChain %63 %242 
                                         f32 %568 = OpLoad %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD2 %118 
                                                      OpStore %569 %568 
                                Private f32* %571 = OpAccessChain %63 %118 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD3 %118 
                                                      OpStore %573 %572 
                                Private f32* %575 = OpAccessChain %63 %101 
                                         f32 %576 = OpLoad %575 
                                 Output f32* %577 = OpAccessChain vs_TEXCOORD4 %118 
                                                      OpStore %577 %576 
                                Private f32* %578 = OpAccessChain %38 %101 
                                         f32 %579 = OpLoad %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %229 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %38 %242 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD4 %229 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %80 %101 
                                         f32 %585 = OpLoad %584 
                                 Output f32* %586 = OpAccessChain vs_TEXCOORD3 %242 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %537 %101 
                                         f32 %588 = OpLoad %587 
                                 Output f32* %589 = OpAccessChain vs_TEXCOORD3 %101 
                                                      OpStore %589 %588 
                                Private f32* %590 = OpAccessChain %537 %242 
                                         f32 %591 = OpLoad %590 
                                 Output f32* %592 = OpAccessChain vs_TEXCOORD4 %101 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %80 %229 
                                         f32 %594 = OpLoad %593 
                                 Output f32* %595 = OpAccessChain vs_TEXCOORD4 %242 
                                                      OpStore %595 %594 
                                       f32_4 %598 = OpLoad %597 
                                                      OpStore %596 %598 
                                       f32_4 %599 = OpLoad %9 
                                       f32_3 %600 = OpVectorShuffle %599 %599 1 1 1 
                              Uniform f32_4* %602 = OpAccessChain %25 %601 %42 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFMul %600 %604 
                                       f32_4 %606 = OpLoad %38 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %38 %607 
                              Uniform f32_4* %608 = OpAccessChain %25 %601 %47 
                                       f32_4 %609 = OpLoad %608 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_4 %611 = OpLoad %9 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 0 0 
                                       f32_3 %613 = OpFMul %610 %612 
                                       f32_4 %614 = OpLoad %38 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                                       f32_3 %616 = OpFAdd %613 %615 
                                       f32_4 %617 = OpLoad %9 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 2 6 
                                                      OpStore %9 %618 
                              Uniform f32_4* %621 = OpAccessChain %25 %601 %55 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_4 %624 = OpLoad %9 
                                       f32_3 %625 = OpVectorShuffle %624 %624 2 2 2 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 3 
                                       f32_3 %629 = OpFAdd %626 %628 
                                                      OpStore vs_TEXCOORD6 %629 
                                Private f32* %631 = OpAccessChain %80 %101 
                                         f32 %632 = OpLoad %631 
                                Private f32* %633 = OpAccessChain %80 %101 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFMul %632 %634 
                                                      OpStore %630 %635 
                                Private f32* %636 = OpAccessChain %80 %118 
                                         f32 %637 = OpLoad %636 
                                Private f32* %638 = OpAccessChain %80 %118 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                         f32 %641 = OpLoad %630 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %640 %642 
                                                      OpStore %630 %643 
                                       f32_4 %645 = OpLoad %80 
                                       f32_4 %646 = OpVectorShuffle %645 %645 1 3 2 0 
                                       f32_4 %647 = OpLoad %80 
                                       f32_4 %648 = OpFMul %646 %647 
                                                      OpStore %644 %648 
                              Uniform f32_4* %650 = OpAccessChain %25 %55 
                                       f32_4 %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %644 
                                         f32 %653 = OpDot %651 %652 
                                Private f32* %654 = OpAccessChain %649 %118 
                                                      OpStore %654 %653 
                              Uniform f32_4* %655 = OpAccessChain %25 %65 
                                       f32_4 %656 = OpLoad %655 
                                       f32_4 %657 = OpLoad %644 
                                         f32 %658 = OpDot %656 %657 
                                Private f32* %659 = OpAccessChain %649 %101 
                                                      OpStore %659 %658 
                              Uniform f32_4* %661 = OpAccessChain %25 %660 
                                       f32_4 %662 = OpLoad %661 
                                       f32_4 %663 = OpLoad %644 
                                         f32 %664 = OpDot %662 %663 
                                Private f32* %665 = OpAccessChain %649 %242 
                                                      OpStore %665 %664 
                              Uniform f32_4* %668 = OpAccessChain %25 %667 
                                       f32_4 %669 = OpLoad %668 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 1 2 
                                         f32 %671 = OpLoad %630 
                                       f32_3 %672 = OpCompositeConstruct %671 %671 %671 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_3 %674 = OpLoad %649 
                                       f32_3 %675 = OpFAdd %673 %674 
                                                      OpStore vs_TEXCOORD7 %675 
                                 Output f32* %676 = OpAccessChain %105 %47 %101 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpFNegate %677 
                                 Output f32* %679 = OpAccessChain %105 %47 %101 
                                                      OpStore %679 %678 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 681
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %105 %117 %143 %158 %170 %221 %387 %488 %492 %570 %574 %596 %597 %620 %666 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 RelaxedPrecision 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpMemberDecorate %23 25 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %103 0 BuiltIn 103 
                                                      OpMemberDecorate %103 1 BuiltIn 103 
                                                      OpMemberDecorate %103 2 BuiltIn 103 
                                                      OpDecorate %103 Block 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate vs_TEXCOORD0 Location 143 
                                                      OpDecorate vs_TEXCOORD1 Location 158 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate vs_TEXCOORD5 Location 221 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate vs_TEXCOORD2 Location 488 
                                                      OpDecorate %492 Location 492 
                                                      OpDecorate vs_TEXCOORD3 Location 570 
                                                      OpDecorate vs_TEXCOORD4 Location 574 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %596 Location 596 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %597 Location 597 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 620 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 666 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeArray %7 %17 
                                              %22 = OpTypeArray %7 %17 
                                              %23 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %19 %7 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 16 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 17 
                               Private f32_4* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 6 
                                          i32 %42 = OpConstant 1 
                                              %43 = OpTypePointer Uniform %7 
                                          i32 %47 = OpConstant 0 
                                          i32 %55 = OpConstant 2 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                               Private f32_4* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 10 
                                         u32 %101 = OpConstant 1 
                                             %102 = OpTypeArray %6 %101 
                                             %103 = OpTypeStruct %7 %6 %102 
                                             %104 = OpTypePointer Output %103 
        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
                                             %113 = OpTypePointer Output %7 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %116 = OpVariable Private 
                                Input f32_4* %117 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Input %6 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_2 %139 = OpConstantComposite %138 %138 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %146 = OpConstant 24 
                                             %157 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %161 = OpConstant 25 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 23 
                                             %184 = OpTypeBool 
                                             %185 = OpTypePointer Private %184 
                               Private bool* %186 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %192 = OpConstant 3.674022E-40 
                                Private f32* %194 = OpVariable Private 
                                         i32 %195 = OpConstant 13 
                                         i32 %199 = OpConstant 14 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %212 = OpConstant 11 
                                         i32 %217 = OpConstant 15 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %223 = OpConstant 3.674022E-40 
                                             %225 = OpTypePointer Output %6 
                                         u32 %229 = OpConstant 3 
                                         u32 %242 = OpConstant 2 
                                         i32 %258 = OpConstant 9 
                                         i32 %279 = OpConstant 19 
                                         i32 %282 = OpConstant 20 
                                         i32 %306 = OpConstant 18 
                                         i32 %310 = OpConstant 22 
                                             %323 = OpTypePointer Private %15 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %325 = OpConstant 21 
                                             %344 = OpTypePointer Uniform %15 
                                         i32 %348 = OpConstant 7 
                                             %386 = OpTypePointer Input %15 
                                Input f32_3* %387 = OpVariable Input 
                                             %393 = OpTypePointer Private %26 
                                Private i32* %394 = OpVariable Private 
                                         u32 %398 = OpConstant 4294967295 
                                Private i32* %401 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                Input f32_4* %492 = OpVariable Input 
                              Private f32_3* %537 = OpVariable Private 
                                         i32 %553 = OpConstant 8 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %596 = OpVariable Output 
                                Input f32_4* %597 = OpVariable Input 
                                         i32 %601 = OpConstant 12 
                                             %619 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                Private f32* %630 = OpVariable Private 
                              Private f32_4* %644 = OpVariable Private 
                              Private f32_3* %649 = OpVariable Private 
                                         i32 %660 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                         i32 %667 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %14 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 2 3 
                                                      OpStore %9 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %39 1 1 1 1 
                               Uniform f32_4* %44 = OpAccessChain %25 %41 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_4 %46 = OpFMul %40 %45 
                                                      OpStore %38 %46 
                               Uniform f32_4* %48 = OpAccessChain %25 %41 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 0 0 0 0 
                                        f32_4 %52 = OpFMul %49 %51 
                                        f32_4 %53 = OpLoad %38 
                                        f32_4 %54 = OpFAdd %52 %53 
                                                      OpStore %38 %54 
                               Uniform f32_4* %56 = OpAccessChain %25 %41 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %11 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %38 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %38 %62 
                                        f32_4 %64 = OpLoad %38 
                               Uniform f32_4* %66 = OpAccessChain %25 %41 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %41 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %11 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %38 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %38 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %38 %79 
                                        f32_4 %81 = OpLoad %63 
                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %25 %83 %42 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFMul %82 %85 
                                                      OpStore %80 %86 
                               Uniform f32_4* %87 = OpAccessChain %25 %83 %47 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpLoad %63 
                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %80 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %80 %93 
                               Uniform f32_4* %94 = OpAccessChain %25 %83 %55 
                                        f32_4 %95 = OpLoad %94 
                                        f32_4 %96 = OpLoad %63 
                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
                                        f32_4 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %80 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %80 %100 
                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %63 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %80 
                                       f32_4 %112 = OpFAdd %110 %111 
                               Output f32_4* %114 = OpAccessChain %105 %47 
                                                      OpStore %114 %112 
                                  Input f32* %120 = OpAccessChain %117 %118 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %116 %123 
                                         f32 %124 = OpLoad %116 
                                         f32 %125 = OpExtInst %1 8 %124 
                                Private f32* %126 = OpAccessChain %80 %118 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %80 %118 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %131 = OpFMul %129 %130 
                                  Input f32* %132 = OpAccessChain %117 %118 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %80 %101 
                                                      OpStore %135 %134 
                                       f32_4 %136 = OpLoad %80 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %80 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
                                                      OpStore %80 %142 
                                       f32_4 %144 = OpLoad %80 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %147 = OpAccessChain %25 %146 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFMul %145 %149 
                              Uniform f32_4* %151 = OpAccessChain %25 %146 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
                                       f32_2 %154 = OpFAdd %150 %153 
                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %156 
                                       f32_4 %159 = OpLoad %80 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                              Uniform f32_4* %162 = OpAccessChain %25 %161 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFMul %160 %164 
                              Uniform f32_4* %166 = OpAccessChain %25 %161 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFAdd %165 %168 
                                                      OpStore vs_TEXCOORD1 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %183 
                                  Input f32* %188 = OpAccessChain %117 %101 
                                         f32 %189 = OpLoad %188 
                                        bool %190 = OpFOrdGreaterThanEqual %187 %189 
                                                      OpStore %186 %190 
                                        bool %191 = OpLoad %186 
                                         f32 %193 = OpSelect %191 %192 %187 
                                                      OpStore %116 %193 
                                Uniform f32* %196 = OpAccessChain %25 %195 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                Uniform f32* %200 = OpAccessChain %25 %199 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %198 %201 
                                                      OpStore %194 %202 
                                         f32 %203 = OpLoad %116 
                                         f32 %204 = OpLoad %194 
                                         f32 %205 = OpFMul %203 %204 
                                Uniform f32* %206 = OpAccessChain %25 %195 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFAdd %205 %207 
                                                      OpStore %116 %208 
                                         f32 %209 = OpLoad %116 
                                         f32 %211 = OpFMul %209 %210 
                                Uniform f32* %213 = OpAccessChain %25 %212 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFAdd %211 %214 
                                                      OpStore %116 %215 
                                         f32 %216 = OpLoad %116 
                                Uniform f32* %218 = OpAccessChain %25 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %116 %220 
                                         f32 %222 = OpLoad %116 
                                         f32 %224 = OpFMul %222 %223 
                                 Output f32* %226 = OpAccessChain vs_TEXCOORD5 %118 
                                                      OpStore %226 %224 
                                Private f32* %227 = OpAccessChain %63 %101 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %230 = OpAccessChain %25 %83 %42 %229 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %228 %231 
                                                      OpStore %116 %232 
                                Uniform f32* %233 = OpAccessChain %25 %83 %47 %229 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %63 %118 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                         f32 %238 = OpLoad %116 
                                         f32 %239 = OpFAdd %237 %238 
                                                      OpStore %116 %239 
                                Uniform f32* %240 = OpAccessChain %25 %83 %55 %229 
                                         f32 %241 = OpLoad %240 
                                Private f32* %243 = OpAccessChain %63 %242 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %241 %244 
                                         f32 %246 = OpLoad %116 
                                         f32 %247 = OpFAdd %245 %246 
                                                      OpStore %116 %247 
                                Uniform f32* %248 = OpAccessChain %25 %83 %65 %229 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %63 %229 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpLoad %116 
                                         f32 %254 = OpFAdd %252 %253 
                                                      OpStore %116 %254 
                              Uniform f32_4* %255 = OpAccessChain %25 %42 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 1 
                              Uniform f32_4* %259 = OpAccessChain %25 %258 %42 
                                       f32_4 %260 = OpLoad %259 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_2 %262 = OpFMul %257 %261 
                                       f32_4 %263 = OpLoad %63 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
                                                      OpStore %63 %264 
                              Uniform f32_4* %265 = OpAccessChain %25 %258 %47 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                              Uniform f32_4* %268 = OpAccessChain %25 %42 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 0 
                                       f32_2 %271 = OpFMul %267 %270 
                                       f32_4 %272 = OpLoad %63 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %63 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %63 %276 
                                       f32_4 %277 = OpLoad %63 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                Uniform f32* %280 = OpAccessChain %25 %279 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %283 = OpAccessChain %25 %282 
                                         f32 %284 = OpLoad %283 
                                       f32_2 %285 = OpCompositeConstruct %281 %284 
                                       f32_2 %286 = OpFMul %278 %285 
                                       f32_4 %287 = OpLoad %63 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
                                                      OpStore %63 %288 
                                         f32 %289 = OpLoad %116 
                                       f32_2 %290 = OpCompositeConstruct %289 %289 
                                       f32_4 %291 = OpLoad %63 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                       f32_2 %293 = OpFDiv %290 %292 
                                       f32_4 %294 = OpLoad %63 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 2 3 
                                                      OpStore %63 %295 
                                       f32_4 %296 = OpLoad %63 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpLoad %63 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                         f32 %300 = OpDot %297 %299 
                                                      OpStore %116 %300 
                                         f32 %301 = OpLoad %116 
                                         f32 %302 = OpExtInst %1 32 %301 
                                                      OpStore %116 %302 
                                  Input f32* %303 = OpAccessChain %117 %101 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 4 %304 
                                Uniform f32* %307 = OpAccessChain %25 %306 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %305 %308 
                                                      OpStore %194 %309 
                                Uniform f32* %311 = OpAccessChain %25 %310 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFAdd %312 %192 
                                Private f32* %314 = OpAccessChain %63 %118 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %194 
                                Private f32* %316 = OpAccessChain %63 %118 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                                      OpStore %194 %318 
                                         f32 %319 = OpLoad %116 
                                         f32 %320 = OpLoad %194 
                                         f32 %321 = OpFMul %319 %320 
                                Private f32* %322 = OpAccessChain %63 %118 
                                                      OpStore %322 %321 
                                Uniform f32* %326 = OpAccessChain %25 %325 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                         f32 %329 = OpFAdd %328 %192 
                                Private f32* %330 = OpAccessChain %324 %118 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %324 %118 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %63 %118 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %63 %118 
                                                      OpStore %336 %335 
                                         f32 %337 = OpLoad %116 
                                         f32 %338 = OpLoad %194 
                                         f32 %339 = OpFMul %337 %338 
                                Private f32* %340 = OpAccessChain %63 %118 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %339 %342 
                                                      OpStore %116 %343 
                              Uniform f32_3* %345 = OpAccessChain %25 %47 
                                       f32_3 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 1 1 1 
                              Uniform f32_4* %349 = OpAccessChain %25 %348 %42 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %324 %352 
                              Uniform f32_4* %353 = OpAccessChain %25 %348 %47 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %25 %47 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %355 %358 
                                       f32_3 %360 = OpLoad %324 
                                       f32_3 %361 = OpFAdd %359 %360 
                                                      OpStore %324 %361 
                              Uniform f32_4* %362 = OpAccessChain %25 %348 %55 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_3* %365 = OpAccessChain %25 %47 
                                       f32_3 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 2 2 
                                       f32_3 %368 = OpFMul %364 %367 
                                       f32_3 %369 = OpLoad %324 
                                       f32_3 %370 = OpFAdd %368 %369 
                                                      OpStore %324 %370 
                                       f32_3 %371 = OpLoad %324 
                              Uniform f32_4* %372 = OpAccessChain %25 %348 %65 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFAdd %371 %374 
                                                      OpStore %324 %375 
                                  Input f32* %376 = OpAccessChain %11 %242 
                                         f32 %377 = OpLoad %376 
                                Private f32* %378 = OpAccessChain %9 %242 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFNegate %380 
                                       f32_3 %382 = OpLoad %324 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %388 = OpLoad %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %391 = OpDot %388 %390 
                                Private f32* %392 = OpAccessChain %9 %118 
                                                      OpStore %392 %391 
                                Private f32* %395 = OpAccessChain %9 %118 
                                         f32 %396 = OpLoad %395 
                                        bool %397 = OpFOrdLessThan %187 %396 
                                         u32 %399 = OpSelect %397 %398 %118 
                                         i32 %400 = OpBitcast %399 
                                                      OpStore %394 %400 
                                Private f32* %402 = OpAccessChain %9 %118 
                                         f32 %403 = OpLoad %402 
                                        bool %404 = OpFOrdLessThan %403 %187 
                                         u32 %405 = OpSelect %404 %398 %118 
                                         i32 %406 = OpBitcast %405 
                                                      OpStore %401 %406 
                                         i32 %407 = OpLoad %394 
                                         i32 %408 = OpSNegate %407 
                                         i32 %409 = OpLoad %401 
                                         i32 %410 = OpIAdd %408 %409 
                                                      OpStore %401 %410 
                                         i32 %411 = OpLoad %401 
                                         f32 %412 = OpConvertSToF %411 
                                Private f32* %413 = OpAccessChain %9 %118 
                                                      OpStore %413 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpLoad %387 
                                       f32_3 %417 = OpFMul %415 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %9 %419 
                                       f32_4 %420 = OpLoad %9 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                              Uniform f32_4* %422 = OpAccessChain %25 %348 %47 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                         f32 %425 = OpDot %421 %424 
                                Private f32* %426 = OpAccessChain %80 %118 
                                                      OpStore %426 %425 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                              Uniform f32_4* %429 = OpAccessChain %25 %348 %42 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %428 %431 
                                Private f32* %433 = OpAccessChain %80 %101 
                                                      OpStore %433 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                              Uniform f32_4* %436 = OpAccessChain %25 %348 %55 
                                       f32_4 %437 = OpLoad %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                         f32 %439 = OpDot %435 %438 
                                Private f32* %440 = OpAccessChain %80 %242 
                                                      OpStore %440 %439 
                                       f32_4 %441 = OpLoad %80 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_4 %443 = OpLoad %80 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                         f32 %445 = OpDot %442 %444 
                                Private f32* %446 = OpAccessChain %9 %118 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %9 %118 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 32 %448 
                                Private f32* %450 = OpAccessChain %9 %118 
                                                      OpStore %450 %449 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 0 
                                       f32_4 %453 = OpLoad %80 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 1 2 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %80 %455 
                                       f32_4 %456 = OpLoad %38 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFNegate %457 
                              Uniform f32_3* %459 = OpAccessChain %25 %47 
                                       f32_3 %460 = OpLoad %459 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %194 %468 
                                         f32 %469 = OpLoad %194 
                                         f32 %470 = OpExtInst %1 32 %469 
                                                      OpStore %194 %470 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                         f32 %473 = OpLoad %194 
                                       f32_3 %474 = OpCompositeConstruct %473 %473 %473 
                                       f32_3 %475 = OpFMul %472 %474 
                                                      OpStore %324 %475 
                                       f32_4 %476 = OpLoad %80 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 3 
                                       f32_3 %478 = OpLoad %324 
                                         f32 %479 = OpDot %477 %478 
                                                      OpStore %194 %479 
                                         f32 %480 = OpLoad %194 
                                         f32 %481 = OpExtInst %1 4 %480 
                                         f32 %482 = OpLoad %116 
                                         f32 %483 = OpFMul %481 %482 
                                Private f32* %484 = OpAccessChain %63 %118 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFAdd %483 %485 
                                 Output f32* %487 = OpAccessChain vs_TEXCOORD5 %101 
                                                      OpStore %487 %486 
                                Private f32* %489 = OpAccessChain %38 %118 
                                         f32 %490 = OpLoad %489 
                                 Output f32* %491 = OpAccessChain vs_TEXCOORD2 %229 
                                                      OpStore %491 %490 
                                       f32_4 %493 = OpLoad %492 
                                       f32_3 %494 = OpVectorShuffle %493 %493 1 1 1 
                              Uniform f32_4* %495 = OpAccessChain %25 %41 %42 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 1 2 0 
                                       f32_3 %498 = OpFMul %494 %497 
                                       f32_4 %499 = OpLoad %63 
                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
                                                      OpStore %63 %500 
                              Uniform f32_4* %501 = OpAccessChain %25 %41 %47 
                                       f32_4 %502 = OpLoad %501 
                                       f32_3 %503 = OpVectorShuffle %502 %502 1 2 0 
                                       f32_4 %504 = OpLoad %492 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 0 0 
                                       f32_3 %506 = OpFMul %503 %505 
                                       f32_4 %507 = OpLoad %63 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFAdd %506 %508 
                                       f32_4 %510 = OpLoad %63 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %63 %511 
                              Uniform f32_4* %512 = OpAccessChain %25 %41 %55 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 1 2 0 
                                       f32_4 %515 = OpLoad %492 
                                       f32_3 %516 = OpVectorShuffle %515 %515 2 2 2 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %63 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpFAdd %517 %519 
                                       f32_4 %521 = OpLoad %63 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %63 %522 
                                       f32_4 %523 = OpLoad %63 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_4 %525 = OpLoad %63 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                         f32 %527 = OpDot %524 %526 
                                                      OpStore %116 %527 
                                         f32 %528 = OpLoad %116 
                                         f32 %529 = OpExtInst %1 32 %528 
                                                      OpStore %116 %529 
                                         f32 %530 = OpLoad %116 
                                       f32_3 %531 = OpCompositeConstruct %530 %530 %530 
                                       f32_4 %532 = OpLoad %63 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFMul %531 %533 
                                       f32_4 %535 = OpLoad %63 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %63 %536 
                                       f32_4 %538 = OpLoad %63 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %80 
                                       f32_3 %541 = OpVectorShuffle %540 %540 3 0 1 
                                       f32_3 %542 = OpFMul %539 %541 
                                                      OpStore %537 %542 
                                       f32_4 %543 = OpLoad %80 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %63 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_3 %548 = OpLoad %537 
                                       f32_3 %549 = OpFNegate %548 
                                       f32_3 %550 = OpFAdd %547 %549 
                                                      OpStore %537 %550 
                                  Input f32* %551 = OpAccessChain %492 %229 
                                         f32 %552 = OpLoad %551 
                                Uniform f32* %554 = OpAccessChain %25 %553 %229 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpFMul %552 %555 
                                                      OpStore %116 %556 
                                         f32 %557 = OpLoad %116 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %537 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %537 %560 
                                Private f32* %561 = OpAccessChain %537 %118 
                                         f32 %562 = OpLoad %561 
                                 Output f32* %563 = OpAccessChain vs_TEXCOORD2 %101 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %80 %118 
                                         f32 %565 = OpLoad %564 
                                 Output f32* %566 = OpAccessChain vs_TEXCOORD2 %242 
                                                      OpStore %566 %565 
                                Private f32* %567 = OpAccessChain %63 %242 
                                         f32 %568 = OpLoad %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD2 %118 
                                                      OpStore %569 %568 
                                Private f32* %571 = OpAccessChain %63 %118 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD3 %118 
                                                      OpStore %573 %572 
                                Private f32* %575 = OpAccessChain %63 %101 
                                         f32 %576 = OpLoad %575 
                                 Output f32* %577 = OpAccessChain vs_TEXCOORD4 %118 
                                                      OpStore %577 %576 
                                Private f32* %578 = OpAccessChain %38 %101 
                                         f32 %579 = OpLoad %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %229 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %38 %242 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD4 %229 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %80 %101 
                                         f32 %585 = OpLoad %584 
                                 Output f32* %586 = OpAccessChain vs_TEXCOORD3 %242 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %537 %101 
                                         f32 %588 = OpLoad %587 
                                 Output f32* %589 = OpAccessChain vs_TEXCOORD3 %101 
                                                      OpStore %589 %588 
                                Private f32* %590 = OpAccessChain %537 %242 
                                         f32 %591 = OpLoad %590 
                                 Output f32* %592 = OpAccessChain vs_TEXCOORD4 %101 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %80 %229 
                                         f32 %594 = OpLoad %593 
                                 Output f32* %595 = OpAccessChain vs_TEXCOORD4 %242 
                                                      OpStore %595 %594 
                                       f32_4 %598 = OpLoad %597 
                                                      OpStore %596 %598 
                                       f32_4 %599 = OpLoad %9 
                                       f32_3 %600 = OpVectorShuffle %599 %599 1 1 1 
                              Uniform f32_4* %602 = OpAccessChain %25 %601 %42 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFMul %600 %604 
                                       f32_4 %606 = OpLoad %38 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %38 %607 
                              Uniform f32_4* %608 = OpAccessChain %25 %601 %47 
                                       f32_4 %609 = OpLoad %608 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_4 %611 = OpLoad %9 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 0 0 
                                       f32_3 %613 = OpFMul %610 %612 
                                       f32_4 %614 = OpLoad %38 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                                       f32_3 %616 = OpFAdd %613 %615 
                                       f32_4 %617 = OpLoad %9 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 2 6 
                                                      OpStore %9 %618 
                              Uniform f32_4* %621 = OpAccessChain %25 %601 %55 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_4 %624 = OpLoad %9 
                                       f32_3 %625 = OpVectorShuffle %624 %624 2 2 2 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 3 
                                       f32_3 %629 = OpFAdd %626 %628 
                                                      OpStore vs_TEXCOORD6 %629 
                                Private f32* %631 = OpAccessChain %80 %101 
                                         f32 %632 = OpLoad %631 
                                Private f32* %633 = OpAccessChain %80 %101 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFMul %632 %634 
                                                      OpStore %630 %635 
                                Private f32* %636 = OpAccessChain %80 %118 
                                         f32 %637 = OpLoad %636 
                                Private f32* %638 = OpAccessChain %80 %118 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                         f32 %641 = OpLoad %630 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %640 %642 
                                                      OpStore %630 %643 
                                       f32_4 %645 = OpLoad %80 
                                       f32_4 %646 = OpVectorShuffle %645 %645 1 3 2 0 
                                       f32_4 %647 = OpLoad %80 
                                       f32_4 %648 = OpFMul %646 %647 
                                                      OpStore %644 %648 
                              Uniform f32_4* %650 = OpAccessChain %25 %55 
                                       f32_4 %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %644 
                                         f32 %653 = OpDot %651 %652 
                                Private f32* %654 = OpAccessChain %649 %118 
                                                      OpStore %654 %653 
                              Uniform f32_4* %655 = OpAccessChain %25 %65 
                                       f32_4 %656 = OpLoad %655 
                                       f32_4 %657 = OpLoad %644 
                                         f32 %658 = OpDot %656 %657 
                                Private f32* %659 = OpAccessChain %649 %101 
                                                      OpStore %659 %658 
                              Uniform f32_4* %661 = OpAccessChain %25 %660 
                                       f32_4 %662 = OpLoad %661 
                                       f32_4 %663 = OpLoad %644 
                                         f32 %664 = OpDot %662 %663 
                                Private f32* %665 = OpAccessChain %649 %242 
                                                      OpStore %665 %664 
                              Uniform f32_4* %668 = OpAccessChain %25 %667 
                                       f32_4 %669 = OpLoad %668 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 1 2 
                                         f32 %671 = OpLoad %630 
                                       f32_3 %672 = OpCompositeConstruct %671 %671 %671 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_3 %674 = OpLoad %649 
                                       f32_3 %675 = OpFAdd %673 %674 
                                                      OpStore vs_TEXCOORD7 %675 
                                 Output f32* %676 = OpAccessChain %105 %47 %101 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpFNegate %677 
                                 Output f32* %679 = OpAccessChain %105 %47 %101 
                                                      OpStore %679 %678 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 681
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %105 %117 %143 %158 %170 %221 %387 %488 %492 %570 %574 %596 %597 %620 %666 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 RelaxedPrecision 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpMemberDecorate %23 25 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %103 0 BuiltIn 103 
                                                      OpMemberDecorate %103 1 BuiltIn 103 
                                                      OpMemberDecorate %103 2 BuiltIn 103 
                                                      OpDecorate %103 Block 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate vs_TEXCOORD0 Location 143 
                                                      OpDecorate vs_TEXCOORD1 Location 158 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate vs_TEXCOORD5 Location 221 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate vs_TEXCOORD2 Location 488 
                                                      OpDecorate %492 Location 492 
                                                      OpDecorate vs_TEXCOORD3 Location 570 
                                                      OpDecorate vs_TEXCOORD4 Location 574 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %596 Location 596 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %597 Location 597 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 620 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 666 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeArray %7 %17 
                                              %22 = OpTypeArray %7 %17 
                                              %23 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %19 %7 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 16 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 17 
                               Private f32_4* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 6 
                                          i32 %42 = OpConstant 1 
                                              %43 = OpTypePointer Uniform %7 
                                          i32 %47 = OpConstant 0 
                                          i32 %55 = OpConstant 2 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                               Private f32_4* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 10 
                                         u32 %101 = OpConstant 1 
                                             %102 = OpTypeArray %6 %101 
                                             %103 = OpTypeStruct %7 %6 %102 
                                             %104 = OpTypePointer Output %103 
        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
                                             %113 = OpTypePointer Output %7 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %116 = OpVariable Private 
                                Input f32_4* %117 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Input %6 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_2 %139 = OpConstantComposite %138 %138 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %146 = OpConstant 24 
                                             %157 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %161 = OpConstant 25 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 23 
                                             %184 = OpTypeBool 
                                             %185 = OpTypePointer Private %184 
                               Private bool* %186 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %192 = OpConstant 3.674022E-40 
                                Private f32* %194 = OpVariable Private 
                                         i32 %195 = OpConstant 13 
                                         i32 %199 = OpConstant 14 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %212 = OpConstant 11 
                                         i32 %217 = OpConstant 15 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %223 = OpConstant 3.674022E-40 
                                             %225 = OpTypePointer Output %6 
                                         u32 %229 = OpConstant 3 
                                         u32 %242 = OpConstant 2 
                                         i32 %258 = OpConstant 9 
                                         i32 %279 = OpConstant 19 
                                         i32 %282 = OpConstant 20 
                                         i32 %306 = OpConstant 18 
                                         i32 %310 = OpConstant 22 
                                             %323 = OpTypePointer Private %15 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %325 = OpConstant 21 
                                             %344 = OpTypePointer Uniform %15 
                                         i32 %348 = OpConstant 7 
                                             %386 = OpTypePointer Input %15 
                                Input f32_3* %387 = OpVariable Input 
                                             %393 = OpTypePointer Private %26 
                                Private i32* %394 = OpVariable Private 
                                         u32 %398 = OpConstant 4294967295 
                                Private i32* %401 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                Input f32_4* %492 = OpVariable Input 
                              Private f32_3* %537 = OpVariable Private 
                                         i32 %553 = OpConstant 8 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %596 = OpVariable Output 
                                Input f32_4* %597 = OpVariable Input 
                                         i32 %601 = OpConstant 12 
                                             %619 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                Private f32* %630 = OpVariable Private 
                              Private f32_4* %644 = OpVariable Private 
                              Private f32_3* %649 = OpVariable Private 
                                         i32 %660 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                         i32 %667 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %14 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 2 3 
                                                      OpStore %9 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %39 1 1 1 1 
                               Uniform f32_4* %44 = OpAccessChain %25 %41 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_4 %46 = OpFMul %40 %45 
                                                      OpStore %38 %46 
                               Uniform f32_4* %48 = OpAccessChain %25 %41 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 0 0 0 0 
                                        f32_4 %52 = OpFMul %49 %51 
                                        f32_4 %53 = OpLoad %38 
                                        f32_4 %54 = OpFAdd %52 %53 
                                                      OpStore %38 %54 
                               Uniform f32_4* %56 = OpAccessChain %25 %41 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %11 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %38 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %38 %62 
                                        f32_4 %64 = OpLoad %38 
                               Uniform f32_4* %66 = OpAccessChain %25 %41 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %41 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %11 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %38 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %38 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %38 %79 
                                        f32_4 %81 = OpLoad %63 
                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %25 %83 %42 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFMul %82 %85 
                                                      OpStore %80 %86 
                               Uniform f32_4* %87 = OpAccessChain %25 %83 %47 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpLoad %63 
                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %80 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %80 %93 
                               Uniform f32_4* %94 = OpAccessChain %25 %83 %55 
                                        f32_4 %95 = OpLoad %94 
                                        f32_4 %96 = OpLoad %63 
                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
                                        f32_4 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %80 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %80 %100 
                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %63 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %80 
                                       f32_4 %112 = OpFAdd %110 %111 
                               Output f32_4* %114 = OpAccessChain %105 %47 
                                                      OpStore %114 %112 
                                  Input f32* %120 = OpAccessChain %117 %118 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %116 %123 
                                         f32 %124 = OpLoad %116 
                                         f32 %125 = OpExtInst %1 8 %124 
                                Private f32* %126 = OpAccessChain %80 %118 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %80 %118 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %131 = OpFMul %129 %130 
                                  Input f32* %132 = OpAccessChain %117 %118 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %80 %101 
                                                      OpStore %135 %134 
                                       f32_4 %136 = OpLoad %80 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %80 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
                                                      OpStore %80 %142 
                                       f32_4 %144 = OpLoad %80 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %147 = OpAccessChain %25 %146 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFMul %145 %149 
                              Uniform f32_4* %151 = OpAccessChain %25 %146 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
                                       f32_2 %154 = OpFAdd %150 %153 
                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %156 
                                       f32_4 %159 = OpLoad %80 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                              Uniform f32_4* %162 = OpAccessChain %25 %161 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFMul %160 %164 
                              Uniform f32_4* %166 = OpAccessChain %25 %161 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFAdd %165 %168 
                                                      OpStore vs_TEXCOORD1 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %183 
                                  Input f32* %188 = OpAccessChain %117 %101 
                                         f32 %189 = OpLoad %188 
                                        bool %190 = OpFOrdGreaterThanEqual %187 %189 
                                                      OpStore %186 %190 
                                        bool %191 = OpLoad %186 
                                         f32 %193 = OpSelect %191 %192 %187 
                                                      OpStore %116 %193 
                                Uniform f32* %196 = OpAccessChain %25 %195 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                Uniform f32* %200 = OpAccessChain %25 %199 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %198 %201 
                                                      OpStore %194 %202 
                                         f32 %203 = OpLoad %116 
                                         f32 %204 = OpLoad %194 
                                         f32 %205 = OpFMul %203 %204 
                                Uniform f32* %206 = OpAccessChain %25 %195 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFAdd %205 %207 
                                                      OpStore %116 %208 
                                         f32 %209 = OpLoad %116 
                                         f32 %211 = OpFMul %209 %210 
                                Uniform f32* %213 = OpAccessChain %25 %212 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFAdd %211 %214 
                                                      OpStore %116 %215 
                                         f32 %216 = OpLoad %116 
                                Uniform f32* %218 = OpAccessChain %25 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %116 %220 
                                         f32 %222 = OpLoad %116 
                                         f32 %224 = OpFMul %222 %223 
                                 Output f32* %226 = OpAccessChain vs_TEXCOORD5 %118 
                                                      OpStore %226 %224 
                                Private f32* %227 = OpAccessChain %63 %101 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %230 = OpAccessChain %25 %83 %42 %229 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %228 %231 
                                                      OpStore %116 %232 
                                Uniform f32* %233 = OpAccessChain %25 %83 %47 %229 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %63 %118 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                         f32 %238 = OpLoad %116 
                                         f32 %239 = OpFAdd %237 %238 
                                                      OpStore %116 %239 
                                Uniform f32* %240 = OpAccessChain %25 %83 %55 %229 
                                         f32 %241 = OpLoad %240 
                                Private f32* %243 = OpAccessChain %63 %242 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %241 %244 
                                         f32 %246 = OpLoad %116 
                                         f32 %247 = OpFAdd %245 %246 
                                                      OpStore %116 %247 
                                Uniform f32* %248 = OpAccessChain %25 %83 %65 %229 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %63 %229 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpLoad %116 
                                         f32 %254 = OpFAdd %252 %253 
                                                      OpStore %116 %254 
                              Uniform f32_4* %255 = OpAccessChain %25 %42 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 1 
                              Uniform f32_4* %259 = OpAccessChain %25 %258 %42 
                                       f32_4 %260 = OpLoad %259 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_2 %262 = OpFMul %257 %261 
                                       f32_4 %263 = OpLoad %63 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
                                                      OpStore %63 %264 
                              Uniform f32_4* %265 = OpAccessChain %25 %258 %47 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                              Uniform f32_4* %268 = OpAccessChain %25 %42 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 0 
                                       f32_2 %271 = OpFMul %267 %270 
                                       f32_4 %272 = OpLoad %63 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %63 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %63 %276 
                                       f32_4 %277 = OpLoad %63 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                Uniform f32* %280 = OpAccessChain %25 %279 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %283 = OpAccessChain %25 %282 
                                         f32 %284 = OpLoad %283 
                                       f32_2 %285 = OpCompositeConstruct %281 %284 
                                       f32_2 %286 = OpFMul %278 %285 
                                       f32_4 %287 = OpLoad %63 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
                                                      OpStore %63 %288 
                                         f32 %289 = OpLoad %116 
                                       f32_2 %290 = OpCompositeConstruct %289 %289 
                                       f32_4 %291 = OpLoad %63 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                       f32_2 %293 = OpFDiv %290 %292 
                                       f32_4 %294 = OpLoad %63 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 2 3 
                                                      OpStore %63 %295 
                                       f32_4 %296 = OpLoad %63 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpLoad %63 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                         f32 %300 = OpDot %297 %299 
                                                      OpStore %116 %300 
                                         f32 %301 = OpLoad %116 
                                         f32 %302 = OpExtInst %1 32 %301 
                                                      OpStore %116 %302 
                                  Input f32* %303 = OpAccessChain %117 %101 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 4 %304 
                                Uniform f32* %307 = OpAccessChain %25 %306 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %305 %308 
                                                      OpStore %194 %309 
                                Uniform f32* %311 = OpAccessChain %25 %310 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFAdd %312 %192 
                                Private f32* %314 = OpAccessChain %63 %118 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %194 
                                Private f32* %316 = OpAccessChain %63 %118 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                                      OpStore %194 %318 
                                         f32 %319 = OpLoad %116 
                                         f32 %320 = OpLoad %194 
                                         f32 %321 = OpFMul %319 %320 
                                Private f32* %322 = OpAccessChain %63 %118 
                                                      OpStore %322 %321 
                                Uniform f32* %326 = OpAccessChain %25 %325 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                         f32 %329 = OpFAdd %328 %192 
                                Private f32* %330 = OpAccessChain %324 %118 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %324 %118 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %63 %118 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %63 %118 
                                                      OpStore %336 %335 
                                         f32 %337 = OpLoad %116 
                                         f32 %338 = OpLoad %194 
                                         f32 %339 = OpFMul %337 %338 
                                Private f32* %340 = OpAccessChain %63 %118 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %339 %342 
                                                      OpStore %116 %343 
                              Uniform f32_3* %345 = OpAccessChain %25 %47 
                                       f32_3 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 1 1 1 
                              Uniform f32_4* %349 = OpAccessChain %25 %348 %42 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %324 %352 
                              Uniform f32_4* %353 = OpAccessChain %25 %348 %47 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %25 %47 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %355 %358 
                                       f32_3 %360 = OpLoad %324 
                                       f32_3 %361 = OpFAdd %359 %360 
                                                      OpStore %324 %361 
                              Uniform f32_4* %362 = OpAccessChain %25 %348 %55 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_3* %365 = OpAccessChain %25 %47 
                                       f32_3 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 2 2 
                                       f32_3 %368 = OpFMul %364 %367 
                                       f32_3 %369 = OpLoad %324 
                                       f32_3 %370 = OpFAdd %368 %369 
                                                      OpStore %324 %370 
                                       f32_3 %371 = OpLoad %324 
                              Uniform f32_4* %372 = OpAccessChain %25 %348 %65 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFAdd %371 %374 
                                                      OpStore %324 %375 
                                  Input f32* %376 = OpAccessChain %11 %242 
                                         f32 %377 = OpLoad %376 
                                Private f32* %378 = OpAccessChain %9 %242 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFNegate %380 
                                       f32_3 %382 = OpLoad %324 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %388 = OpLoad %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %391 = OpDot %388 %390 
                                Private f32* %392 = OpAccessChain %9 %118 
                                                      OpStore %392 %391 
                                Private f32* %395 = OpAccessChain %9 %118 
                                         f32 %396 = OpLoad %395 
                                        bool %397 = OpFOrdLessThan %187 %396 
                                         u32 %399 = OpSelect %397 %398 %118 
                                         i32 %400 = OpBitcast %399 
                                                      OpStore %394 %400 
                                Private f32* %402 = OpAccessChain %9 %118 
                                         f32 %403 = OpLoad %402 
                                        bool %404 = OpFOrdLessThan %403 %187 
                                         u32 %405 = OpSelect %404 %398 %118 
                                         i32 %406 = OpBitcast %405 
                                                      OpStore %401 %406 
                                         i32 %407 = OpLoad %394 
                                         i32 %408 = OpSNegate %407 
                                         i32 %409 = OpLoad %401 
                                         i32 %410 = OpIAdd %408 %409 
                                                      OpStore %401 %410 
                                         i32 %411 = OpLoad %401 
                                         f32 %412 = OpConvertSToF %411 
                                Private f32* %413 = OpAccessChain %9 %118 
                                                      OpStore %413 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpLoad %387 
                                       f32_3 %417 = OpFMul %415 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %9 %419 
                                       f32_4 %420 = OpLoad %9 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                              Uniform f32_4* %422 = OpAccessChain %25 %348 %47 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                         f32 %425 = OpDot %421 %424 
                                Private f32* %426 = OpAccessChain %80 %118 
                                                      OpStore %426 %425 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                              Uniform f32_4* %429 = OpAccessChain %25 %348 %42 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %428 %431 
                                Private f32* %433 = OpAccessChain %80 %101 
                                                      OpStore %433 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                              Uniform f32_4* %436 = OpAccessChain %25 %348 %55 
                                       f32_4 %437 = OpLoad %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                         f32 %439 = OpDot %435 %438 
                                Private f32* %440 = OpAccessChain %80 %242 
                                                      OpStore %440 %439 
                                       f32_4 %441 = OpLoad %80 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_4 %443 = OpLoad %80 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                         f32 %445 = OpDot %442 %444 
                                Private f32* %446 = OpAccessChain %9 %118 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %9 %118 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 32 %448 
                                Private f32* %450 = OpAccessChain %9 %118 
                                                      OpStore %450 %449 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 0 
                                       f32_4 %453 = OpLoad %80 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 1 2 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %80 %455 
                                       f32_4 %456 = OpLoad %38 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFNegate %457 
                              Uniform f32_3* %459 = OpAccessChain %25 %47 
                                       f32_3 %460 = OpLoad %459 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %194 %468 
                                         f32 %469 = OpLoad %194 
                                         f32 %470 = OpExtInst %1 32 %469 
                                                      OpStore %194 %470 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                         f32 %473 = OpLoad %194 
                                       f32_3 %474 = OpCompositeConstruct %473 %473 %473 
                                       f32_3 %475 = OpFMul %472 %474 
                                                      OpStore %324 %475 
                                       f32_4 %476 = OpLoad %80 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 3 
                                       f32_3 %478 = OpLoad %324 
                                         f32 %479 = OpDot %477 %478 
                                                      OpStore %194 %479 
                                         f32 %480 = OpLoad %194 
                                         f32 %481 = OpExtInst %1 4 %480 
                                         f32 %482 = OpLoad %116 
                                         f32 %483 = OpFMul %481 %482 
                                Private f32* %484 = OpAccessChain %63 %118 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFAdd %483 %485 
                                 Output f32* %487 = OpAccessChain vs_TEXCOORD5 %101 
                                                      OpStore %487 %486 
                                Private f32* %489 = OpAccessChain %38 %118 
                                         f32 %490 = OpLoad %489 
                                 Output f32* %491 = OpAccessChain vs_TEXCOORD2 %229 
                                                      OpStore %491 %490 
                                       f32_4 %493 = OpLoad %492 
                                       f32_3 %494 = OpVectorShuffle %493 %493 1 1 1 
                              Uniform f32_4* %495 = OpAccessChain %25 %41 %42 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 1 2 0 
                                       f32_3 %498 = OpFMul %494 %497 
                                       f32_4 %499 = OpLoad %63 
                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
                                                      OpStore %63 %500 
                              Uniform f32_4* %501 = OpAccessChain %25 %41 %47 
                                       f32_4 %502 = OpLoad %501 
                                       f32_3 %503 = OpVectorShuffle %502 %502 1 2 0 
                                       f32_4 %504 = OpLoad %492 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 0 0 
                                       f32_3 %506 = OpFMul %503 %505 
                                       f32_4 %507 = OpLoad %63 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFAdd %506 %508 
                                       f32_4 %510 = OpLoad %63 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %63 %511 
                              Uniform f32_4* %512 = OpAccessChain %25 %41 %55 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 1 2 0 
                                       f32_4 %515 = OpLoad %492 
                                       f32_3 %516 = OpVectorShuffle %515 %515 2 2 2 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %63 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpFAdd %517 %519 
                                       f32_4 %521 = OpLoad %63 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %63 %522 
                                       f32_4 %523 = OpLoad %63 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_4 %525 = OpLoad %63 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                         f32 %527 = OpDot %524 %526 
                                                      OpStore %116 %527 
                                         f32 %528 = OpLoad %116 
                                         f32 %529 = OpExtInst %1 32 %528 
                                                      OpStore %116 %529 
                                         f32 %530 = OpLoad %116 
                                       f32_3 %531 = OpCompositeConstruct %530 %530 %530 
                                       f32_4 %532 = OpLoad %63 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFMul %531 %533 
                                       f32_4 %535 = OpLoad %63 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %63 %536 
                                       f32_4 %538 = OpLoad %63 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %80 
                                       f32_3 %541 = OpVectorShuffle %540 %540 3 0 1 
                                       f32_3 %542 = OpFMul %539 %541 
                                                      OpStore %537 %542 
                                       f32_4 %543 = OpLoad %80 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %63 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_3 %548 = OpLoad %537 
                                       f32_3 %549 = OpFNegate %548 
                                       f32_3 %550 = OpFAdd %547 %549 
                                                      OpStore %537 %550 
                                  Input f32* %551 = OpAccessChain %492 %229 
                                         f32 %552 = OpLoad %551 
                                Uniform f32* %554 = OpAccessChain %25 %553 %229 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpFMul %552 %555 
                                                      OpStore %116 %556 
                                         f32 %557 = OpLoad %116 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %537 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %537 %560 
                                Private f32* %561 = OpAccessChain %537 %118 
                                         f32 %562 = OpLoad %561 
                                 Output f32* %563 = OpAccessChain vs_TEXCOORD2 %101 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %80 %118 
                                         f32 %565 = OpLoad %564 
                                 Output f32* %566 = OpAccessChain vs_TEXCOORD2 %242 
                                                      OpStore %566 %565 
                                Private f32* %567 = OpAccessChain %63 %242 
                                         f32 %568 = OpLoad %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD2 %118 
                                                      OpStore %569 %568 
                                Private f32* %571 = OpAccessChain %63 %118 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD3 %118 
                                                      OpStore %573 %572 
                                Private f32* %575 = OpAccessChain %63 %101 
                                         f32 %576 = OpLoad %575 
                                 Output f32* %577 = OpAccessChain vs_TEXCOORD4 %118 
                                                      OpStore %577 %576 
                                Private f32* %578 = OpAccessChain %38 %101 
                                         f32 %579 = OpLoad %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %229 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %38 %242 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD4 %229 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %80 %101 
                                         f32 %585 = OpLoad %584 
                                 Output f32* %586 = OpAccessChain vs_TEXCOORD3 %242 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %537 %101 
                                         f32 %588 = OpLoad %587 
                                 Output f32* %589 = OpAccessChain vs_TEXCOORD3 %101 
                                                      OpStore %589 %588 
                                Private f32* %590 = OpAccessChain %537 %242 
                                         f32 %591 = OpLoad %590 
                                 Output f32* %592 = OpAccessChain vs_TEXCOORD4 %101 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %80 %229 
                                         f32 %594 = OpLoad %593 
                                 Output f32* %595 = OpAccessChain vs_TEXCOORD4 %242 
                                                      OpStore %595 %594 
                                       f32_4 %598 = OpLoad %597 
                                                      OpStore %596 %598 
                                       f32_4 %599 = OpLoad %9 
                                       f32_3 %600 = OpVectorShuffle %599 %599 1 1 1 
                              Uniform f32_4* %602 = OpAccessChain %25 %601 %42 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFMul %600 %604 
                                       f32_4 %606 = OpLoad %38 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %38 %607 
                              Uniform f32_4* %608 = OpAccessChain %25 %601 %47 
                                       f32_4 %609 = OpLoad %608 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_4 %611 = OpLoad %9 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 0 0 
                                       f32_3 %613 = OpFMul %610 %612 
                                       f32_4 %614 = OpLoad %38 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                                       f32_3 %616 = OpFAdd %613 %615 
                                       f32_4 %617 = OpLoad %9 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 2 6 
                                                      OpStore %9 %618 
                              Uniform f32_4* %621 = OpAccessChain %25 %601 %55 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_4 %624 = OpLoad %9 
                                       f32_3 %625 = OpVectorShuffle %624 %624 2 2 2 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 3 
                                       f32_3 %629 = OpFAdd %626 %628 
                                                      OpStore vs_TEXCOORD6 %629 
                                Private f32* %631 = OpAccessChain %80 %101 
                                         f32 %632 = OpLoad %631 
                                Private f32* %633 = OpAccessChain %80 %101 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFMul %632 %634 
                                                      OpStore %630 %635 
                                Private f32* %636 = OpAccessChain %80 %118 
                                         f32 %637 = OpLoad %636 
                                Private f32* %638 = OpAccessChain %80 %118 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                         f32 %641 = OpLoad %630 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %640 %642 
                                                      OpStore %630 %643 
                                       f32_4 %645 = OpLoad %80 
                                       f32_4 %646 = OpVectorShuffle %645 %645 1 3 2 0 
                                       f32_4 %647 = OpLoad %80 
                                       f32_4 %648 = OpFMul %646 %647 
                                                      OpStore %644 %648 
                              Uniform f32_4* %650 = OpAccessChain %25 %55 
                                       f32_4 %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %644 
                                         f32 %653 = OpDot %651 %652 
                                Private f32* %654 = OpAccessChain %649 %118 
                                                      OpStore %654 %653 
                              Uniform f32_4* %655 = OpAccessChain %25 %65 
                                       f32_4 %656 = OpLoad %655 
                                       f32_4 %657 = OpLoad %644 
                                         f32 %658 = OpDot %656 %657 
                                Private f32* %659 = OpAccessChain %649 %101 
                                                      OpStore %659 %658 
                              Uniform f32_4* %661 = OpAccessChain %25 %660 
                                       f32_4 %662 = OpLoad %661 
                                       f32_4 %663 = OpLoad %644 
                                         f32 %664 = OpDot %662 %663 
                                Private f32* %665 = OpAccessChain %649 %242 
                                                      OpStore %665 %664 
                              Uniform f32_4* %668 = OpAccessChain %25 %667 
                                       f32_4 %669 = OpLoad %668 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 1 2 
                                         f32 %671 = OpLoad %630 
                                       f32_3 %672 = OpCompositeConstruct %671 %671 %671 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_3 %674 = OpLoad %649 
                                       f32_3 %675 = OpFAdd %673 %674 
                                                      OpStore vs_TEXCOORD7 %675 
                                 Output f32* %676 = OpAccessChain %105 %47 %101 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpFNegate %677 
                                 Output f32* %679 = OpAccessChain %105 %47 %101 
                                                      OpStore %679 %678 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat1.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat1.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat1.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 681
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %105 %117 %143 %158 %170 %221 %387 %488 %492 %570 %574 %596 %597 %620 %666 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 RelaxedPrecision 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpMemberDecorate %23 25 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %103 0 BuiltIn 103 
                                                      OpMemberDecorate %103 1 BuiltIn 103 
                                                      OpMemberDecorate %103 2 BuiltIn 103 
                                                      OpDecorate %103 Block 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate vs_TEXCOORD0 Location 143 
                                                      OpDecorate vs_TEXCOORD1 Location 158 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate vs_TEXCOORD5 Location 221 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate vs_TEXCOORD2 Location 488 
                                                      OpDecorate %492 Location 492 
                                                      OpDecorate vs_TEXCOORD3 Location 570 
                                                      OpDecorate vs_TEXCOORD4 Location 574 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %596 Location 596 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %597 Location 597 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 620 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 666 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeArray %7 %17 
                                              %22 = OpTypeArray %7 %17 
                                              %23 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %19 %7 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 16 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 17 
                               Private f32_4* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 6 
                                          i32 %42 = OpConstant 1 
                                              %43 = OpTypePointer Uniform %7 
                                          i32 %47 = OpConstant 0 
                                          i32 %55 = OpConstant 2 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                               Private f32_4* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 10 
                                         u32 %101 = OpConstant 1 
                                             %102 = OpTypeArray %6 %101 
                                             %103 = OpTypeStruct %7 %6 %102 
                                             %104 = OpTypePointer Output %103 
        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
                                             %113 = OpTypePointer Output %7 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %116 = OpVariable Private 
                                Input f32_4* %117 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Input %6 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_2 %139 = OpConstantComposite %138 %138 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %146 = OpConstant 24 
                                             %157 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %161 = OpConstant 25 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 23 
                                             %184 = OpTypeBool 
                                             %185 = OpTypePointer Private %184 
                               Private bool* %186 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %192 = OpConstant 3.674022E-40 
                                Private f32* %194 = OpVariable Private 
                                         i32 %195 = OpConstant 13 
                                         i32 %199 = OpConstant 14 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %212 = OpConstant 11 
                                         i32 %217 = OpConstant 15 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %223 = OpConstant 3.674022E-40 
                                             %225 = OpTypePointer Output %6 
                                         u32 %229 = OpConstant 3 
                                         u32 %242 = OpConstant 2 
                                         i32 %258 = OpConstant 9 
                                         i32 %279 = OpConstant 19 
                                         i32 %282 = OpConstant 20 
                                         i32 %306 = OpConstant 18 
                                         i32 %310 = OpConstant 22 
                                             %323 = OpTypePointer Private %15 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %325 = OpConstant 21 
                                             %344 = OpTypePointer Uniform %15 
                                         i32 %348 = OpConstant 7 
                                             %386 = OpTypePointer Input %15 
                                Input f32_3* %387 = OpVariable Input 
                                             %393 = OpTypePointer Private %26 
                                Private i32* %394 = OpVariable Private 
                                         u32 %398 = OpConstant 4294967295 
                                Private i32* %401 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                Input f32_4* %492 = OpVariable Input 
                              Private f32_3* %537 = OpVariable Private 
                                         i32 %553 = OpConstant 8 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %596 = OpVariable Output 
                                Input f32_4* %597 = OpVariable Input 
                                         i32 %601 = OpConstant 12 
                                             %619 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                Private f32* %630 = OpVariable Private 
                              Private f32_4* %644 = OpVariable Private 
                              Private f32_3* %649 = OpVariable Private 
                                         i32 %660 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                         i32 %667 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %14 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 2 3 
                                                      OpStore %9 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %39 1 1 1 1 
                               Uniform f32_4* %44 = OpAccessChain %25 %41 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_4 %46 = OpFMul %40 %45 
                                                      OpStore %38 %46 
                               Uniform f32_4* %48 = OpAccessChain %25 %41 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 0 0 0 0 
                                        f32_4 %52 = OpFMul %49 %51 
                                        f32_4 %53 = OpLoad %38 
                                        f32_4 %54 = OpFAdd %52 %53 
                                                      OpStore %38 %54 
                               Uniform f32_4* %56 = OpAccessChain %25 %41 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %11 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %38 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %38 %62 
                                        f32_4 %64 = OpLoad %38 
                               Uniform f32_4* %66 = OpAccessChain %25 %41 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %41 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %11 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %38 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %38 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %38 %79 
                                        f32_4 %81 = OpLoad %63 
                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %25 %83 %42 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFMul %82 %85 
                                                      OpStore %80 %86 
                               Uniform f32_4* %87 = OpAccessChain %25 %83 %47 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpLoad %63 
                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %80 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %80 %93 
                               Uniform f32_4* %94 = OpAccessChain %25 %83 %55 
                                        f32_4 %95 = OpLoad %94 
                                        f32_4 %96 = OpLoad %63 
                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
                                        f32_4 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %80 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %80 %100 
                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %63 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %80 
                                       f32_4 %112 = OpFAdd %110 %111 
                               Output f32_4* %114 = OpAccessChain %105 %47 
                                                      OpStore %114 %112 
                                  Input f32* %120 = OpAccessChain %117 %118 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %116 %123 
                                         f32 %124 = OpLoad %116 
                                         f32 %125 = OpExtInst %1 8 %124 
                                Private f32* %126 = OpAccessChain %80 %118 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %80 %118 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %131 = OpFMul %129 %130 
                                  Input f32* %132 = OpAccessChain %117 %118 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %80 %101 
                                                      OpStore %135 %134 
                                       f32_4 %136 = OpLoad %80 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %80 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
                                                      OpStore %80 %142 
                                       f32_4 %144 = OpLoad %80 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %147 = OpAccessChain %25 %146 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFMul %145 %149 
                              Uniform f32_4* %151 = OpAccessChain %25 %146 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
                                       f32_2 %154 = OpFAdd %150 %153 
                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %156 
                                       f32_4 %159 = OpLoad %80 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                              Uniform f32_4* %162 = OpAccessChain %25 %161 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFMul %160 %164 
                              Uniform f32_4* %166 = OpAccessChain %25 %161 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFAdd %165 %168 
                                                      OpStore vs_TEXCOORD1 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %183 
                                  Input f32* %188 = OpAccessChain %117 %101 
                                         f32 %189 = OpLoad %188 
                                        bool %190 = OpFOrdGreaterThanEqual %187 %189 
                                                      OpStore %186 %190 
                                        bool %191 = OpLoad %186 
                                         f32 %193 = OpSelect %191 %192 %187 
                                                      OpStore %116 %193 
                                Uniform f32* %196 = OpAccessChain %25 %195 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                Uniform f32* %200 = OpAccessChain %25 %199 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %198 %201 
                                                      OpStore %194 %202 
                                         f32 %203 = OpLoad %116 
                                         f32 %204 = OpLoad %194 
                                         f32 %205 = OpFMul %203 %204 
                                Uniform f32* %206 = OpAccessChain %25 %195 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFAdd %205 %207 
                                                      OpStore %116 %208 
                                         f32 %209 = OpLoad %116 
                                         f32 %211 = OpFMul %209 %210 
                                Uniform f32* %213 = OpAccessChain %25 %212 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFAdd %211 %214 
                                                      OpStore %116 %215 
                                         f32 %216 = OpLoad %116 
                                Uniform f32* %218 = OpAccessChain %25 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %116 %220 
                                         f32 %222 = OpLoad %116 
                                         f32 %224 = OpFMul %222 %223 
                                 Output f32* %226 = OpAccessChain vs_TEXCOORD5 %118 
                                                      OpStore %226 %224 
                                Private f32* %227 = OpAccessChain %63 %101 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %230 = OpAccessChain %25 %83 %42 %229 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %228 %231 
                                                      OpStore %116 %232 
                                Uniform f32* %233 = OpAccessChain %25 %83 %47 %229 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %63 %118 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                         f32 %238 = OpLoad %116 
                                         f32 %239 = OpFAdd %237 %238 
                                                      OpStore %116 %239 
                                Uniform f32* %240 = OpAccessChain %25 %83 %55 %229 
                                         f32 %241 = OpLoad %240 
                                Private f32* %243 = OpAccessChain %63 %242 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %241 %244 
                                         f32 %246 = OpLoad %116 
                                         f32 %247 = OpFAdd %245 %246 
                                                      OpStore %116 %247 
                                Uniform f32* %248 = OpAccessChain %25 %83 %65 %229 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %63 %229 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpLoad %116 
                                         f32 %254 = OpFAdd %252 %253 
                                                      OpStore %116 %254 
                              Uniform f32_4* %255 = OpAccessChain %25 %42 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 1 
                              Uniform f32_4* %259 = OpAccessChain %25 %258 %42 
                                       f32_4 %260 = OpLoad %259 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_2 %262 = OpFMul %257 %261 
                                       f32_4 %263 = OpLoad %63 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
                                                      OpStore %63 %264 
                              Uniform f32_4* %265 = OpAccessChain %25 %258 %47 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                              Uniform f32_4* %268 = OpAccessChain %25 %42 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 0 
                                       f32_2 %271 = OpFMul %267 %270 
                                       f32_4 %272 = OpLoad %63 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %63 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %63 %276 
                                       f32_4 %277 = OpLoad %63 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                Uniform f32* %280 = OpAccessChain %25 %279 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %283 = OpAccessChain %25 %282 
                                         f32 %284 = OpLoad %283 
                                       f32_2 %285 = OpCompositeConstruct %281 %284 
                                       f32_2 %286 = OpFMul %278 %285 
                                       f32_4 %287 = OpLoad %63 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
                                                      OpStore %63 %288 
                                         f32 %289 = OpLoad %116 
                                       f32_2 %290 = OpCompositeConstruct %289 %289 
                                       f32_4 %291 = OpLoad %63 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                       f32_2 %293 = OpFDiv %290 %292 
                                       f32_4 %294 = OpLoad %63 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 2 3 
                                                      OpStore %63 %295 
                                       f32_4 %296 = OpLoad %63 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpLoad %63 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                         f32 %300 = OpDot %297 %299 
                                                      OpStore %116 %300 
                                         f32 %301 = OpLoad %116 
                                         f32 %302 = OpExtInst %1 32 %301 
                                                      OpStore %116 %302 
                                  Input f32* %303 = OpAccessChain %117 %101 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 4 %304 
                                Uniform f32* %307 = OpAccessChain %25 %306 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %305 %308 
                                                      OpStore %194 %309 
                                Uniform f32* %311 = OpAccessChain %25 %310 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFAdd %312 %192 
                                Private f32* %314 = OpAccessChain %63 %118 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %194 
                                Private f32* %316 = OpAccessChain %63 %118 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                                      OpStore %194 %318 
                                         f32 %319 = OpLoad %116 
                                         f32 %320 = OpLoad %194 
                                         f32 %321 = OpFMul %319 %320 
                                Private f32* %322 = OpAccessChain %63 %118 
                                                      OpStore %322 %321 
                                Uniform f32* %326 = OpAccessChain %25 %325 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                         f32 %329 = OpFAdd %328 %192 
                                Private f32* %330 = OpAccessChain %324 %118 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %324 %118 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %63 %118 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %63 %118 
                                                      OpStore %336 %335 
                                         f32 %337 = OpLoad %116 
                                         f32 %338 = OpLoad %194 
                                         f32 %339 = OpFMul %337 %338 
                                Private f32* %340 = OpAccessChain %63 %118 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %339 %342 
                                                      OpStore %116 %343 
                              Uniform f32_3* %345 = OpAccessChain %25 %47 
                                       f32_3 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 1 1 1 
                              Uniform f32_4* %349 = OpAccessChain %25 %348 %42 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %324 %352 
                              Uniform f32_4* %353 = OpAccessChain %25 %348 %47 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %25 %47 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %355 %358 
                                       f32_3 %360 = OpLoad %324 
                                       f32_3 %361 = OpFAdd %359 %360 
                                                      OpStore %324 %361 
                              Uniform f32_4* %362 = OpAccessChain %25 %348 %55 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_3* %365 = OpAccessChain %25 %47 
                                       f32_3 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 2 2 
                                       f32_3 %368 = OpFMul %364 %367 
                                       f32_3 %369 = OpLoad %324 
                                       f32_3 %370 = OpFAdd %368 %369 
                                                      OpStore %324 %370 
                                       f32_3 %371 = OpLoad %324 
                              Uniform f32_4* %372 = OpAccessChain %25 %348 %65 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFAdd %371 %374 
                                                      OpStore %324 %375 
                                  Input f32* %376 = OpAccessChain %11 %242 
                                         f32 %377 = OpLoad %376 
                                Private f32* %378 = OpAccessChain %9 %242 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFNegate %380 
                                       f32_3 %382 = OpLoad %324 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %388 = OpLoad %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %391 = OpDot %388 %390 
                                Private f32* %392 = OpAccessChain %9 %118 
                                                      OpStore %392 %391 
                                Private f32* %395 = OpAccessChain %9 %118 
                                         f32 %396 = OpLoad %395 
                                        bool %397 = OpFOrdLessThan %187 %396 
                                         u32 %399 = OpSelect %397 %398 %118 
                                         i32 %400 = OpBitcast %399 
                                                      OpStore %394 %400 
                                Private f32* %402 = OpAccessChain %9 %118 
                                         f32 %403 = OpLoad %402 
                                        bool %404 = OpFOrdLessThan %403 %187 
                                         u32 %405 = OpSelect %404 %398 %118 
                                         i32 %406 = OpBitcast %405 
                                                      OpStore %401 %406 
                                         i32 %407 = OpLoad %394 
                                         i32 %408 = OpSNegate %407 
                                         i32 %409 = OpLoad %401 
                                         i32 %410 = OpIAdd %408 %409 
                                                      OpStore %401 %410 
                                         i32 %411 = OpLoad %401 
                                         f32 %412 = OpConvertSToF %411 
                                Private f32* %413 = OpAccessChain %9 %118 
                                                      OpStore %413 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpLoad %387 
                                       f32_3 %417 = OpFMul %415 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %9 %419 
                                       f32_4 %420 = OpLoad %9 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                              Uniform f32_4* %422 = OpAccessChain %25 %348 %47 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                         f32 %425 = OpDot %421 %424 
                                Private f32* %426 = OpAccessChain %80 %118 
                                                      OpStore %426 %425 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                              Uniform f32_4* %429 = OpAccessChain %25 %348 %42 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %428 %431 
                                Private f32* %433 = OpAccessChain %80 %101 
                                                      OpStore %433 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                              Uniform f32_4* %436 = OpAccessChain %25 %348 %55 
                                       f32_4 %437 = OpLoad %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                         f32 %439 = OpDot %435 %438 
                                Private f32* %440 = OpAccessChain %80 %242 
                                                      OpStore %440 %439 
                                       f32_4 %441 = OpLoad %80 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_4 %443 = OpLoad %80 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                         f32 %445 = OpDot %442 %444 
                                Private f32* %446 = OpAccessChain %9 %118 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %9 %118 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 32 %448 
                                Private f32* %450 = OpAccessChain %9 %118 
                                                      OpStore %450 %449 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 0 
                                       f32_4 %453 = OpLoad %80 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 1 2 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %80 %455 
                                       f32_4 %456 = OpLoad %38 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFNegate %457 
                              Uniform f32_3* %459 = OpAccessChain %25 %47 
                                       f32_3 %460 = OpLoad %459 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %194 %468 
                                         f32 %469 = OpLoad %194 
                                         f32 %470 = OpExtInst %1 32 %469 
                                                      OpStore %194 %470 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                         f32 %473 = OpLoad %194 
                                       f32_3 %474 = OpCompositeConstruct %473 %473 %473 
                                       f32_3 %475 = OpFMul %472 %474 
                                                      OpStore %324 %475 
                                       f32_4 %476 = OpLoad %80 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 3 
                                       f32_3 %478 = OpLoad %324 
                                         f32 %479 = OpDot %477 %478 
                                                      OpStore %194 %479 
                                         f32 %480 = OpLoad %194 
                                         f32 %481 = OpExtInst %1 4 %480 
                                         f32 %482 = OpLoad %116 
                                         f32 %483 = OpFMul %481 %482 
                                Private f32* %484 = OpAccessChain %63 %118 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFAdd %483 %485 
                                 Output f32* %487 = OpAccessChain vs_TEXCOORD5 %101 
                                                      OpStore %487 %486 
                                Private f32* %489 = OpAccessChain %38 %118 
                                         f32 %490 = OpLoad %489 
                                 Output f32* %491 = OpAccessChain vs_TEXCOORD2 %229 
                                                      OpStore %491 %490 
                                       f32_4 %493 = OpLoad %492 
                                       f32_3 %494 = OpVectorShuffle %493 %493 1 1 1 
                              Uniform f32_4* %495 = OpAccessChain %25 %41 %42 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 1 2 0 
                                       f32_3 %498 = OpFMul %494 %497 
                                       f32_4 %499 = OpLoad %63 
                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
                                                      OpStore %63 %500 
                              Uniform f32_4* %501 = OpAccessChain %25 %41 %47 
                                       f32_4 %502 = OpLoad %501 
                                       f32_3 %503 = OpVectorShuffle %502 %502 1 2 0 
                                       f32_4 %504 = OpLoad %492 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 0 0 
                                       f32_3 %506 = OpFMul %503 %505 
                                       f32_4 %507 = OpLoad %63 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFAdd %506 %508 
                                       f32_4 %510 = OpLoad %63 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %63 %511 
                              Uniform f32_4* %512 = OpAccessChain %25 %41 %55 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 1 2 0 
                                       f32_4 %515 = OpLoad %492 
                                       f32_3 %516 = OpVectorShuffle %515 %515 2 2 2 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %63 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpFAdd %517 %519 
                                       f32_4 %521 = OpLoad %63 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %63 %522 
                                       f32_4 %523 = OpLoad %63 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_4 %525 = OpLoad %63 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                         f32 %527 = OpDot %524 %526 
                                                      OpStore %116 %527 
                                         f32 %528 = OpLoad %116 
                                         f32 %529 = OpExtInst %1 32 %528 
                                                      OpStore %116 %529 
                                         f32 %530 = OpLoad %116 
                                       f32_3 %531 = OpCompositeConstruct %530 %530 %530 
                                       f32_4 %532 = OpLoad %63 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFMul %531 %533 
                                       f32_4 %535 = OpLoad %63 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %63 %536 
                                       f32_4 %538 = OpLoad %63 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %80 
                                       f32_3 %541 = OpVectorShuffle %540 %540 3 0 1 
                                       f32_3 %542 = OpFMul %539 %541 
                                                      OpStore %537 %542 
                                       f32_4 %543 = OpLoad %80 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %63 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_3 %548 = OpLoad %537 
                                       f32_3 %549 = OpFNegate %548 
                                       f32_3 %550 = OpFAdd %547 %549 
                                                      OpStore %537 %550 
                                  Input f32* %551 = OpAccessChain %492 %229 
                                         f32 %552 = OpLoad %551 
                                Uniform f32* %554 = OpAccessChain %25 %553 %229 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpFMul %552 %555 
                                                      OpStore %116 %556 
                                         f32 %557 = OpLoad %116 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %537 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %537 %560 
                                Private f32* %561 = OpAccessChain %537 %118 
                                         f32 %562 = OpLoad %561 
                                 Output f32* %563 = OpAccessChain vs_TEXCOORD2 %101 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %80 %118 
                                         f32 %565 = OpLoad %564 
                                 Output f32* %566 = OpAccessChain vs_TEXCOORD2 %242 
                                                      OpStore %566 %565 
                                Private f32* %567 = OpAccessChain %63 %242 
                                         f32 %568 = OpLoad %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD2 %118 
                                                      OpStore %569 %568 
                                Private f32* %571 = OpAccessChain %63 %118 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD3 %118 
                                                      OpStore %573 %572 
                                Private f32* %575 = OpAccessChain %63 %101 
                                         f32 %576 = OpLoad %575 
                                 Output f32* %577 = OpAccessChain vs_TEXCOORD4 %118 
                                                      OpStore %577 %576 
                                Private f32* %578 = OpAccessChain %38 %101 
                                         f32 %579 = OpLoad %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %229 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %38 %242 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD4 %229 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %80 %101 
                                         f32 %585 = OpLoad %584 
                                 Output f32* %586 = OpAccessChain vs_TEXCOORD3 %242 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %537 %101 
                                         f32 %588 = OpLoad %587 
                                 Output f32* %589 = OpAccessChain vs_TEXCOORD3 %101 
                                                      OpStore %589 %588 
                                Private f32* %590 = OpAccessChain %537 %242 
                                         f32 %591 = OpLoad %590 
                                 Output f32* %592 = OpAccessChain vs_TEXCOORD4 %101 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %80 %229 
                                         f32 %594 = OpLoad %593 
                                 Output f32* %595 = OpAccessChain vs_TEXCOORD4 %242 
                                                      OpStore %595 %594 
                                       f32_4 %598 = OpLoad %597 
                                                      OpStore %596 %598 
                                       f32_4 %599 = OpLoad %9 
                                       f32_3 %600 = OpVectorShuffle %599 %599 1 1 1 
                              Uniform f32_4* %602 = OpAccessChain %25 %601 %42 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFMul %600 %604 
                                       f32_4 %606 = OpLoad %38 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %38 %607 
                              Uniform f32_4* %608 = OpAccessChain %25 %601 %47 
                                       f32_4 %609 = OpLoad %608 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_4 %611 = OpLoad %9 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 0 0 
                                       f32_3 %613 = OpFMul %610 %612 
                                       f32_4 %614 = OpLoad %38 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                                       f32_3 %616 = OpFAdd %613 %615 
                                       f32_4 %617 = OpLoad %9 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 2 6 
                                                      OpStore %9 %618 
                              Uniform f32_4* %621 = OpAccessChain %25 %601 %55 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_4 %624 = OpLoad %9 
                                       f32_3 %625 = OpVectorShuffle %624 %624 2 2 2 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 3 
                                       f32_3 %629 = OpFAdd %626 %628 
                                                      OpStore vs_TEXCOORD6 %629 
                                Private f32* %631 = OpAccessChain %80 %101 
                                         f32 %632 = OpLoad %631 
                                Private f32* %633 = OpAccessChain %80 %101 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFMul %632 %634 
                                                      OpStore %630 %635 
                                Private f32* %636 = OpAccessChain %80 %118 
                                         f32 %637 = OpLoad %636 
                                Private f32* %638 = OpAccessChain %80 %118 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                         f32 %641 = OpLoad %630 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %640 %642 
                                                      OpStore %630 %643 
                                       f32_4 %645 = OpLoad %80 
                                       f32_4 %646 = OpVectorShuffle %645 %645 1 3 2 0 
                                       f32_4 %647 = OpLoad %80 
                                       f32_4 %648 = OpFMul %646 %647 
                                                      OpStore %644 %648 
                              Uniform f32_4* %650 = OpAccessChain %25 %55 
                                       f32_4 %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %644 
                                         f32 %653 = OpDot %651 %652 
                                Private f32* %654 = OpAccessChain %649 %118 
                                                      OpStore %654 %653 
                              Uniform f32_4* %655 = OpAccessChain %25 %65 
                                       f32_4 %656 = OpLoad %655 
                                       f32_4 %657 = OpLoad %644 
                                         f32 %658 = OpDot %656 %657 
                                Private f32* %659 = OpAccessChain %649 %101 
                                                      OpStore %659 %658 
                              Uniform f32_4* %661 = OpAccessChain %25 %660 
                                       f32_4 %662 = OpLoad %661 
                                       f32_4 %663 = OpLoad %644 
                                         f32 %664 = OpDot %662 %663 
                                Private f32* %665 = OpAccessChain %649 %242 
                                                      OpStore %665 %664 
                              Uniform f32_4* %668 = OpAccessChain %25 %667 
                                       f32_4 %669 = OpLoad %668 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 1 2 
                                         f32 %671 = OpLoad %630 
                                       f32_3 %672 = OpCompositeConstruct %671 %671 %671 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_3 %674 = OpLoad %649 
                                       f32_3 %675 = OpFAdd %673 %674 
                                                      OpStore vs_TEXCOORD7 %675 
                                 Output f32* %676 = OpAccessChain %105 %47 %101 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpFNegate %677 
                                 Output f32* %679 = OpAccessChain %105 %47 %101 
                                                      OpStore %679 %678 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 681
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %105 %117 %143 %158 %170 %221 %387 %488 %492 %570 %574 %596 %597 %620 %666 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 RelaxedPrecision 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpMemberDecorate %23 25 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %103 0 BuiltIn 103 
                                                      OpMemberDecorate %103 1 BuiltIn 103 
                                                      OpMemberDecorate %103 2 BuiltIn 103 
                                                      OpDecorate %103 Block 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate vs_TEXCOORD0 Location 143 
                                                      OpDecorate vs_TEXCOORD1 Location 158 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate vs_TEXCOORD5 Location 221 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate vs_TEXCOORD2 Location 488 
                                                      OpDecorate %492 Location 492 
                                                      OpDecorate vs_TEXCOORD3 Location 570 
                                                      OpDecorate vs_TEXCOORD4 Location 574 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %596 Location 596 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %597 Location 597 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 620 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 666 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeArray %7 %17 
                                              %22 = OpTypeArray %7 %17 
                                              %23 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %19 %7 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 16 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 17 
                               Private f32_4* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 6 
                                          i32 %42 = OpConstant 1 
                                              %43 = OpTypePointer Uniform %7 
                                          i32 %47 = OpConstant 0 
                                          i32 %55 = OpConstant 2 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                               Private f32_4* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 10 
                                         u32 %101 = OpConstant 1 
                                             %102 = OpTypeArray %6 %101 
                                             %103 = OpTypeStruct %7 %6 %102 
                                             %104 = OpTypePointer Output %103 
        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
                                             %113 = OpTypePointer Output %7 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %116 = OpVariable Private 
                                Input f32_4* %117 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Input %6 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_2 %139 = OpConstantComposite %138 %138 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %146 = OpConstant 24 
                                             %157 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %161 = OpConstant 25 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 23 
                                             %184 = OpTypeBool 
                                             %185 = OpTypePointer Private %184 
                               Private bool* %186 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %192 = OpConstant 3.674022E-40 
                                Private f32* %194 = OpVariable Private 
                                         i32 %195 = OpConstant 13 
                                         i32 %199 = OpConstant 14 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %212 = OpConstant 11 
                                         i32 %217 = OpConstant 15 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %223 = OpConstant 3.674022E-40 
                                             %225 = OpTypePointer Output %6 
                                         u32 %229 = OpConstant 3 
                                         u32 %242 = OpConstant 2 
                                         i32 %258 = OpConstant 9 
                                         i32 %279 = OpConstant 19 
                                         i32 %282 = OpConstant 20 
                                         i32 %306 = OpConstant 18 
                                         i32 %310 = OpConstant 22 
                                             %323 = OpTypePointer Private %15 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %325 = OpConstant 21 
                                             %344 = OpTypePointer Uniform %15 
                                         i32 %348 = OpConstant 7 
                                             %386 = OpTypePointer Input %15 
                                Input f32_3* %387 = OpVariable Input 
                                             %393 = OpTypePointer Private %26 
                                Private i32* %394 = OpVariable Private 
                                         u32 %398 = OpConstant 4294967295 
                                Private i32* %401 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                Input f32_4* %492 = OpVariable Input 
                              Private f32_3* %537 = OpVariable Private 
                                         i32 %553 = OpConstant 8 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %596 = OpVariable Output 
                                Input f32_4* %597 = OpVariable Input 
                                         i32 %601 = OpConstant 12 
                                             %619 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                Private f32* %630 = OpVariable Private 
                              Private f32_4* %644 = OpVariable Private 
                              Private f32_3* %649 = OpVariable Private 
                                         i32 %660 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                         i32 %667 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %14 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 2 3 
                                                      OpStore %9 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %39 1 1 1 1 
                               Uniform f32_4* %44 = OpAccessChain %25 %41 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_4 %46 = OpFMul %40 %45 
                                                      OpStore %38 %46 
                               Uniform f32_4* %48 = OpAccessChain %25 %41 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 0 0 0 0 
                                        f32_4 %52 = OpFMul %49 %51 
                                        f32_4 %53 = OpLoad %38 
                                        f32_4 %54 = OpFAdd %52 %53 
                                                      OpStore %38 %54 
                               Uniform f32_4* %56 = OpAccessChain %25 %41 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %11 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %38 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %38 %62 
                                        f32_4 %64 = OpLoad %38 
                               Uniform f32_4* %66 = OpAccessChain %25 %41 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %41 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %11 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %38 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %38 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %38 %79 
                                        f32_4 %81 = OpLoad %63 
                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %25 %83 %42 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFMul %82 %85 
                                                      OpStore %80 %86 
                               Uniform f32_4* %87 = OpAccessChain %25 %83 %47 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpLoad %63 
                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %80 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %80 %93 
                               Uniform f32_4* %94 = OpAccessChain %25 %83 %55 
                                        f32_4 %95 = OpLoad %94 
                                        f32_4 %96 = OpLoad %63 
                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
                                        f32_4 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %80 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %80 %100 
                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %63 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %80 
                                       f32_4 %112 = OpFAdd %110 %111 
                               Output f32_4* %114 = OpAccessChain %105 %47 
                                                      OpStore %114 %112 
                                  Input f32* %120 = OpAccessChain %117 %118 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %116 %123 
                                         f32 %124 = OpLoad %116 
                                         f32 %125 = OpExtInst %1 8 %124 
                                Private f32* %126 = OpAccessChain %80 %118 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %80 %118 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %131 = OpFMul %129 %130 
                                  Input f32* %132 = OpAccessChain %117 %118 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %80 %101 
                                                      OpStore %135 %134 
                                       f32_4 %136 = OpLoad %80 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %80 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
                                                      OpStore %80 %142 
                                       f32_4 %144 = OpLoad %80 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %147 = OpAccessChain %25 %146 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFMul %145 %149 
                              Uniform f32_4* %151 = OpAccessChain %25 %146 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
                                       f32_2 %154 = OpFAdd %150 %153 
                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %156 
                                       f32_4 %159 = OpLoad %80 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                              Uniform f32_4* %162 = OpAccessChain %25 %161 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFMul %160 %164 
                              Uniform f32_4* %166 = OpAccessChain %25 %161 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFAdd %165 %168 
                                                      OpStore vs_TEXCOORD1 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %183 
                                  Input f32* %188 = OpAccessChain %117 %101 
                                         f32 %189 = OpLoad %188 
                                        bool %190 = OpFOrdGreaterThanEqual %187 %189 
                                                      OpStore %186 %190 
                                        bool %191 = OpLoad %186 
                                         f32 %193 = OpSelect %191 %192 %187 
                                                      OpStore %116 %193 
                                Uniform f32* %196 = OpAccessChain %25 %195 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                Uniform f32* %200 = OpAccessChain %25 %199 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %198 %201 
                                                      OpStore %194 %202 
                                         f32 %203 = OpLoad %116 
                                         f32 %204 = OpLoad %194 
                                         f32 %205 = OpFMul %203 %204 
                                Uniform f32* %206 = OpAccessChain %25 %195 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFAdd %205 %207 
                                                      OpStore %116 %208 
                                         f32 %209 = OpLoad %116 
                                         f32 %211 = OpFMul %209 %210 
                                Uniform f32* %213 = OpAccessChain %25 %212 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFAdd %211 %214 
                                                      OpStore %116 %215 
                                         f32 %216 = OpLoad %116 
                                Uniform f32* %218 = OpAccessChain %25 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %116 %220 
                                         f32 %222 = OpLoad %116 
                                         f32 %224 = OpFMul %222 %223 
                                 Output f32* %226 = OpAccessChain vs_TEXCOORD5 %118 
                                                      OpStore %226 %224 
                                Private f32* %227 = OpAccessChain %63 %101 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %230 = OpAccessChain %25 %83 %42 %229 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %228 %231 
                                                      OpStore %116 %232 
                                Uniform f32* %233 = OpAccessChain %25 %83 %47 %229 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %63 %118 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                         f32 %238 = OpLoad %116 
                                         f32 %239 = OpFAdd %237 %238 
                                                      OpStore %116 %239 
                                Uniform f32* %240 = OpAccessChain %25 %83 %55 %229 
                                         f32 %241 = OpLoad %240 
                                Private f32* %243 = OpAccessChain %63 %242 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %241 %244 
                                         f32 %246 = OpLoad %116 
                                         f32 %247 = OpFAdd %245 %246 
                                                      OpStore %116 %247 
                                Uniform f32* %248 = OpAccessChain %25 %83 %65 %229 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %63 %229 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpLoad %116 
                                         f32 %254 = OpFAdd %252 %253 
                                                      OpStore %116 %254 
                              Uniform f32_4* %255 = OpAccessChain %25 %42 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 1 
                              Uniform f32_4* %259 = OpAccessChain %25 %258 %42 
                                       f32_4 %260 = OpLoad %259 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_2 %262 = OpFMul %257 %261 
                                       f32_4 %263 = OpLoad %63 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
                                                      OpStore %63 %264 
                              Uniform f32_4* %265 = OpAccessChain %25 %258 %47 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                              Uniform f32_4* %268 = OpAccessChain %25 %42 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 0 
                                       f32_2 %271 = OpFMul %267 %270 
                                       f32_4 %272 = OpLoad %63 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %63 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %63 %276 
                                       f32_4 %277 = OpLoad %63 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                Uniform f32* %280 = OpAccessChain %25 %279 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %283 = OpAccessChain %25 %282 
                                         f32 %284 = OpLoad %283 
                                       f32_2 %285 = OpCompositeConstruct %281 %284 
                                       f32_2 %286 = OpFMul %278 %285 
                                       f32_4 %287 = OpLoad %63 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
                                                      OpStore %63 %288 
                                         f32 %289 = OpLoad %116 
                                       f32_2 %290 = OpCompositeConstruct %289 %289 
                                       f32_4 %291 = OpLoad %63 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                       f32_2 %293 = OpFDiv %290 %292 
                                       f32_4 %294 = OpLoad %63 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 2 3 
                                                      OpStore %63 %295 
                                       f32_4 %296 = OpLoad %63 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpLoad %63 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                         f32 %300 = OpDot %297 %299 
                                                      OpStore %116 %300 
                                         f32 %301 = OpLoad %116 
                                         f32 %302 = OpExtInst %1 32 %301 
                                                      OpStore %116 %302 
                                  Input f32* %303 = OpAccessChain %117 %101 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 4 %304 
                                Uniform f32* %307 = OpAccessChain %25 %306 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %305 %308 
                                                      OpStore %194 %309 
                                Uniform f32* %311 = OpAccessChain %25 %310 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFAdd %312 %192 
                                Private f32* %314 = OpAccessChain %63 %118 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %194 
                                Private f32* %316 = OpAccessChain %63 %118 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                                      OpStore %194 %318 
                                         f32 %319 = OpLoad %116 
                                         f32 %320 = OpLoad %194 
                                         f32 %321 = OpFMul %319 %320 
                                Private f32* %322 = OpAccessChain %63 %118 
                                                      OpStore %322 %321 
                                Uniform f32* %326 = OpAccessChain %25 %325 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                         f32 %329 = OpFAdd %328 %192 
                                Private f32* %330 = OpAccessChain %324 %118 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %324 %118 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %63 %118 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %63 %118 
                                                      OpStore %336 %335 
                                         f32 %337 = OpLoad %116 
                                         f32 %338 = OpLoad %194 
                                         f32 %339 = OpFMul %337 %338 
                                Private f32* %340 = OpAccessChain %63 %118 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %339 %342 
                                                      OpStore %116 %343 
                              Uniform f32_3* %345 = OpAccessChain %25 %47 
                                       f32_3 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 1 1 1 
                              Uniform f32_4* %349 = OpAccessChain %25 %348 %42 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %324 %352 
                              Uniform f32_4* %353 = OpAccessChain %25 %348 %47 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %25 %47 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %355 %358 
                                       f32_3 %360 = OpLoad %324 
                                       f32_3 %361 = OpFAdd %359 %360 
                                                      OpStore %324 %361 
                              Uniform f32_4* %362 = OpAccessChain %25 %348 %55 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_3* %365 = OpAccessChain %25 %47 
                                       f32_3 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 2 2 
                                       f32_3 %368 = OpFMul %364 %367 
                                       f32_3 %369 = OpLoad %324 
                                       f32_3 %370 = OpFAdd %368 %369 
                                                      OpStore %324 %370 
                                       f32_3 %371 = OpLoad %324 
                              Uniform f32_4* %372 = OpAccessChain %25 %348 %65 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFAdd %371 %374 
                                                      OpStore %324 %375 
                                  Input f32* %376 = OpAccessChain %11 %242 
                                         f32 %377 = OpLoad %376 
                                Private f32* %378 = OpAccessChain %9 %242 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFNegate %380 
                                       f32_3 %382 = OpLoad %324 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %388 = OpLoad %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %391 = OpDot %388 %390 
                                Private f32* %392 = OpAccessChain %9 %118 
                                                      OpStore %392 %391 
                                Private f32* %395 = OpAccessChain %9 %118 
                                         f32 %396 = OpLoad %395 
                                        bool %397 = OpFOrdLessThan %187 %396 
                                         u32 %399 = OpSelect %397 %398 %118 
                                         i32 %400 = OpBitcast %399 
                                                      OpStore %394 %400 
                                Private f32* %402 = OpAccessChain %9 %118 
                                         f32 %403 = OpLoad %402 
                                        bool %404 = OpFOrdLessThan %403 %187 
                                         u32 %405 = OpSelect %404 %398 %118 
                                         i32 %406 = OpBitcast %405 
                                                      OpStore %401 %406 
                                         i32 %407 = OpLoad %394 
                                         i32 %408 = OpSNegate %407 
                                         i32 %409 = OpLoad %401 
                                         i32 %410 = OpIAdd %408 %409 
                                                      OpStore %401 %410 
                                         i32 %411 = OpLoad %401 
                                         f32 %412 = OpConvertSToF %411 
                                Private f32* %413 = OpAccessChain %9 %118 
                                                      OpStore %413 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpLoad %387 
                                       f32_3 %417 = OpFMul %415 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %9 %419 
                                       f32_4 %420 = OpLoad %9 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                              Uniform f32_4* %422 = OpAccessChain %25 %348 %47 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                         f32 %425 = OpDot %421 %424 
                                Private f32* %426 = OpAccessChain %80 %118 
                                                      OpStore %426 %425 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                              Uniform f32_4* %429 = OpAccessChain %25 %348 %42 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %428 %431 
                                Private f32* %433 = OpAccessChain %80 %101 
                                                      OpStore %433 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                              Uniform f32_4* %436 = OpAccessChain %25 %348 %55 
                                       f32_4 %437 = OpLoad %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                         f32 %439 = OpDot %435 %438 
                                Private f32* %440 = OpAccessChain %80 %242 
                                                      OpStore %440 %439 
                                       f32_4 %441 = OpLoad %80 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_4 %443 = OpLoad %80 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                         f32 %445 = OpDot %442 %444 
                                Private f32* %446 = OpAccessChain %9 %118 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %9 %118 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 32 %448 
                                Private f32* %450 = OpAccessChain %9 %118 
                                                      OpStore %450 %449 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 0 
                                       f32_4 %453 = OpLoad %80 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 1 2 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %80 %455 
                                       f32_4 %456 = OpLoad %38 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFNegate %457 
                              Uniform f32_3* %459 = OpAccessChain %25 %47 
                                       f32_3 %460 = OpLoad %459 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %194 %468 
                                         f32 %469 = OpLoad %194 
                                         f32 %470 = OpExtInst %1 32 %469 
                                                      OpStore %194 %470 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                         f32 %473 = OpLoad %194 
                                       f32_3 %474 = OpCompositeConstruct %473 %473 %473 
                                       f32_3 %475 = OpFMul %472 %474 
                                                      OpStore %324 %475 
                                       f32_4 %476 = OpLoad %80 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 3 
                                       f32_3 %478 = OpLoad %324 
                                         f32 %479 = OpDot %477 %478 
                                                      OpStore %194 %479 
                                         f32 %480 = OpLoad %194 
                                         f32 %481 = OpExtInst %1 4 %480 
                                         f32 %482 = OpLoad %116 
                                         f32 %483 = OpFMul %481 %482 
                                Private f32* %484 = OpAccessChain %63 %118 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFAdd %483 %485 
                                 Output f32* %487 = OpAccessChain vs_TEXCOORD5 %101 
                                                      OpStore %487 %486 
                                Private f32* %489 = OpAccessChain %38 %118 
                                         f32 %490 = OpLoad %489 
                                 Output f32* %491 = OpAccessChain vs_TEXCOORD2 %229 
                                                      OpStore %491 %490 
                                       f32_4 %493 = OpLoad %492 
                                       f32_3 %494 = OpVectorShuffle %493 %493 1 1 1 
                              Uniform f32_4* %495 = OpAccessChain %25 %41 %42 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 1 2 0 
                                       f32_3 %498 = OpFMul %494 %497 
                                       f32_4 %499 = OpLoad %63 
                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
                                                      OpStore %63 %500 
                              Uniform f32_4* %501 = OpAccessChain %25 %41 %47 
                                       f32_4 %502 = OpLoad %501 
                                       f32_3 %503 = OpVectorShuffle %502 %502 1 2 0 
                                       f32_4 %504 = OpLoad %492 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 0 0 
                                       f32_3 %506 = OpFMul %503 %505 
                                       f32_4 %507 = OpLoad %63 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFAdd %506 %508 
                                       f32_4 %510 = OpLoad %63 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %63 %511 
                              Uniform f32_4* %512 = OpAccessChain %25 %41 %55 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 1 2 0 
                                       f32_4 %515 = OpLoad %492 
                                       f32_3 %516 = OpVectorShuffle %515 %515 2 2 2 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %63 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpFAdd %517 %519 
                                       f32_4 %521 = OpLoad %63 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %63 %522 
                                       f32_4 %523 = OpLoad %63 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_4 %525 = OpLoad %63 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                         f32 %527 = OpDot %524 %526 
                                                      OpStore %116 %527 
                                         f32 %528 = OpLoad %116 
                                         f32 %529 = OpExtInst %1 32 %528 
                                                      OpStore %116 %529 
                                         f32 %530 = OpLoad %116 
                                       f32_3 %531 = OpCompositeConstruct %530 %530 %530 
                                       f32_4 %532 = OpLoad %63 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFMul %531 %533 
                                       f32_4 %535 = OpLoad %63 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %63 %536 
                                       f32_4 %538 = OpLoad %63 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %80 
                                       f32_3 %541 = OpVectorShuffle %540 %540 3 0 1 
                                       f32_3 %542 = OpFMul %539 %541 
                                                      OpStore %537 %542 
                                       f32_4 %543 = OpLoad %80 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %63 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_3 %548 = OpLoad %537 
                                       f32_3 %549 = OpFNegate %548 
                                       f32_3 %550 = OpFAdd %547 %549 
                                                      OpStore %537 %550 
                                  Input f32* %551 = OpAccessChain %492 %229 
                                         f32 %552 = OpLoad %551 
                                Uniform f32* %554 = OpAccessChain %25 %553 %229 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpFMul %552 %555 
                                                      OpStore %116 %556 
                                         f32 %557 = OpLoad %116 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %537 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %537 %560 
                                Private f32* %561 = OpAccessChain %537 %118 
                                         f32 %562 = OpLoad %561 
                                 Output f32* %563 = OpAccessChain vs_TEXCOORD2 %101 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %80 %118 
                                         f32 %565 = OpLoad %564 
                                 Output f32* %566 = OpAccessChain vs_TEXCOORD2 %242 
                                                      OpStore %566 %565 
                                Private f32* %567 = OpAccessChain %63 %242 
                                         f32 %568 = OpLoad %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD2 %118 
                                                      OpStore %569 %568 
                                Private f32* %571 = OpAccessChain %63 %118 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD3 %118 
                                                      OpStore %573 %572 
                                Private f32* %575 = OpAccessChain %63 %101 
                                         f32 %576 = OpLoad %575 
                                 Output f32* %577 = OpAccessChain vs_TEXCOORD4 %118 
                                                      OpStore %577 %576 
                                Private f32* %578 = OpAccessChain %38 %101 
                                         f32 %579 = OpLoad %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %229 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %38 %242 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD4 %229 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %80 %101 
                                         f32 %585 = OpLoad %584 
                                 Output f32* %586 = OpAccessChain vs_TEXCOORD3 %242 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %537 %101 
                                         f32 %588 = OpLoad %587 
                                 Output f32* %589 = OpAccessChain vs_TEXCOORD3 %101 
                                                      OpStore %589 %588 
                                Private f32* %590 = OpAccessChain %537 %242 
                                         f32 %591 = OpLoad %590 
                                 Output f32* %592 = OpAccessChain vs_TEXCOORD4 %101 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %80 %229 
                                         f32 %594 = OpLoad %593 
                                 Output f32* %595 = OpAccessChain vs_TEXCOORD4 %242 
                                                      OpStore %595 %594 
                                       f32_4 %598 = OpLoad %597 
                                                      OpStore %596 %598 
                                       f32_4 %599 = OpLoad %9 
                                       f32_3 %600 = OpVectorShuffle %599 %599 1 1 1 
                              Uniform f32_4* %602 = OpAccessChain %25 %601 %42 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFMul %600 %604 
                                       f32_4 %606 = OpLoad %38 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %38 %607 
                              Uniform f32_4* %608 = OpAccessChain %25 %601 %47 
                                       f32_4 %609 = OpLoad %608 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_4 %611 = OpLoad %9 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 0 0 
                                       f32_3 %613 = OpFMul %610 %612 
                                       f32_4 %614 = OpLoad %38 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                                       f32_3 %616 = OpFAdd %613 %615 
                                       f32_4 %617 = OpLoad %9 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 2 6 
                                                      OpStore %9 %618 
                              Uniform f32_4* %621 = OpAccessChain %25 %601 %55 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_4 %624 = OpLoad %9 
                                       f32_3 %625 = OpVectorShuffle %624 %624 2 2 2 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 3 
                                       f32_3 %629 = OpFAdd %626 %628 
                                                      OpStore vs_TEXCOORD6 %629 
                                Private f32* %631 = OpAccessChain %80 %101 
                                         f32 %632 = OpLoad %631 
                                Private f32* %633 = OpAccessChain %80 %101 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFMul %632 %634 
                                                      OpStore %630 %635 
                                Private f32* %636 = OpAccessChain %80 %118 
                                         f32 %637 = OpLoad %636 
                                Private f32* %638 = OpAccessChain %80 %118 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                         f32 %641 = OpLoad %630 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %640 %642 
                                                      OpStore %630 %643 
                                       f32_4 %645 = OpLoad %80 
                                       f32_4 %646 = OpVectorShuffle %645 %645 1 3 2 0 
                                       f32_4 %647 = OpLoad %80 
                                       f32_4 %648 = OpFMul %646 %647 
                                                      OpStore %644 %648 
                              Uniform f32_4* %650 = OpAccessChain %25 %55 
                                       f32_4 %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %644 
                                         f32 %653 = OpDot %651 %652 
                                Private f32* %654 = OpAccessChain %649 %118 
                                                      OpStore %654 %653 
                              Uniform f32_4* %655 = OpAccessChain %25 %65 
                                       f32_4 %656 = OpLoad %655 
                                       f32_4 %657 = OpLoad %644 
                                         f32 %658 = OpDot %656 %657 
                                Private f32* %659 = OpAccessChain %649 %101 
                                                      OpStore %659 %658 
                              Uniform f32_4* %661 = OpAccessChain %25 %660 
                                       f32_4 %662 = OpLoad %661 
                                       f32_4 %663 = OpLoad %644 
                                         f32 %664 = OpDot %662 %663 
                                Private f32* %665 = OpAccessChain %649 %242 
                                                      OpStore %665 %664 
                              Uniform f32_4* %668 = OpAccessChain %25 %667 
                                       f32_4 %669 = OpLoad %668 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 1 2 
                                         f32 %671 = OpLoad %630 
                                       f32_3 %672 = OpCompositeConstruct %671 %671 %671 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_3 %674 = OpLoad %649 
                                       f32_3 %675 = OpFAdd %673 %674 
                                                      OpStore vs_TEXCOORD7 %675 
                                 Output f32* %676 = OpAccessChain %105 %47 %101 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpFNegate %677 
                                 Output f32* %679 = OpAccessChain %105 %47 %101 
                                                      OpStore %679 %678 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 681
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %105 %117 %143 %158 %170 %221 %387 %488 %492 %570 %574 %596 %597 %620 %666 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 RelaxedPrecision 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpMemberDecorate %23 25 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %103 0 BuiltIn 103 
                                                      OpMemberDecorate %103 1 BuiltIn 103 
                                                      OpMemberDecorate %103 2 BuiltIn 103 
                                                      OpDecorate %103 Block 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate vs_TEXCOORD0 Location 143 
                                                      OpDecorate vs_TEXCOORD1 Location 158 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate vs_TEXCOORD5 Location 221 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate vs_TEXCOORD2 Location 488 
                                                      OpDecorate %492 Location 492 
                                                      OpDecorate vs_TEXCOORD3 Location 570 
                                                      OpDecorate vs_TEXCOORD4 Location 574 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %596 Location 596 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %597 Location 597 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 620 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 666 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeArray %7 %17 
                                              %22 = OpTypeArray %7 %17 
                                              %23 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %19 %7 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 16 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 17 
                               Private f32_4* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 6 
                                          i32 %42 = OpConstant 1 
                                              %43 = OpTypePointer Uniform %7 
                                          i32 %47 = OpConstant 0 
                                          i32 %55 = OpConstant 2 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                               Private f32_4* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 10 
                                         u32 %101 = OpConstant 1 
                                             %102 = OpTypeArray %6 %101 
                                             %103 = OpTypeStruct %7 %6 %102 
                                             %104 = OpTypePointer Output %103 
        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
                                             %113 = OpTypePointer Output %7 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %116 = OpVariable Private 
                                Input f32_4* %117 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Input %6 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_2 %139 = OpConstantComposite %138 %138 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %146 = OpConstant 24 
                                             %157 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %161 = OpConstant 25 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 23 
                                             %184 = OpTypeBool 
                                             %185 = OpTypePointer Private %184 
                               Private bool* %186 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %192 = OpConstant 3.674022E-40 
                                Private f32* %194 = OpVariable Private 
                                         i32 %195 = OpConstant 13 
                                         i32 %199 = OpConstant 14 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %212 = OpConstant 11 
                                         i32 %217 = OpConstant 15 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %223 = OpConstant 3.674022E-40 
                                             %225 = OpTypePointer Output %6 
                                         u32 %229 = OpConstant 3 
                                         u32 %242 = OpConstant 2 
                                         i32 %258 = OpConstant 9 
                                         i32 %279 = OpConstant 19 
                                         i32 %282 = OpConstant 20 
                                         i32 %306 = OpConstant 18 
                                         i32 %310 = OpConstant 22 
                                             %323 = OpTypePointer Private %15 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %325 = OpConstant 21 
                                             %344 = OpTypePointer Uniform %15 
                                         i32 %348 = OpConstant 7 
                                             %386 = OpTypePointer Input %15 
                                Input f32_3* %387 = OpVariable Input 
                                             %393 = OpTypePointer Private %26 
                                Private i32* %394 = OpVariable Private 
                                         u32 %398 = OpConstant 4294967295 
                                Private i32* %401 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                Input f32_4* %492 = OpVariable Input 
                              Private f32_3* %537 = OpVariable Private 
                                         i32 %553 = OpConstant 8 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %596 = OpVariable Output 
                                Input f32_4* %597 = OpVariable Input 
                                         i32 %601 = OpConstant 12 
                                             %619 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                Private f32* %630 = OpVariable Private 
                              Private f32_4* %644 = OpVariable Private 
                              Private f32_3* %649 = OpVariable Private 
                                         i32 %660 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                         i32 %667 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %14 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 2 3 
                                                      OpStore %9 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %39 1 1 1 1 
                               Uniform f32_4* %44 = OpAccessChain %25 %41 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_4 %46 = OpFMul %40 %45 
                                                      OpStore %38 %46 
                               Uniform f32_4* %48 = OpAccessChain %25 %41 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 0 0 0 0 
                                        f32_4 %52 = OpFMul %49 %51 
                                        f32_4 %53 = OpLoad %38 
                                        f32_4 %54 = OpFAdd %52 %53 
                                                      OpStore %38 %54 
                               Uniform f32_4* %56 = OpAccessChain %25 %41 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %11 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %38 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %38 %62 
                                        f32_4 %64 = OpLoad %38 
                               Uniform f32_4* %66 = OpAccessChain %25 %41 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %41 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %11 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %38 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %38 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %38 %79 
                                        f32_4 %81 = OpLoad %63 
                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %25 %83 %42 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFMul %82 %85 
                                                      OpStore %80 %86 
                               Uniform f32_4* %87 = OpAccessChain %25 %83 %47 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpLoad %63 
                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %80 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %80 %93 
                               Uniform f32_4* %94 = OpAccessChain %25 %83 %55 
                                        f32_4 %95 = OpLoad %94 
                                        f32_4 %96 = OpLoad %63 
                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
                                        f32_4 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %80 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %80 %100 
                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %63 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %80 
                                       f32_4 %112 = OpFAdd %110 %111 
                               Output f32_4* %114 = OpAccessChain %105 %47 
                                                      OpStore %114 %112 
                                  Input f32* %120 = OpAccessChain %117 %118 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %116 %123 
                                         f32 %124 = OpLoad %116 
                                         f32 %125 = OpExtInst %1 8 %124 
                                Private f32* %126 = OpAccessChain %80 %118 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %80 %118 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %131 = OpFMul %129 %130 
                                  Input f32* %132 = OpAccessChain %117 %118 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %80 %101 
                                                      OpStore %135 %134 
                                       f32_4 %136 = OpLoad %80 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %80 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
                                                      OpStore %80 %142 
                                       f32_4 %144 = OpLoad %80 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %147 = OpAccessChain %25 %146 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFMul %145 %149 
                              Uniform f32_4* %151 = OpAccessChain %25 %146 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
                                       f32_2 %154 = OpFAdd %150 %153 
                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %156 
                                       f32_4 %159 = OpLoad %80 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                              Uniform f32_4* %162 = OpAccessChain %25 %161 
                                       f32_4 %163 = OpLoad %162 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFMul %160 %164 
                              Uniform f32_4* %166 = OpAccessChain %25 %161 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFAdd %165 %168 
                                                      OpStore vs_TEXCOORD1 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %183 
                                  Input f32* %188 = OpAccessChain %117 %101 
                                         f32 %189 = OpLoad %188 
                                        bool %190 = OpFOrdGreaterThanEqual %187 %189 
                                                      OpStore %186 %190 
                                        bool %191 = OpLoad %186 
                                         f32 %193 = OpSelect %191 %192 %187 
                                                      OpStore %116 %193 
                                Uniform f32* %196 = OpAccessChain %25 %195 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                Uniform f32* %200 = OpAccessChain %25 %199 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %198 %201 
                                                      OpStore %194 %202 
                                         f32 %203 = OpLoad %116 
                                         f32 %204 = OpLoad %194 
                                         f32 %205 = OpFMul %203 %204 
                                Uniform f32* %206 = OpAccessChain %25 %195 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFAdd %205 %207 
                                                      OpStore %116 %208 
                                         f32 %209 = OpLoad %116 
                                         f32 %211 = OpFMul %209 %210 
                                Uniform f32* %213 = OpAccessChain %25 %212 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFAdd %211 %214 
                                                      OpStore %116 %215 
                                         f32 %216 = OpLoad %116 
                                Uniform f32* %218 = OpAccessChain %25 %217 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %116 %220 
                                         f32 %222 = OpLoad %116 
                                         f32 %224 = OpFMul %222 %223 
                                 Output f32* %226 = OpAccessChain vs_TEXCOORD5 %118 
                                                      OpStore %226 %224 
                                Private f32* %227 = OpAccessChain %63 %101 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %230 = OpAccessChain %25 %83 %42 %229 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %228 %231 
                                                      OpStore %116 %232 
                                Uniform f32* %233 = OpAccessChain %25 %83 %47 %229 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %63 %118 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                         f32 %238 = OpLoad %116 
                                         f32 %239 = OpFAdd %237 %238 
                                                      OpStore %116 %239 
                                Uniform f32* %240 = OpAccessChain %25 %83 %55 %229 
                                         f32 %241 = OpLoad %240 
                                Private f32* %243 = OpAccessChain %63 %242 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %241 %244 
                                         f32 %246 = OpLoad %116 
                                         f32 %247 = OpFAdd %245 %246 
                                                      OpStore %116 %247 
                                Uniform f32* %248 = OpAccessChain %25 %83 %65 %229 
                                         f32 %249 = OpLoad %248 
                                Private f32* %250 = OpAccessChain %63 %229 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpLoad %116 
                                         f32 %254 = OpFAdd %252 %253 
                                                      OpStore %116 %254 
                              Uniform f32_4* %255 = OpAccessChain %25 %42 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 1 
                              Uniform f32_4* %259 = OpAccessChain %25 %258 %42 
                                       f32_4 %260 = OpLoad %259 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_2 %262 = OpFMul %257 %261 
                                       f32_4 %263 = OpLoad %63 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
                                                      OpStore %63 %264 
                              Uniform f32_4* %265 = OpAccessChain %25 %258 %47 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                              Uniform f32_4* %268 = OpAccessChain %25 %42 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 0 
                                       f32_2 %271 = OpFMul %267 %270 
                                       f32_4 %272 = OpLoad %63 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %63 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %63 %276 
                                       f32_4 %277 = OpLoad %63 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                Uniform f32* %280 = OpAccessChain %25 %279 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %283 = OpAccessChain %25 %282 
                                         f32 %284 = OpLoad %283 
                                       f32_2 %285 = OpCompositeConstruct %281 %284 
                                       f32_2 %286 = OpFMul %278 %285 
                                       f32_4 %287 = OpLoad %63 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
                                                      OpStore %63 %288 
                                         f32 %289 = OpLoad %116 
                                       f32_2 %290 = OpCompositeConstruct %289 %289 
                                       f32_4 %291 = OpLoad %63 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                       f32_2 %293 = OpFDiv %290 %292 
                                       f32_4 %294 = OpLoad %63 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 2 3 
                                                      OpStore %63 %295 
                                       f32_4 %296 = OpLoad %63 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpLoad %63 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                         f32 %300 = OpDot %297 %299 
                                                      OpStore %116 %300 
                                         f32 %301 = OpLoad %116 
                                         f32 %302 = OpExtInst %1 32 %301 
                                                      OpStore %116 %302 
                                  Input f32* %303 = OpAccessChain %117 %101 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 4 %304 
                                Uniform f32* %307 = OpAccessChain %25 %306 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %305 %308 
                                                      OpStore %194 %309 
                                Uniform f32* %311 = OpAccessChain %25 %310 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFAdd %312 %192 
                                Private f32* %314 = OpAccessChain %63 %118 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %194 
                                Private f32* %316 = OpAccessChain %63 %118 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                                      OpStore %194 %318 
                                         f32 %319 = OpLoad %116 
                                         f32 %320 = OpLoad %194 
                                         f32 %321 = OpFMul %319 %320 
                                Private f32* %322 = OpAccessChain %63 %118 
                                                      OpStore %322 %321 
                                Uniform f32* %326 = OpAccessChain %25 %325 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                         f32 %329 = OpFAdd %328 %192 
                                Private f32* %330 = OpAccessChain %324 %118 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %324 %118 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %63 %118 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %63 %118 
                                                      OpStore %336 %335 
                                         f32 %337 = OpLoad %116 
                                         f32 %338 = OpLoad %194 
                                         f32 %339 = OpFMul %337 %338 
                                Private f32* %340 = OpAccessChain %63 %118 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %339 %342 
                                                      OpStore %116 %343 
                              Uniform f32_3* %345 = OpAccessChain %25 %47 
                                       f32_3 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 1 1 1 
                              Uniform f32_4* %349 = OpAccessChain %25 %348 %42 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                                      OpStore %324 %352 
                              Uniform f32_4* %353 = OpAccessChain %25 %348 %47 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %25 %47 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %355 %358 
                                       f32_3 %360 = OpLoad %324 
                                       f32_3 %361 = OpFAdd %359 %360 
                                                      OpStore %324 %361 
                              Uniform f32_4* %362 = OpAccessChain %25 %348 %55 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_3* %365 = OpAccessChain %25 %47 
                                       f32_3 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 2 2 
                                       f32_3 %368 = OpFMul %364 %367 
                                       f32_3 %369 = OpLoad %324 
                                       f32_3 %370 = OpFAdd %368 %369 
                                                      OpStore %324 %370 
                                       f32_3 %371 = OpLoad %324 
                              Uniform f32_4* %372 = OpAccessChain %25 %348 %65 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFAdd %371 %374 
                                                      OpStore %324 %375 
                                  Input f32* %376 = OpAccessChain %11 %242 
                                         f32 %377 = OpLoad %376 
                                Private f32* %378 = OpAccessChain %9 %242 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFNegate %380 
                                       f32_3 %382 = OpLoad %324 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %388 = OpLoad %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %391 = OpDot %388 %390 
                                Private f32* %392 = OpAccessChain %9 %118 
                                                      OpStore %392 %391 
                                Private f32* %395 = OpAccessChain %9 %118 
                                         f32 %396 = OpLoad %395 
                                        bool %397 = OpFOrdLessThan %187 %396 
                                         u32 %399 = OpSelect %397 %398 %118 
                                         i32 %400 = OpBitcast %399 
                                                      OpStore %394 %400 
                                Private f32* %402 = OpAccessChain %9 %118 
                                         f32 %403 = OpLoad %402 
                                        bool %404 = OpFOrdLessThan %403 %187 
                                         u32 %405 = OpSelect %404 %398 %118 
                                         i32 %406 = OpBitcast %405 
                                                      OpStore %401 %406 
                                         i32 %407 = OpLoad %394 
                                         i32 %408 = OpSNegate %407 
                                         i32 %409 = OpLoad %401 
                                         i32 %410 = OpIAdd %408 %409 
                                                      OpStore %401 %410 
                                         i32 %411 = OpLoad %401 
                                         f32 %412 = OpConvertSToF %411 
                                Private f32* %413 = OpAccessChain %9 %118 
                                                      OpStore %413 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpLoad %387 
                                       f32_3 %417 = OpFMul %415 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %9 %419 
                                       f32_4 %420 = OpLoad %9 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                              Uniform f32_4* %422 = OpAccessChain %25 %348 %47 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                         f32 %425 = OpDot %421 %424 
                                Private f32* %426 = OpAccessChain %80 %118 
                                                      OpStore %426 %425 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                              Uniform f32_4* %429 = OpAccessChain %25 %348 %42 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %428 %431 
                                Private f32* %433 = OpAccessChain %80 %101 
                                                      OpStore %433 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                              Uniform f32_4* %436 = OpAccessChain %25 %348 %55 
                                       f32_4 %437 = OpLoad %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                         f32 %439 = OpDot %435 %438 
                                Private f32* %440 = OpAccessChain %80 %242 
                                                      OpStore %440 %439 
                                       f32_4 %441 = OpLoad %80 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_4 %443 = OpLoad %80 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                         f32 %445 = OpDot %442 %444 
                                Private f32* %446 = OpAccessChain %9 %118 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %9 %118 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 32 %448 
                                Private f32* %450 = OpAccessChain %9 %118 
                                                      OpStore %450 %449 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 0 
                                       f32_4 %453 = OpLoad %80 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 1 2 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %80 %455 
                                       f32_4 %456 = OpLoad %38 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFNegate %457 
                              Uniform f32_3* %459 = OpAccessChain %25 %47 
                                       f32_3 %460 = OpLoad %459 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %194 %468 
                                         f32 %469 = OpLoad %194 
                                         f32 %470 = OpExtInst %1 32 %469 
                                                      OpStore %194 %470 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                         f32 %473 = OpLoad %194 
                                       f32_3 %474 = OpCompositeConstruct %473 %473 %473 
                                       f32_3 %475 = OpFMul %472 %474 
                                                      OpStore %324 %475 
                                       f32_4 %476 = OpLoad %80 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 3 
                                       f32_3 %478 = OpLoad %324 
                                         f32 %479 = OpDot %477 %478 
                                                      OpStore %194 %479 
                                         f32 %480 = OpLoad %194 
                                         f32 %481 = OpExtInst %1 4 %480 
                                         f32 %482 = OpLoad %116 
                                         f32 %483 = OpFMul %481 %482 
                                Private f32* %484 = OpAccessChain %63 %118 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFAdd %483 %485 
                                 Output f32* %487 = OpAccessChain vs_TEXCOORD5 %101 
                                                      OpStore %487 %486 
                                Private f32* %489 = OpAccessChain %38 %118 
                                         f32 %490 = OpLoad %489 
                                 Output f32* %491 = OpAccessChain vs_TEXCOORD2 %229 
                                                      OpStore %491 %490 
                                       f32_4 %493 = OpLoad %492 
                                       f32_3 %494 = OpVectorShuffle %493 %493 1 1 1 
                              Uniform f32_4* %495 = OpAccessChain %25 %41 %42 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 1 2 0 
                                       f32_3 %498 = OpFMul %494 %497 
                                       f32_4 %499 = OpLoad %63 
                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
                                                      OpStore %63 %500 
                              Uniform f32_4* %501 = OpAccessChain %25 %41 %47 
                                       f32_4 %502 = OpLoad %501 
                                       f32_3 %503 = OpVectorShuffle %502 %502 1 2 0 
                                       f32_4 %504 = OpLoad %492 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 0 0 
                                       f32_3 %506 = OpFMul %503 %505 
                                       f32_4 %507 = OpLoad %63 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFAdd %506 %508 
                                       f32_4 %510 = OpLoad %63 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %63 %511 
                              Uniform f32_4* %512 = OpAccessChain %25 %41 %55 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 1 2 0 
                                       f32_4 %515 = OpLoad %492 
                                       f32_3 %516 = OpVectorShuffle %515 %515 2 2 2 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %63 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpFAdd %517 %519 
                                       f32_4 %521 = OpLoad %63 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %63 %522 
                                       f32_4 %523 = OpLoad %63 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                       f32_4 %525 = OpLoad %63 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                         f32 %527 = OpDot %524 %526 
                                                      OpStore %116 %527 
                                         f32 %528 = OpLoad %116 
                                         f32 %529 = OpExtInst %1 32 %528 
                                                      OpStore %116 %529 
                                         f32 %530 = OpLoad %116 
                                       f32_3 %531 = OpCompositeConstruct %530 %530 %530 
                                       f32_4 %532 = OpLoad %63 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFMul %531 %533 
                                       f32_4 %535 = OpLoad %63 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %63 %536 
                                       f32_4 %538 = OpLoad %63 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %80 
                                       f32_3 %541 = OpVectorShuffle %540 %540 3 0 1 
                                       f32_3 %542 = OpFMul %539 %541 
                                                      OpStore %537 %542 
                                       f32_4 %543 = OpLoad %80 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %63 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_3 %548 = OpLoad %537 
                                       f32_3 %549 = OpFNegate %548 
                                       f32_3 %550 = OpFAdd %547 %549 
                                                      OpStore %537 %550 
                                  Input f32* %551 = OpAccessChain %492 %229 
                                         f32 %552 = OpLoad %551 
                                Uniform f32* %554 = OpAccessChain %25 %553 %229 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpFMul %552 %555 
                                                      OpStore %116 %556 
                                         f32 %557 = OpLoad %116 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %537 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %537 %560 
                                Private f32* %561 = OpAccessChain %537 %118 
                                         f32 %562 = OpLoad %561 
                                 Output f32* %563 = OpAccessChain vs_TEXCOORD2 %101 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %80 %118 
                                         f32 %565 = OpLoad %564 
                                 Output f32* %566 = OpAccessChain vs_TEXCOORD2 %242 
                                                      OpStore %566 %565 
                                Private f32* %567 = OpAccessChain %63 %242 
                                         f32 %568 = OpLoad %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD2 %118 
                                                      OpStore %569 %568 
                                Private f32* %571 = OpAccessChain %63 %118 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD3 %118 
                                                      OpStore %573 %572 
                                Private f32* %575 = OpAccessChain %63 %101 
                                         f32 %576 = OpLoad %575 
                                 Output f32* %577 = OpAccessChain vs_TEXCOORD4 %118 
                                                      OpStore %577 %576 
                                Private f32* %578 = OpAccessChain %38 %101 
                                         f32 %579 = OpLoad %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %229 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %38 %242 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD4 %229 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %80 %101 
                                         f32 %585 = OpLoad %584 
                                 Output f32* %586 = OpAccessChain vs_TEXCOORD3 %242 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %537 %101 
                                         f32 %588 = OpLoad %587 
                                 Output f32* %589 = OpAccessChain vs_TEXCOORD3 %101 
                                                      OpStore %589 %588 
                                Private f32* %590 = OpAccessChain %537 %242 
                                         f32 %591 = OpLoad %590 
                                 Output f32* %592 = OpAccessChain vs_TEXCOORD4 %101 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %80 %229 
                                         f32 %594 = OpLoad %593 
                                 Output f32* %595 = OpAccessChain vs_TEXCOORD4 %242 
                                                      OpStore %595 %594 
                                       f32_4 %598 = OpLoad %597 
                                                      OpStore %596 %598 
                                       f32_4 %599 = OpLoad %9 
                                       f32_3 %600 = OpVectorShuffle %599 %599 1 1 1 
                              Uniform f32_4* %602 = OpAccessChain %25 %601 %42 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFMul %600 %604 
                                       f32_4 %606 = OpLoad %38 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %38 %607 
                              Uniform f32_4* %608 = OpAccessChain %25 %601 %47 
                                       f32_4 %609 = OpLoad %608 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_4 %611 = OpLoad %9 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 0 0 
                                       f32_3 %613 = OpFMul %610 %612 
                                       f32_4 %614 = OpLoad %38 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                                       f32_3 %616 = OpFAdd %613 %615 
                                       f32_4 %617 = OpLoad %9 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 2 6 
                                                      OpStore %9 %618 
                              Uniform f32_4* %621 = OpAccessChain %25 %601 %55 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_4 %624 = OpLoad %9 
                                       f32_3 %625 = OpVectorShuffle %624 %624 2 2 2 
                                       f32_3 %626 = OpFMul %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 3 
                                       f32_3 %629 = OpFAdd %626 %628 
                                                      OpStore vs_TEXCOORD6 %629 
                                Private f32* %631 = OpAccessChain %80 %101 
                                         f32 %632 = OpLoad %631 
                                Private f32* %633 = OpAccessChain %80 %101 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFMul %632 %634 
                                                      OpStore %630 %635 
                                Private f32* %636 = OpAccessChain %80 %118 
                                         f32 %637 = OpLoad %636 
                                Private f32* %638 = OpAccessChain %80 %118 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                         f32 %641 = OpLoad %630 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %640 %642 
                                                      OpStore %630 %643 
                                       f32_4 %645 = OpLoad %80 
                                       f32_4 %646 = OpVectorShuffle %645 %645 1 3 2 0 
                                       f32_4 %647 = OpLoad %80 
                                       f32_4 %648 = OpFMul %646 %647 
                                                      OpStore %644 %648 
                              Uniform f32_4* %650 = OpAccessChain %25 %55 
                                       f32_4 %651 = OpLoad %650 
                                       f32_4 %652 = OpLoad %644 
                                         f32 %653 = OpDot %651 %652 
                                Private f32* %654 = OpAccessChain %649 %118 
                                                      OpStore %654 %653 
                              Uniform f32_4* %655 = OpAccessChain %25 %65 
                                       f32_4 %656 = OpLoad %655 
                                       f32_4 %657 = OpLoad %644 
                                         f32 %658 = OpDot %656 %657 
                                Private f32* %659 = OpAccessChain %649 %101 
                                                      OpStore %659 %658 
                              Uniform f32_4* %661 = OpAccessChain %25 %660 
                                       f32_4 %662 = OpLoad %661 
                                       f32_4 %663 = OpLoad %644 
                                         f32 %664 = OpDot %662 %663 
                                Private f32* %665 = OpAccessChain %649 %242 
                                                      OpStore %665 %664 
                              Uniform f32_4* %668 = OpAccessChain %25 %667 
                                       f32_4 %669 = OpLoad %668 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 1 2 
                                         f32 %671 = OpLoad %630 
                                       f32_3 %672 = OpCompositeConstruct %671 %671 %671 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_3 %674 = OpLoad %649 
                                       f32_3 %675 = OpFAdd %673 %674 
                                                      OpStore vs_TEXCOORD7 %675 
                                 Output f32* %676 = OpAccessChain %105 %47 %101 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpFNegate %677 
                                 Output f32* %679 = OpAccessChain %105 %47 %101 
                                                      OpStore %679 %678 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD2.w = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3.wwzw + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_5.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD7.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD2.w = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3.wwzw + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_5.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD7.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec4 vs_COLOR0;
out highp vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
int u_xlati7;
vec3 u_xlat9;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;
    u_xlat3.x = floor(u_xlat21);
    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb21 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat22 = (-_WeightNormal) + _WeightBold;
    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;
    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;
    u_xlat21 = u_xlat21 * _ScaleRatioA;
    vs_TEXCOORD5.x = u_xlat21 * 0.5;
    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;
    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;
    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat2.x = _Sharpness + 1.0;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat2.x = u_xlat21 * u_xlat22;
    u_xlat9.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x;
    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);
    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat0.z = in_POSITION0.z;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati7 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
#endif
    u_xlati0 = (-u_xlati7) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);
    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);
    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.z;
    vs_TEXCOORD2.w = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD3.w = u_xlat1.y;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_TEXCOORD4.w = u_xlat1.z;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat2 = u_xlat3.yyyy * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;
    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3.wwzw + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_5.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD7.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightColor0;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
float u_xlat24;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0.x = (-u_xlat16_0.x) + 0.5;
    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;
    u_xlat7 = _OutlineWidth * _ScaleRatioA;
    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;
    u_xlat16_15 = min(u_xlat7, 1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat16_0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;
    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;
    u_xlat16_9 = u_xlat16_0.w * u_xlat16_2.x;
    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);
    u_xlat16_4 = vs_COLOR0 * _FaceColor;
    u_xlat16_5 = u_xlat16_3 * u_xlat16_4;
    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);
    u_xlat16_6.w = u_xlat16_2.x * u_xlat16_0.w + (-u_xlat16_5.w);
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;
    u_xlat16_2.w = u_xlat16_4.w * u_xlat16_3.w + u_xlat16_0.w;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;
    u_xlat3 = _OutlineSoftness * _ScaleRatioA;
    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;
    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;
    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;
    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;
    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat4.x = vs_TEXCOORD2.z;
    u_xlat4.y = vs_TEXCOORD3.z;
    u_xlat4.z = vs_TEXCOORD4.z;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;
    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 837
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %107 %119 %145 %160 %172 %223 %389 %490 %567 %580 %584 %606 %607 %630 %824 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 RelaxedPrecision 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 RelaxedPrecision 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 RelaxedPrecision 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpMemberDecorate %25 10 RelaxedPrecision 
                                                      OpMemberDecorate %25 10 Offset 25 
                                                      OpMemberDecorate %25 11 Offset 25 
                                                      OpMemberDecorate %25 12 Offset 25 
                                                      OpMemberDecorate %25 13 Offset 25 
                                                      OpMemberDecorate %25 14 Offset 25 
                                                      OpMemberDecorate %25 15 Offset 25 
                                                      OpMemberDecorate %25 16 Offset 25 
                                                      OpMemberDecorate %25 17 Offset 25 
                                                      OpMemberDecorate %25 18 Offset 25 
                                                      OpMemberDecorate %25 19 Offset 25 
                                                      OpMemberDecorate %25 20 Offset 25 
                                                      OpMemberDecorate %25 21 Offset 25 
                                                      OpMemberDecorate %25 22 Offset 25 
                                                      OpMemberDecorate %25 23 Offset 25 
                                                      OpMemberDecorate %25 24 Offset 25 
                                                      OpMemberDecorate %25 25 Offset 25 
                                                      OpMemberDecorate %25 26 Offset 25 
                                                      OpMemberDecorate %25 27 Offset 25 
                                                      OpMemberDecorate %25 28 Offset 25 
                                                      OpMemberDecorate %25 29 Offset 25 
                                                      OpMemberDecorate %25 30 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpMemberDecorate %105 0 BuiltIn 105 
                                                      OpMemberDecorate %105 1 BuiltIn 105 
                                                      OpMemberDecorate %105 2 BuiltIn 105 
                                                      OpDecorate %105 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate vs_TEXCOORD0 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 160 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate vs_TEXCOORD5 Location 223 
                                                      OpDecorate %389 Location 389 
                                                      OpDecorate %490 Location 490 
                                                      OpDecorate vs_TEXCOORD2 Location 567 
                                                      OpDecorate vs_TEXCOORD3 Location 580 
                                                      OpDecorate vs_TEXCOORD4 Location 584 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %606 Location 606 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %607 Location 607 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 630 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %799 RelaxedPrecision 
                                                      OpDecorate %800 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %817 RelaxedPrecision 
                                                      OpDecorate %818 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 824 
                                                      OpDecorate %830 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeArray %7 %19 
                                              %24 = OpTypeArray %7 %19 
                                              %25 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %7 %7 %7 %7 %20 %21 %7 %22 %23 %6 %24 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 21 
                                              %30 = OpTypePointer Uniform %6 
                                          i32 %33 = OpConstant 22 
                               Private f32_4* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 11 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %7 
                                          i32 %49 = OpConstant 0 
                                          i32 %57 = OpConstant 2 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %67 = OpConstant 3 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 15 
                                         u32 %103 = OpConstant 1 
                                             %104 = OpTypeArray %6 %103 
                                             %105 = OpTypeStruct %7 %6 %104 
                                             %106 = OpTypePointer Output %105 
        Output struct {f32_4; f32; f32[1];}* %107 = OpVariable Output 
                                             %115 = OpTypePointer Output %7 
                                             %117 = OpTypePointer Private %6 
                                Private f32* %118 = OpVariable Private 
                                Input f32_4* %119 = OpVariable Input 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Input %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %140 = OpConstant 3.674022E-40 
                                       f32_2 %141 = OpConstantComposite %140 %140 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %148 = OpConstant 29 
                                             %159 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %163 = OpConstant 30 
                                Input f32_4* %172 = OpVariable Input 
                                         i32 %175 = OpConstant 28 
                                             %186 = OpTypeBool 
                                             %187 = OpTypePointer Private %186 
                               Private bool* %188 = OpVariable Private 
                                         f32 %189 = OpConstant 3.674022E-40 
                                         f32 %194 = OpConstant 3.674022E-40 
                                Private f32* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 18 
                                         i32 %201 = OpConstant 19 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 16 
                                         i32 %219 = OpConstant 20 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %225 = OpConstant 3.674022E-40 
                                             %227 = OpTypePointer Output %6 
                                         u32 %231 = OpConstant 3 
                                         u32 %244 = OpConstant 2 
                                         i32 %260 = OpConstant 14 
                                         i32 %281 = OpConstant 24 
                                         i32 %284 = OpConstant 25 
                                         i32 %308 = OpConstant 23 
                                         i32 %312 = OpConstant 27 
                                             %325 = OpTypePointer Private %15 
                              Private f32_3* %326 = OpVariable Private 
                                         i32 %327 = OpConstant 26 
                                             %346 = OpTypePointer Uniform %15 
                                         i32 %350 = OpConstant 12 
                                             %388 = OpTypePointer Input %15 
                                Input f32_3* %389 = OpVariable Input 
                                             %395 = OpTypePointer Private %28 
                                Private i32* %396 = OpVariable Private 
                                         u32 %400 = OpConstant 4294967295 
                                Private i32* %403 = OpVariable Private 
                                Input f32_4* %490 = OpVariable Input 
                              Private f32_4* %535 = OpVariable Private 
                                         i32 %556 = OpConstant 13 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %606 = OpVariable Output 
                                Input f32_4* %607 = OpVariable Input 
                                         i32 %611 = OpConstant 17 
                                             %629 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                         i32 %662 = OpConstant 4 
                                         f32 %689 = OpConstant 3.674022E-40 
                                       f32_4 %690 = OpConstantComposite %689 %689 %689 %689 
                                         i32 %695 = OpConstant 5 
                                       f32_4 %699 = OpConstantComposite %194 %194 %194 %194 
                                       f32_4 %707 = OpConstantComposite %189 %189 %189 %189 
                                         i32 %714 = OpConstant 6 
                                         f32 %756 = OpConstant 3.674022E-40 
                                       f32_3 %757 = OpConstantComposite %756 %756 %756 
                                         f32 %759 = OpConstant 3.674022E-40 
                                       f32_3 %760 = OpConstantComposite %759 %759 %759 
                                         f32 %769 = OpConstant 3.674022E-40 
                                       f32_3 %770 = OpConstantComposite %769 %769 %769 
                              Private f32_3* %774 = OpVariable Private 
                              Private f32_4* %791 = OpVariable Private 
                              Private f32_3* %796 = OpVariable Private 
                                         i32 %797 = OpConstant 7 
                                         i32 %803 = OpConstant 8 
                                         i32 %809 = OpConstant 9 
                                         i32 %815 = OpConstant 10 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %31 = OpAccessChain %27 %29 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %34 = OpAccessChain %27 %33 
                                          f32 %35 = OpLoad %34 
                                        f32_2 %36 = OpCompositeConstruct %32 %35 
                                        f32_2 %37 = OpFAdd %14 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpVectorShuffle %41 %41 1 1 1 1 
                               Uniform f32_4* %46 = OpAccessChain %27 %43 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %42 %47 
                                                      OpStore %40 %48 
                               Uniform f32_4* %50 = OpAccessChain %27 %43 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %52 0 0 0 0 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %40 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %40 %56 
                               Uniform f32_4* %58 = OpAccessChain %27 %43 %57 
                                        f32_4 %59 = OpLoad %58 
                                        f32_4 %60 = OpLoad %11 
                                        f32_4 %61 = OpVectorShuffle %60 %60 2 2 2 2 
                                        f32_4 %62 = OpFMul %59 %61 
                                        f32_4 %63 = OpLoad %40 
                                        f32_4 %64 = OpFAdd %62 %63 
                                                      OpStore %40 %64 
                                        f32_4 %66 = OpLoad %40 
                               Uniform f32_4* %68 = OpAccessChain %27 %43 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFAdd %66 %69 
                                                      OpStore %65 %70 
                               Uniform f32_4* %71 = OpAccessChain %27 %43 %67 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_4 %74 = OpLoad %11 
                                        f32_3 %75 = OpVectorShuffle %74 %74 3 3 3 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %40 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %40 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %40 %81 
                                        f32_4 %83 = OpLoad %65 
                                        f32_4 %84 = OpVectorShuffle %83 %83 1 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %27 %85 %44 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFMul %84 %87 
                                                      OpStore %82 %88 
                               Uniform f32_4* %89 = OpAccessChain %27 %85 %49 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpVectorShuffle %91 %91 0 0 0 0 
                                        f32_4 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %82 
                                        f32_4 %95 = OpFAdd %93 %94 
                                                      OpStore %82 %95 
                               Uniform f32_4* %96 = OpAccessChain %27 %85 %57 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %65 
                                        f32_4 %99 = OpVectorShuffle %98 %98 2 2 2 2 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %82 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %82 %102 
                              Uniform f32_4* %108 = OpAccessChain %27 %85 %67 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %65 
                                       f32_4 %111 = OpVectorShuffle %110 %110 3 3 3 3 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %82 
                                       f32_4 %114 = OpFAdd %112 %113 
                               Output f32_4* %116 = OpAccessChain %107 %49 
                                                      OpStore %116 %114 
                                  Input f32* %122 = OpAccessChain %119 %120 
                                         f32 %123 = OpLoad %122 
                                         f32 %125 = OpFMul %123 %124 
                                                      OpStore %118 %125 
                                         f32 %126 = OpLoad %118 
                                         f32 %127 = OpExtInst %1 8 %126 
                                Private f32* %128 = OpAccessChain %82 %120 
                                                      OpStore %128 %127 
                                Private f32* %129 = OpAccessChain %82 %120 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %133 = OpFMul %131 %132 
                                  Input f32* %134 = OpAccessChain %119 %120 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %133 %135 
                                Private f32* %137 = OpAccessChain %82 %103 
                                                      OpStore %137 %136 
                                       f32_4 %138 = OpLoad %82 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %82 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 2 3 
                                                      OpStore %82 %144 
                                       f32_4 %146 = OpLoad %82 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %149 = OpAccessChain %27 %148 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                                       f32_2 %152 = OpFMul %147 %151 
                              Uniform f32_4* %153 = OpAccessChain %27 %148 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 2 3 
                                       f32_2 %156 = OpFAdd %152 %155 
                                       f32_4 %157 = OpLoad vs_TEXCOORD0 
                                       f32_4 %158 = OpVectorShuffle %157 %156 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %158 
                                       f32_4 %161 = OpLoad %82 
                                       f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                              Uniform f32_4* %164 = OpAccessChain %27 %163 
                                       f32_4 %165 = OpLoad %164 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFMul %162 %166 
                              Uniform f32_4* %168 = OpAccessChain %27 %163 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_2 %171 = OpFAdd %167 %170 
                                                      OpStore vs_TEXCOORD1 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                              Uniform f32_4* %176 = OpAccessChain %27 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                       f32_2 %179 = OpFMul %174 %178 
                              Uniform f32_4* %180 = OpAccessChain %27 %175 
                                       f32_4 %181 = OpLoad %180 
                                       f32_2 %182 = OpVectorShuffle %181 %181 2 3 
                                       f32_2 %183 = OpFAdd %179 %182 
                                       f32_4 %184 = OpLoad vs_TEXCOORD0 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %185 
                                  Input f32* %190 = OpAccessChain %119 %103 
                                         f32 %191 = OpLoad %190 
                                        bool %192 = OpFOrdGreaterThanEqual %189 %191 
                                                      OpStore %188 %192 
                                        bool %193 = OpLoad %188 
                                         f32 %195 = OpSelect %193 %194 %189 
                                                      OpStore %118 %195 
                                Uniform f32* %198 = OpAccessChain %27 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                Uniform f32* %202 = OpAccessChain %27 %201 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %200 %203 
                                                      OpStore %196 %204 
                                         f32 %205 = OpLoad %118 
                                         f32 %206 = OpLoad %196 
                                         f32 %207 = OpFMul %205 %206 
                                Uniform f32* %208 = OpAccessChain %27 %197 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFAdd %207 %209 
                                                      OpStore %118 %210 
                                         f32 %211 = OpLoad %118 
                                         f32 %213 = OpFMul %211 %212 
                                Uniform f32* %215 = OpAccessChain %27 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFAdd %213 %216 
                                                      OpStore %118 %217 
                                         f32 %218 = OpLoad %118 
                                Uniform f32* %220 = OpAccessChain %27 %219 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %218 %221 
                                                      OpStore %118 %222 
                                         f32 %224 = OpLoad %118 
                                         f32 %226 = OpFMul %224 %225 
                                 Output f32* %228 = OpAccessChain vs_TEXCOORD5 %120 
                                                      OpStore %228 %226 
                                Private f32* %229 = OpAccessChain %65 %103 
                                         f32 %230 = OpLoad %229 
                                Uniform f32* %232 = OpAccessChain %27 %85 %44 %231 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFMul %230 %233 
                                                      OpStore %118 %234 
                                Uniform f32* %235 = OpAccessChain %27 %85 %49 %231 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %65 %120 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                         f32 %240 = OpLoad %118 
                                         f32 %241 = OpFAdd %239 %240 
                                                      OpStore %118 %241 
                                Uniform f32* %242 = OpAccessChain %27 %85 %57 %231 
                                         f32 %243 = OpLoad %242 
                                Private f32* %245 = OpAccessChain %65 %244 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFMul %243 %246 
                                         f32 %248 = OpLoad %118 
                                         f32 %249 = OpFAdd %247 %248 
                                                      OpStore %118 %249 
                                Uniform f32* %250 = OpAccessChain %27 %85 %67 %231 
                                         f32 %251 = OpLoad %250 
                                Private f32* %252 = OpAccessChain %65 %231 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpLoad %118 
                                         f32 %256 = OpFAdd %254 %255 
                                                      OpStore %118 %256 
                              Uniform f32_4* %257 = OpAccessChain %27 %44 
                                       f32_4 %258 = OpLoad %257 
                                       f32_2 %259 = OpVectorShuffle %258 %258 1 1 
                              Uniform f32_4* %261 = OpAccessChain %27 %260 %44 
                                       f32_4 %262 = OpLoad %261 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFMul %259 %263 
                                       f32_4 %265 = OpLoad %65 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 2 3 
                                                      OpStore %65 %266 
                              Uniform f32_4* %267 = OpAccessChain %27 %260 %49 
                                       f32_4 %268 = OpLoad %267 
                                       f32_2 %269 = OpVectorShuffle %268 %268 0 1 
                              Uniform f32_4* %270 = OpAccessChain %27 %44 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 0 
                                       f32_2 %273 = OpFMul %269 %272 
                                       f32_4 %274 = OpLoad %65 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFAdd %273 %275 
                                       f32_4 %277 = OpLoad %65 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %65 %278 
                                       f32_4 %279 = OpLoad %65 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                Uniform f32* %282 = OpAccessChain %27 %281 
                                         f32 %283 = OpLoad %282 
                                Uniform f32* %285 = OpAccessChain %27 %284 
                                         f32 %286 = OpLoad %285 
                                       f32_2 %287 = OpCompositeConstruct %283 %286 
                                       f32_2 %288 = OpFMul %280 %287 
                                       f32_4 %289 = OpLoad %65 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %65 %290 
                                         f32 %291 = OpLoad %118 
                                       f32_2 %292 = OpCompositeConstruct %291 %291 
                                       f32_4 %293 = OpLoad %65 
                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
                                       f32_2 %295 = OpFDiv %292 %294 
                                       f32_4 %296 = OpLoad %65 
                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
                                                      OpStore %65 %297 
                                       f32_4 %298 = OpLoad %65 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                       f32_4 %300 = OpLoad %65 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                         f32 %302 = OpDot %299 %301 
                                                      OpStore %118 %302 
                                         f32 %303 = OpLoad %118 
                                         f32 %304 = OpExtInst %1 32 %303 
                                                      OpStore %118 %304 
                                  Input f32* %305 = OpAccessChain %119 %103 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpExtInst %1 4 %306 
                                Uniform f32* %309 = OpAccessChain %27 %308 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFMul %307 %310 
                                                      OpStore %196 %311 
                                Uniform f32* %313 = OpAccessChain %27 %312 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFAdd %314 %194 
                                Private f32* %316 = OpAccessChain %65 %120 
                                                      OpStore %316 %315 
                                         f32 %317 = OpLoad %196 
                                Private f32* %318 = OpAccessChain %65 %120 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                                      OpStore %196 %320 
                                         f32 %321 = OpLoad %118 
                                         f32 %322 = OpLoad %196 
                                         f32 %323 = OpFMul %321 %322 
                                Private f32* %324 = OpAccessChain %65 %120 
                                                      OpStore %324 %323 
                                Uniform f32* %328 = OpAccessChain %27 %327 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFNegate %329 
                                         f32 %331 = OpFAdd %330 %194 
                                Private f32* %332 = OpAccessChain %326 %120 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %326 %120 
                                         f32 %334 = OpLoad %333 
                                Private f32* %335 = OpAccessChain %65 %120 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFMul %334 %336 
                                Private f32* %338 = OpAccessChain %65 %120 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %118 
                                         f32 %340 = OpLoad %196 
                                         f32 %341 = OpFMul %339 %340 
                                Private f32* %342 = OpAccessChain %65 %120 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFNegate %343 
                                         f32 %345 = OpFAdd %341 %344 
                                                      OpStore %118 %345 
                              Uniform f32_3* %347 = OpAccessChain %27 %49 
                                       f32_3 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 1 1 1 
                              Uniform f32_4* %351 = OpAccessChain %27 %350 %44 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %349 %353 
                                                      OpStore %326 %354 
                              Uniform f32_4* %355 = OpAccessChain %27 %350 %49 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_3* %358 = OpAccessChain %27 %49 
                                       f32_3 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 0 0 
                                       f32_3 %361 = OpFMul %357 %360 
                                       f32_3 %362 = OpLoad %326 
                                       f32_3 %363 = OpFAdd %361 %362 
                                                      OpStore %326 %363 
                              Uniform f32_4* %364 = OpAccessChain %27 %350 %57 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                              Uniform f32_3* %367 = OpAccessChain %27 %49 
                                       f32_3 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 2 2 2 
                                       f32_3 %370 = OpFMul %366 %369 
                                       f32_3 %371 = OpLoad %326 
                                       f32_3 %372 = OpFAdd %370 %371 
                                                      OpStore %326 %372 
                                       f32_3 %373 = OpLoad %326 
                              Uniform f32_4* %374 = OpAccessChain %27 %350 %67 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFAdd %373 %376 
                                                      OpStore %326 %377 
                                  Input f32* %378 = OpAccessChain %11 %244 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %9 %244 
                                                      OpStore %380 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFNegate %382 
                                       f32_3 %384 = OpLoad %326 
                                       f32_3 %385 = OpFAdd %383 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %9 %387 
                                       f32_3 %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                Private f32* %394 = OpAccessChain %9 %120 
                                                      OpStore %394 %393 
                                Private f32* %397 = OpAccessChain %9 %120 
                                         f32 %398 = OpLoad %397 
                                        bool %399 = OpFOrdLessThan %189 %398 
                                         u32 %401 = OpSelect %399 %400 %120 
                                         i32 %402 = OpBitcast %401 
                                                      OpStore %396 %402 
                                Private f32* %404 = OpAccessChain %9 %120 
                                         f32 %405 = OpLoad %404 
                                        bool %406 = OpFOrdLessThan %405 %189 
                                         u32 %407 = OpSelect %406 %400 %120 
                                         i32 %408 = OpBitcast %407 
                                                      OpStore %403 %408 
                                         i32 %409 = OpLoad %396 
                                         i32 %410 = OpSNegate %409 
                                         i32 %411 = OpLoad %403 
                                         i32 %412 = OpIAdd %410 %411 
                                                      OpStore %403 %412 
                                         i32 %413 = OpLoad %403 
                                         f32 %414 = OpConvertSToF %413 
                                Private f32* %415 = OpAccessChain %9 %120 
                                                      OpStore %415 %414 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                                       f32_3 %418 = OpLoad %389 
                                       f32_3 %419 = OpFMul %417 %418 
                                       f32_4 %420 = OpLoad %9 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                                      OpStore %9 %421 
                                       f32_4 %422 = OpLoad %9 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                              Uniform f32_4* %424 = OpAccessChain %27 %350 %49 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                         f32 %427 = OpDot %423 %426 
                                Private f32* %428 = OpAccessChain %82 %120 
                                                      OpStore %428 %427 
                                       f32_4 %429 = OpLoad %9 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                              Uniform f32_4* %431 = OpAccessChain %27 %350 %44 
                                       f32_4 %432 = OpLoad %431 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                         f32 %434 = OpDot %430 %433 
                                Private f32* %435 = OpAccessChain %82 %103 
                                                      OpStore %435 %434 
                                       f32_4 %436 = OpLoad %9 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                              Uniform f32_4* %438 = OpAccessChain %27 %350 %57 
                                       f32_4 %439 = OpLoad %438 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                         f32 %441 = OpDot %437 %440 
                                Private f32* %442 = OpAccessChain %82 %244 
                                                      OpStore %442 %441 
                                       f32_4 %443 = OpLoad %82 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_4 %445 = OpLoad %82 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                         f32 %447 = OpDot %444 %446 
                                Private f32* %448 = OpAccessChain %9 %120 
                                                      OpStore %448 %447 
                                Private f32* %449 = OpAccessChain %9 %120 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpExtInst %1 32 %450 
                                Private f32* %452 = OpAccessChain %9 %120 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 0 0 0 
                                       f32_4 %455 = OpLoad %82 
                                       f32_4 %456 = OpVectorShuffle %455 %455 0 1 2 2 
                                       f32_4 %457 = OpFMul %454 %456 
                                                      OpStore %82 %457 
                                       f32_4 %458 = OpLoad %40 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                       f32_3 %460 = OpFNegate %459 
                              Uniform f32_3* %461 = OpAccessChain %27 %49 
                                       f32_3 %462 = OpLoad %461 
                                       f32_3 %463 = OpFAdd %460 %462 
                                       f32_4 %464 = OpLoad %9 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %9 %465 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_4 %468 = OpLoad %9 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                         f32 %470 = OpDot %467 %469 
                                                      OpStore %196 %470 
                                         f32 %471 = OpLoad %196 
                                         f32 %472 = OpExtInst %1 32 %471 
                                                      OpStore %196 %472 
                                       f32_4 %473 = OpLoad %9 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
                                         f32 %475 = OpLoad %196 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %326 %477 
                                       f32_4 %478 = OpLoad %82 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 3 
                                       f32_3 %480 = OpLoad %326 
                                         f32 %481 = OpDot %479 %480 
                                                      OpStore %196 %481 
                                         f32 %482 = OpLoad %196 
                                         f32 %483 = OpExtInst %1 4 %482 
                                         f32 %484 = OpLoad %118 
                                         f32 %485 = OpFMul %483 %484 
                                Private f32* %486 = OpAccessChain %65 %120 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %485 %487 
                                 Output f32* %489 = OpAccessChain vs_TEXCOORD5 %103 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %490 
                                       f32_3 %492 = OpVectorShuffle %491 %491 1 1 1 
                              Uniform f32_4* %493 = OpAccessChain %27 %43 %44 
                                       f32_4 %494 = OpLoad %493 
                                       f32_3 %495 = OpVectorShuffle %494 %494 1 2 0 
                                       f32_3 %496 = OpFMul %492 %495 
                                       f32_4 %497 = OpLoad %65 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %65 %498 
                              Uniform f32_4* %499 = OpAccessChain %27 %43 %49 
                                       f32_4 %500 = OpLoad %499 
                                       f32_3 %501 = OpVectorShuffle %500 %500 1 2 0 
                                       f32_4 %502 = OpLoad %490 
                                       f32_3 %503 = OpVectorShuffle %502 %502 0 0 0 
                                       f32_3 %504 = OpFMul %501 %503 
                                       f32_4 %505 = OpLoad %65 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                                       f32_3 %507 = OpFAdd %504 %506 
                                       f32_4 %508 = OpLoad %65 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %65 %509 
                              Uniform f32_4* %510 = OpAccessChain %27 %43 %57 
                                       f32_4 %511 = OpLoad %510 
                                       f32_3 %512 = OpVectorShuffle %511 %511 1 2 0 
                                       f32_4 %513 = OpLoad %490 
                                       f32_3 %514 = OpVectorShuffle %513 %513 2 2 2 
                                       f32_3 %515 = OpFMul %512 %514 
                                       f32_4 %516 = OpLoad %65 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFAdd %515 %517 
                                       f32_4 %519 = OpLoad %65 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %65 %520 
                                       f32_4 %521 = OpLoad %65 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %65 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                         f32 %525 = OpDot %522 %524 
                                                      OpStore %118 %525 
                                         f32 %526 = OpLoad %118 
                                         f32 %527 = OpExtInst %1 32 %526 
                                                      OpStore %118 %527 
                                         f32 %528 = OpLoad %118 
                                       f32_3 %529 = OpCompositeConstruct %528 %528 %528 
                                       f32_4 %530 = OpLoad %65 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                                       f32_3 %532 = OpFMul %529 %531 
                                       f32_4 %533 = OpLoad %65 
                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                                      OpStore %65 %534 
                                       f32_4 %536 = OpLoad %65 
                                       f32_3 %537 = OpVectorShuffle %536 %536 0 1 2 
                                       f32_4 %538 = OpLoad %82 
                                       f32_3 %539 = OpVectorShuffle %538 %538 3 0 1 
                                       f32_3 %540 = OpFMul %537 %539 
                                       f32_4 %541 = OpLoad %535 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 6 3 
                                                      OpStore %535 %542 
                                       f32_4 %543 = OpLoad %82 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %65 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_4 %548 = OpLoad %535 
                                       f32_3 %549 = OpVectorShuffle %548 %548 0 1 2 
                                       f32_3 %550 = OpFNegate %549 
                                       f32_3 %551 = OpFAdd %547 %550 
                                       f32_4 %552 = OpLoad %535 
                                       f32_4 %553 = OpVectorShuffle %552 %551 4 5 6 3 
                                                      OpStore %535 %553 
                                  Input f32* %554 = OpAccessChain %490 %231 
                                         f32 %555 = OpLoad %554 
                                Uniform f32* %557 = OpAccessChain %27 %556 %231 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpFMul %555 %558 
                                                      OpStore %118 %559 
                                         f32 %560 = OpLoad %118 
                                       f32_3 %561 = OpCompositeConstruct %560 %560 %560 
                                       f32_4 %562 = OpLoad %535 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                       f32_3 %564 = OpFMul %561 %563 
                                       f32_4 %565 = OpLoad %535 
                                       f32_4 %566 = OpVectorShuffle %565 %564 4 5 6 3 
                                                      OpStore %535 %566 
                                Private f32* %568 = OpAccessChain %535 %120 
                                         f32 %569 = OpLoad %568 
                                 Output f32* %570 = OpAccessChain vs_TEXCOORD2 %103 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %82 %120 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD2 %244 
                                                      OpStore %573 %572 
                                Private f32* %574 = OpAccessChain %65 %244 
                                         f32 %575 = OpLoad %574 
                                 Output f32* %576 = OpAccessChain vs_TEXCOORD2 %120 
                                                      OpStore %576 %575 
                                Private f32* %577 = OpAccessChain %40 %120 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD2 %231 
                                                      OpStore %579 %578 
                                Private f32* %581 = OpAccessChain %65 %120 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD3 %120 
                                                      OpStore %583 %582 
                                Private f32* %585 = OpAccessChain %65 %103 
                                         f32 %586 = OpLoad %585 
                                 Output f32* %587 = OpAccessChain vs_TEXCOORD4 %120 
                                                      OpStore %587 %586 
                                Private f32* %588 = OpAccessChain %82 %103 
                                         f32 %589 = OpLoad %588 
                                 Output f32* %590 = OpAccessChain vs_TEXCOORD3 %244 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %535 %103 
                                         f32 %592 = OpLoad %591 
                                 Output f32* %593 = OpAccessChain vs_TEXCOORD3 %103 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %535 %244 
                                         f32 %595 = OpLoad %594 
                                 Output f32* %596 = OpAccessChain vs_TEXCOORD4 %103 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %40 %103 
                                         f32 %598 = OpLoad %597 
                                 Output f32* %599 = OpAccessChain vs_TEXCOORD3 %231 
                                                      OpStore %599 %598 
                                Private f32* %600 = OpAccessChain %82 %231 
                                         f32 %601 = OpLoad %600 
                                 Output f32* %602 = OpAccessChain vs_TEXCOORD4 %244 
                                                      OpStore %602 %601 
                                Private f32* %603 = OpAccessChain %40 %244 
                                         f32 %604 = OpLoad %603 
                                 Output f32* %605 = OpAccessChain vs_TEXCOORD4 %231 
                                                      OpStore %605 %604 
                                       f32_4 %608 = OpLoad %607 
                                                      OpStore %606 %608 
                                       f32_4 %609 = OpLoad %9 
                                       f32_3 %610 = OpVectorShuffle %609 %609 1 1 1 
                              Uniform f32_4* %612 = OpAccessChain %27 %611 %44 
                                       f32_4 %613 = OpLoad %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                       f32_3 %615 = OpFMul %610 %614 
                                       f32_4 %616 = OpLoad %65 
                                       f32_4 %617 = OpVectorShuffle %616 %615 4 5 6 3 
                                                      OpStore %65 %617 
                              Uniform f32_4* %618 = OpAccessChain %27 %611 %49 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                       f32_4 %621 = OpLoad %9 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 0 0 
                                       f32_3 %623 = OpFMul %620 %622 
                                       f32_4 %624 = OpLoad %65 
                                       f32_3 %625 = OpVectorShuffle %624 %624 0 1 2 
                                       f32_3 %626 = OpFAdd %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 2 6 
                                                      OpStore %9 %628 
                              Uniform f32_4* %631 = OpAccessChain %27 %611 %57 
                                       f32_4 %632 = OpLoad %631 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 1 2 
                                       f32_4 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 2 2 2 
                                       f32_3 %636 = OpFMul %633 %635 
                                       f32_4 %637 = OpLoad %9 
                                       f32_3 %638 = OpVectorShuffle %637 %637 0 1 3 
                                       f32_3 %639 = OpFAdd %636 %638 
                                                      OpStore vs_TEXCOORD6 %639 
                                       f32_4 %640 = OpLoad %40 
                                       f32_4 %641 = OpVectorShuffle %640 %640 1 1 1 1 
                                       f32_4 %642 = OpFNegate %641 
                              Uniform f32_4* %643 = OpAccessChain %27 %67 
                                       f32_4 %644 = OpLoad %643 
                                       f32_4 %645 = OpFAdd %642 %644 
                                                      OpStore %9 %645 
                                       f32_4 %646 = OpLoad %82 
                                       f32_4 %647 = OpVectorShuffle %646 %646 1 1 1 1 
                                       f32_4 %648 = OpLoad %9 
                                       f32_4 %649 = OpFMul %647 %648 
                                                      OpStore %65 %649 
                                       f32_4 %650 = OpLoad %9 
                                       f32_4 %651 = OpLoad %9 
                                       f32_4 %652 = OpFMul %650 %651 
                                                      OpStore %9 %652 
                                       f32_4 %653 = OpLoad %40 
                                       f32_4 %654 = OpVectorShuffle %653 %653 0 0 0 0 
                                       f32_4 %655 = OpFNegate %654 
                              Uniform f32_4* %656 = OpAccessChain %27 %57 
                                       f32_4 %657 = OpLoad %656 
                                       f32_4 %658 = OpFAdd %655 %657 
                                                      OpStore %535 %658 
                                       f32_4 %659 = OpLoad %40 
                                       f32_4 %660 = OpVectorShuffle %659 %659 2 2 2 2 
                                       f32_4 %661 = OpFNegate %660 
                              Uniform f32_4* %663 = OpAccessChain %27 %662 
                                       f32_4 %664 = OpLoad %663 
                                       f32_4 %665 = OpFAdd %661 %664 
                                                      OpStore %40 %665 
                                       f32_4 %666 = OpLoad %535 
                                       f32_4 %667 = OpLoad %82 
                                       f32_4 %668 = OpVectorShuffle %667 %667 0 0 0 0 
                                       f32_4 %669 = OpFMul %666 %668 
                                       f32_4 %670 = OpLoad %65 
                                       f32_4 %671 = OpFAdd %669 %670 
                                                      OpStore %65 %671 
                                       f32_4 %672 = OpLoad %535 
                                       f32_4 %673 = OpLoad %535 
                                       f32_4 %674 = OpFMul %672 %673 
                                       f32_4 %675 = OpLoad %9 
                                       f32_4 %676 = OpFAdd %674 %675 
                                                      OpStore %9 %676 
                                       f32_4 %677 = OpLoad %40 
                                       f32_4 %678 = OpLoad %40 
                                       f32_4 %679 = OpFMul %677 %678 
                                       f32_4 %680 = OpLoad %9 
                                       f32_4 %681 = OpFAdd %679 %680 
                                                      OpStore %9 %681 
                                       f32_4 %682 = OpLoad %40 
                                       f32_4 %683 = OpLoad %82 
                                       f32_4 %684 = OpVectorShuffle %683 %683 3 3 2 3 
                                       f32_4 %685 = OpFMul %682 %684 
                                       f32_4 %686 = OpLoad %65 
                                       f32_4 %687 = OpFAdd %685 %686 
                                                      OpStore %40 %687 
                                       f32_4 %688 = OpLoad %9 
                                       f32_4 %691 = OpExtInst %1 40 %688 %690 
                                                      OpStore %9 %691 
                                       f32_4 %692 = OpLoad %9 
                                       f32_4 %693 = OpExtInst %1 32 %692 
                                                      OpStore %65 %693 
                                       f32_4 %694 = OpLoad %9 
                              Uniform f32_4* %696 = OpAccessChain %27 %695 
                                       f32_4 %697 = OpLoad %696 
                                       f32_4 %698 = OpFMul %694 %697 
                                       f32_4 %700 = OpFAdd %698 %699 
                                                      OpStore %9 %700 
                                       f32_4 %701 = OpLoad %9 
                                       f32_4 %702 = OpFDiv %699 %701 
                                                      OpStore %9 %702 
                                       f32_4 %703 = OpLoad %40 
                                       f32_4 %704 = OpLoad %65 
                                       f32_4 %705 = OpFMul %703 %704 
                                                      OpStore %40 %705 
                                       f32_4 %706 = OpLoad %40 
                                       f32_4 %708 = OpExtInst %1 40 %706 %707 
                                                      OpStore %40 %708 
                                       f32_4 %709 = OpLoad %9 
                                       f32_4 %710 = OpLoad %40 
                                       f32_4 %711 = OpFMul %709 %710 
                                                      OpStore %9 %711 
                                       f32_4 %712 = OpLoad %9 
                                       f32_3 %713 = OpVectorShuffle %712 %712 1 1 1 
                              Uniform f32_4* %715 = OpAccessChain %27 %714 %44 
                                       f32_4 %716 = OpLoad %715 
                                       f32_3 %717 = OpVectorShuffle %716 %716 0 1 2 
                                       f32_3 %718 = OpFMul %713 %717 
                                       f32_4 %719 = OpLoad %40 
                                       f32_4 %720 = OpVectorShuffle %719 %718 4 5 6 3 
                                                      OpStore %40 %720 
                              Uniform f32_4* %721 = OpAccessChain %27 %714 %49 
                                       f32_4 %722 = OpLoad %721 
                                       f32_3 %723 = OpVectorShuffle %722 %722 0 1 2 
                                       f32_4 %724 = OpLoad %9 
                                       f32_3 %725 = OpVectorShuffle %724 %724 0 0 0 
                                       f32_3 %726 = OpFMul %723 %725 
                                       f32_4 %727 = OpLoad %40 
                                       f32_3 %728 = OpVectorShuffle %727 %727 0 1 2 
                                       f32_3 %729 = OpFAdd %726 %728 
                                       f32_4 %730 = OpLoad %40 
                                       f32_4 %731 = OpVectorShuffle %730 %729 4 5 6 3 
                                                      OpStore %40 %731 
                              Uniform f32_4* %732 = OpAccessChain %27 %714 %57 
                                       f32_4 %733 = OpLoad %732 
                                       f32_3 %734 = OpVectorShuffle %733 %733 0 1 2 
                                       f32_4 %735 = OpLoad %9 
                                       f32_3 %736 = OpVectorShuffle %735 %735 2 2 2 
                                       f32_3 %737 = OpFMul %734 %736 
                                       f32_4 %738 = OpLoad %40 
                                       f32_3 %739 = OpVectorShuffle %738 %738 0 1 2 
                                       f32_3 %740 = OpFAdd %737 %739 
                                       f32_4 %741 = OpLoad %9 
                                       f32_4 %742 = OpVectorShuffle %741 %740 4 5 6 3 
                                                      OpStore %9 %742 
                              Uniform f32_4* %743 = OpAccessChain %27 %714 %67 
                                       f32_4 %744 = OpLoad %743 
                                       f32_3 %745 = OpVectorShuffle %744 %744 0 1 2 
                                       f32_4 %746 = OpLoad %9 
                                       f32_3 %747 = OpVectorShuffle %746 %746 3 3 3 
                                       f32_3 %748 = OpFMul %745 %747 
                                       f32_4 %749 = OpLoad %9 
                                       f32_3 %750 = OpVectorShuffle %749 %749 0 1 2 
                                       f32_3 %751 = OpFAdd %748 %750 
                                       f32_4 %752 = OpLoad %9 
                                       f32_4 %753 = OpVectorShuffle %752 %751 4 5 6 3 
                                                      OpStore %9 %753 
                                       f32_4 %754 = OpLoad %9 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %758 = OpFMul %755 %757 
                                       f32_3 %761 = OpFAdd %758 %760 
                                       f32_4 %762 = OpLoad %40 
                                       f32_4 %763 = OpVectorShuffle %762 %761 4 5 6 3 
                                                      OpStore %40 %763 
                                       f32_4 %764 = OpLoad %9 
                                       f32_3 %765 = OpVectorShuffle %764 %764 0 1 2 
                                       f32_4 %766 = OpLoad %40 
                                       f32_3 %767 = OpVectorShuffle %766 %766 0 1 2 
                                       f32_3 %768 = OpFMul %765 %767 
                                       f32_3 %771 = OpFAdd %768 %770 
                                       f32_4 %772 = OpLoad %40 
                                       f32_4 %773 = OpVectorShuffle %772 %771 4 5 6 3 
                                                      OpStore %40 %773 
                                Private f32* %775 = OpAccessChain %82 %103 
                                         f32 %776 = OpLoad %775 
                                Private f32* %777 = OpAccessChain %82 %103 
                                         f32 %778 = OpLoad %777 
                                         f32 %779 = OpFMul %776 %778 
                                Private f32* %780 = OpAccessChain %774 %120 
                                                      OpStore %780 %779 
                                Private f32* %781 = OpAccessChain %82 %120 
                                         f32 %782 = OpLoad %781 
                                Private f32* %783 = OpAccessChain %82 %120 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpFMul %782 %784 
                                Private f32* %786 = OpAccessChain %774 %120 
                                         f32 %787 = OpLoad %786 
                                         f32 %788 = OpFNegate %787 
                                         f32 %789 = OpFAdd %785 %788 
                                Private f32* %790 = OpAccessChain %774 %120 
                                                      OpStore %790 %789 
                                       f32_4 %792 = OpLoad %82 
                                       f32_4 %793 = OpVectorShuffle %792 %792 1 3 2 0 
                                       f32_4 %794 = OpLoad %82 
                                       f32_4 %795 = OpFMul %793 %794 
                                                      OpStore %791 %795 
                              Uniform f32_4* %798 = OpAccessChain %27 %797 
                                       f32_4 %799 = OpLoad %798 
                                       f32_4 %800 = OpLoad %791 
                                         f32 %801 = OpDot %799 %800 
                                Private f32* %802 = OpAccessChain %796 %120 
                                                      OpStore %802 %801 
                              Uniform f32_4* %804 = OpAccessChain %27 %803 
                                       f32_4 %805 = OpLoad %804 
                                       f32_4 %806 = OpLoad %791 
                                         f32 %807 = OpDot %805 %806 
                                Private f32* %808 = OpAccessChain %796 %103 
                                                      OpStore %808 %807 
                              Uniform f32_4* %810 = OpAccessChain %27 %809 
                                       f32_4 %811 = OpLoad %810 
                                       f32_4 %812 = OpLoad %791 
                                         f32 %813 = OpDot %811 %812 
                                Private f32* %814 = OpAccessChain %796 %244 
                                                      OpStore %814 %813 
                              Uniform f32_4* %816 = OpAccessChain %27 %815 
                                       f32_4 %817 = OpLoad %816 
                                       f32_3 %818 = OpVectorShuffle %817 %817 0 1 2 
                                       f32_3 %819 = OpLoad %774 
                                       f32_3 %820 = OpVectorShuffle %819 %819 0 0 0 
                                       f32_3 %821 = OpFMul %818 %820 
                                       f32_3 %822 = OpLoad %796 
                                       f32_3 %823 = OpFAdd %821 %822 
                                                      OpStore %774 %823 
                                       f32_4 %825 = OpLoad %9 
                                       f32_3 %826 = OpVectorShuffle %825 %825 0 1 2 
                                       f32_4 %827 = OpLoad %40 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 1 2 
                                       f32_3 %829 = OpFMul %826 %828 
                                       f32_3 %830 = OpLoad %774 
                                       f32_3 %831 = OpFAdd %829 %830 
                                                      OpStore vs_TEXCOORD7 %831 
                                 Output f32* %832 = OpAccessChain %107 %49 %103 
                                         f32 %833 = OpLoad %832 
                                         f32 %834 = OpFNegate %833 
                                 Output f32* %835 = OpAccessChain %107 %49 %103 
                                                      OpStore %835 %834 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 837
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %107 %119 %145 %160 %172 %223 %389 %490 %567 %580 %584 %606 %607 %630 %824 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 RelaxedPrecision 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 RelaxedPrecision 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 RelaxedPrecision 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpMemberDecorate %25 10 RelaxedPrecision 
                                                      OpMemberDecorate %25 10 Offset 25 
                                                      OpMemberDecorate %25 11 Offset 25 
                                                      OpMemberDecorate %25 12 Offset 25 
                                                      OpMemberDecorate %25 13 Offset 25 
                                                      OpMemberDecorate %25 14 Offset 25 
                                                      OpMemberDecorate %25 15 Offset 25 
                                                      OpMemberDecorate %25 16 Offset 25 
                                                      OpMemberDecorate %25 17 Offset 25 
                                                      OpMemberDecorate %25 18 Offset 25 
                                                      OpMemberDecorate %25 19 Offset 25 
                                                      OpMemberDecorate %25 20 Offset 25 
                                                      OpMemberDecorate %25 21 Offset 25 
                                                      OpMemberDecorate %25 22 Offset 25 
                                                      OpMemberDecorate %25 23 Offset 25 
                                                      OpMemberDecorate %25 24 Offset 25 
                                                      OpMemberDecorate %25 25 Offset 25 
                                                      OpMemberDecorate %25 26 Offset 25 
                                                      OpMemberDecorate %25 27 Offset 25 
                                                      OpMemberDecorate %25 28 Offset 25 
                                                      OpMemberDecorate %25 29 Offset 25 
                                                      OpMemberDecorate %25 30 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpMemberDecorate %105 0 BuiltIn 105 
                                                      OpMemberDecorate %105 1 BuiltIn 105 
                                                      OpMemberDecorate %105 2 BuiltIn 105 
                                                      OpDecorate %105 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate vs_TEXCOORD0 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 160 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate vs_TEXCOORD5 Location 223 
                                                      OpDecorate %389 Location 389 
                                                      OpDecorate %490 Location 490 
                                                      OpDecorate vs_TEXCOORD2 Location 567 
                                                      OpDecorate vs_TEXCOORD3 Location 580 
                                                      OpDecorate vs_TEXCOORD4 Location 584 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %606 Location 606 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %607 Location 607 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 630 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %799 RelaxedPrecision 
                                                      OpDecorate %800 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %817 RelaxedPrecision 
                                                      OpDecorate %818 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 824 
                                                      OpDecorate %830 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeArray %7 %19 
                                              %24 = OpTypeArray %7 %19 
                                              %25 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %7 %7 %7 %7 %20 %21 %7 %22 %23 %6 %24 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 21 
                                              %30 = OpTypePointer Uniform %6 
                                          i32 %33 = OpConstant 22 
                               Private f32_4* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 11 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %7 
                                          i32 %49 = OpConstant 0 
                                          i32 %57 = OpConstant 2 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %67 = OpConstant 3 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 15 
                                         u32 %103 = OpConstant 1 
                                             %104 = OpTypeArray %6 %103 
                                             %105 = OpTypeStruct %7 %6 %104 
                                             %106 = OpTypePointer Output %105 
        Output struct {f32_4; f32; f32[1];}* %107 = OpVariable Output 
                                             %115 = OpTypePointer Output %7 
                                             %117 = OpTypePointer Private %6 
                                Private f32* %118 = OpVariable Private 
                                Input f32_4* %119 = OpVariable Input 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Input %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %140 = OpConstant 3.674022E-40 
                                       f32_2 %141 = OpConstantComposite %140 %140 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %148 = OpConstant 29 
                                             %159 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %163 = OpConstant 30 
                                Input f32_4* %172 = OpVariable Input 
                                         i32 %175 = OpConstant 28 
                                             %186 = OpTypeBool 
                                             %187 = OpTypePointer Private %186 
                               Private bool* %188 = OpVariable Private 
                                         f32 %189 = OpConstant 3.674022E-40 
                                         f32 %194 = OpConstant 3.674022E-40 
                                Private f32* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 18 
                                         i32 %201 = OpConstant 19 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 16 
                                         i32 %219 = OpConstant 20 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %225 = OpConstant 3.674022E-40 
                                             %227 = OpTypePointer Output %6 
                                         u32 %231 = OpConstant 3 
                                         u32 %244 = OpConstant 2 
                                         i32 %260 = OpConstant 14 
                                         i32 %281 = OpConstant 24 
                                         i32 %284 = OpConstant 25 
                                         i32 %308 = OpConstant 23 
                                         i32 %312 = OpConstant 27 
                                             %325 = OpTypePointer Private %15 
                              Private f32_3* %326 = OpVariable Private 
                                         i32 %327 = OpConstant 26 
                                             %346 = OpTypePointer Uniform %15 
                                         i32 %350 = OpConstant 12 
                                             %388 = OpTypePointer Input %15 
                                Input f32_3* %389 = OpVariable Input 
                                             %395 = OpTypePointer Private %28 
                                Private i32* %396 = OpVariable Private 
                                         u32 %400 = OpConstant 4294967295 
                                Private i32* %403 = OpVariable Private 
                                Input f32_4* %490 = OpVariable Input 
                              Private f32_4* %535 = OpVariable Private 
                                         i32 %556 = OpConstant 13 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %606 = OpVariable Output 
                                Input f32_4* %607 = OpVariable Input 
                                         i32 %611 = OpConstant 17 
                                             %629 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                         i32 %662 = OpConstant 4 
                                         f32 %689 = OpConstant 3.674022E-40 
                                       f32_4 %690 = OpConstantComposite %689 %689 %689 %689 
                                         i32 %695 = OpConstant 5 
                                       f32_4 %699 = OpConstantComposite %194 %194 %194 %194 
                                       f32_4 %707 = OpConstantComposite %189 %189 %189 %189 
                                         i32 %714 = OpConstant 6 
                                         f32 %756 = OpConstant 3.674022E-40 
                                       f32_3 %757 = OpConstantComposite %756 %756 %756 
                                         f32 %759 = OpConstant 3.674022E-40 
                                       f32_3 %760 = OpConstantComposite %759 %759 %759 
                                         f32 %769 = OpConstant 3.674022E-40 
                                       f32_3 %770 = OpConstantComposite %769 %769 %769 
                              Private f32_3* %774 = OpVariable Private 
                              Private f32_4* %791 = OpVariable Private 
                              Private f32_3* %796 = OpVariable Private 
                                         i32 %797 = OpConstant 7 
                                         i32 %803 = OpConstant 8 
                                         i32 %809 = OpConstant 9 
                                         i32 %815 = OpConstant 10 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %31 = OpAccessChain %27 %29 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %34 = OpAccessChain %27 %33 
                                          f32 %35 = OpLoad %34 
                                        f32_2 %36 = OpCompositeConstruct %32 %35 
                                        f32_2 %37 = OpFAdd %14 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpVectorShuffle %41 %41 1 1 1 1 
                               Uniform f32_4* %46 = OpAccessChain %27 %43 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %42 %47 
                                                      OpStore %40 %48 
                               Uniform f32_4* %50 = OpAccessChain %27 %43 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %52 0 0 0 0 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %40 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %40 %56 
                               Uniform f32_4* %58 = OpAccessChain %27 %43 %57 
                                        f32_4 %59 = OpLoad %58 
                                        f32_4 %60 = OpLoad %11 
                                        f32_4 %61 = OpVectorShuffle %60 %60 2 2 2 2 
                                        f32_4 %62 = OpFMul %59 %61 
                                        f32_4 %63 = OpLoad %40 
                                        f32_4 %64 = OpFAdd %62 %63 
                                                      OpStore %40 %64 
                                        f32_4 %66 = OpLoad %40 
                               Uniform f32_4* %68 = OpAccessChain %27 %43 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFAdd %66 %69 
                                                      OpStore %65 %70 
                               Uniform f32_4* %71 = OpAccessChain %27 %43 %67 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_4 %74 = OpLoad %11 
                                        f32_3 %75 = OpVectorShuffle %74 %74 3 3 3 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %40 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %40 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %40 %81 
                                        f32_4 %83 = OpLoad %65 
                                        f32_4 %84 = OpVectorShuffle %83 %83 1 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %27 %85 %44 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFMul %84 %87 
                                                      OpStore %82 %88 
                               Uniform f32_4* %89 = OpAccessChain %27 %85 %49 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpVectorShuffle %91 %91 0 0 0 0 
                                        f32_4 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %82 
                                        f32_4 %95 = OpFAdd %93 %94 
                                                      OpStore %82 %95 
                               Uniform f32_4* %96 = OpAccessChain %27 %85 %57 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %65 
                                        f32_4 %99 = OpVectorShuffle %98 %98 2 2 2 2 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %82 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %82 %102 
                              Uniform f32_4* %108 = OpAccessChain %27 %85 %67 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %65 
                                       f32_4 %111 = OpVectorShuffle %110 %110 3 3 3 3 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %82 
                                       f32_4 %114 = OpFAdd %112 %113 
                               Output f32_4* %116 = OpAccessChain %107 %49 
                                                      OpStore %116 %114 
                                  Input f32* %122 = OpAccessChain %119 %120 
                                         f32 %123 = OpLoad %122 
                                         f32 %125 = OpFMul %123 %124 
                                                      OpStore %118 %125 
                                         f32 %126 = OpLoad %118 
                                         f32 %127 = OpExtInst %1 8 %126 
                                Private f32* %128 = OpAccessChain %82 %120 
                                                      OpStore %128 %127 
                                Private f32* %129 = OpAccessChain %82 %120 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %133 = OpFMul %131 %132 
                                  Input f32* %134 = OpAccessChain %119 %120 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %133 %135 
                                Private f32* %137 = OpAccessChain %82 %103 
                                                      OpStore %137 %136 
                                       f32_4 %138 = OpLoad %82 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %82 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 2 3 
                                                      OpStore %82 %144 
                                       f32_4 %146 = OpLoad %82 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %149 = OpAccessChain %27 %148 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                                       f32_2 %152 = OpFMul %147 %151 
                              Uniform f32_4* %153 = OpAccessChain %27 %148 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 2 3 
                                       f32_2 %156 = OpFAdd %152 %155 
                                       f32_4 %157 = OpLoad vs_TEXCOORD0 
                                       f32_4 %158 = OpVectorShuffle %157 %156 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %158 
                                       f32_4 %161 = OpLoad %82 
                                       f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                              Uniform f32_4* %164 = OpAccessChain %27 %163 
                                       f32_4 %165 = OpLoad %164 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFMul %162 %166 
                              Uniform f32_4* %168 = OpAccessChain %27 %163 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_2 %171 = OpFAdd %167 %170 
                                                      OpStore vs_TEXCOORD1 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                              Uniform f32_4* %176 = OpAccessChain %27 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                       f32_2 %179 = OpFMul %174 %178 
                              Uniform f32_4* %180 = OpAccessChain %27 %175 
                                       f32_4 %181 = OpLoad %180 
                                       f32_2 %182 = OpVectorShuffle %181 %181 2 3 
                                       f32_2 %183 = OpFAdd %179 %182 
                                       f32_4 %184 = OpLoad vs_TEXCOORD0 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %185 
                                  Input f32* %190 = OpAccessChain %119 %103 
                                         f32 %191 = OpLoad %190 
                                        bool %192 = OpFOrdGreaterThanEqual %189 %191 
                                                      OpStore %188 %192 
                                        bool %193 = OpLoad %188 
                                         f32 %195 = OpSelect %193 %194 %189 
                                                      OpStore %118 %195 
                                Uniform f32* %198 = OpAccessChain %27 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                Uniform f32* %202 = OpAccessChain %27 %201 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %200 %203 
                                                      OpStore %196 %204 
                                         f32 %205 = OpLoad %118 
                                         f32 %206 = OpLoad %196 
                                         f32 %207 = OpFMul %205 %206 
                                Uniform f32* %208 = OpAccessChain %27 %197 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFAdd %207 %209 
                                                      OpStore %118 %210 
                                         f32 %211 = OpLoad %118 
                                         f32 %213 = OpFMul %211 %212 
                                Uniform f32* %215 = OpAccessChain %27 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFAdd %213 %216 
                                                      OpStore %118 %217 
                                         f32 %218 = OpLoad %118 
                                Uniform f32* %220 = OpAccessChain %27 %219 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %218 %221 
                                                      OpStore %118 %222 
                                         f32 %224 = OpLoad %118 
                                         f32 %226 = OpFMul %224 %225 
                                 Output f32* %228 = OpAccessChain vs_TEXCOORD5 %120 
                                                      OpStore %228 %226 
                                Private f32* %229 = OpAccessChain %65 %103 
                                         f32 %230 = OpLoad %229 
                                Uniform f32* %232 = OpAccessChain %27 %85 %44 %231 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFMul %230 %233 
                                                      OpStore %118 %234 
                                Uniform f32* %235 = OpAccessChain %27 %85 %49 %231 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %65 %120 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                         f32 %240 = OpLoad %118 
                                         f32 %241 = OpFAdd %239 %240 
                                                      OpStore %118 %241 
                                Uniform f32* %242 = OpAccessChain %27 %85 %57 %231 
                                         f32 %243 = OpLoad %242 
                                Private f32* %245 = OpAccessChain %65 %244 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFMul %243 %246 
                                         f32 %248 = OpLoad %118 
                                         f32 %249 = OpFAdd %247 %248 
                                                      OpStore %118 %249 
                                Uniform f32* %250 = OpAccessChain %27 %85 %67 %231 
                                         f32 %251 = OpLoad %250 
                                Private f32* %252 = OpAccessChain %65 %231 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpLoad %118 
                                         f32 %256 = OpFAdd %254 %255 
                                                      OpStore %118 %256 
                              Uniform f32_4* %257 = OpAccessChain %27 %44 
                                       f32_4 %258 = OpLoad %257 
                                       f32_2 %259 = OpVectorShuffle %258 %258 1 1 
                              Uniform f32_4* %261 = OpAccessChain %27 %260 %44 
                                       f32_4 %262 = OpLoad %261 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFMul %259 %263 
                                       f32_4 %265 = OpLoad %65 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 2 3 
                                                      OpStore %65 %266 
                              Uniform f32_4* %267 = OpAccessChain %27 %260 %49 
                                       f32_4 %268 = OpLoad %267 
                                       f32_2 %269 = OpVectorShuffle %268 %268 0 1 
                              Uniform f32_4* %270 = OpAccessChain %27 %44 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 0 
                                       f32_2 %273 = OpFMul %269 %272 
                                       f32_4 %274 = OpLoad %65 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFAdd %273 %275 
                                       f32_4 %277 = OpLoad %65 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %65 %278 
                                       f32_4 %279 = OpLoad %65 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                Uniform f32* %282 = OpAccessChain %27 %281 
                                         f32 %283 = OpLoad %282 
                                Uniform f32* %285 = OpAccessChain %27 %284 
                                         f32 %286 = OpLoad %285 
                                       f32_2 %287 = OpCompositeConstruct %283 %286 
                                       f32_2 %288 = OpFMul %280 %287 
                                       f32_4 %289 = OpLoad %65 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %65 %290 
                                         f32 %291 = OpLoad %118 
                                       f32_2 %292 = OpCompositeConstruct %291 %291 
                                       f32_4 %293 = OpLoad %65 
                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
                                       f32_2 %295 = OpFDiv %292 %294 
                                       f32_4 %296 = OpLoad %65 
                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
                                                      OpStore %65 %297 
                                       f32_4 %298 = OpLoad %65 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                       f32_4 %300 = OpLoad %65 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                         f32 %302 = OpDot %299 %301 
                                                      OpStore %118 %302 
                                         f32 %303 = OpLoad %118 
                                         f32 %304 = OpExtInst %1 32 %303 
                                                      OpStore %118 %304 
                                  Input f32* %305 = OpAccessChain %119 %103 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpExtInst %1 4 %306 
                                Uniform f32* %309 = OpAccessChain %27 %308 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFMul %307 %310 
                                                      OpStore %196 %311 
                                Uniform f32* %313 = OpAccessChain %27 %312 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFAdd %314 %194 
                                Private f32* %316 = OpAccessChain %65 %120 
                                                      OpStore %316 %315 
                                         f32 %317 = OpLoad %196 
                                Private f32* %318 = OpAccessChain %65 %120 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                                      OpStore %196 %320 
                                         f32 %321 = OpLoad %118 
                                         f32 %322 = OpLoad %196 
                                         f32 %323 = OpFMul %321 %322 
                                Private f32* %324 = OpAccessChain %65 %120 
                                                      OpStore %324 %323 
                                Uniform f32* %328 = OpAccessChain %27 %327 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFNegate %329 
                                         f32 %331 = OpFAdd %330 %194 
                                Private f32* %332 = OpAccessChain %326 %120 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %326 %120 
                                         f32 %334 = OpLoad %333 
                                Private f32* %335 = OpAccessChain %65 %120 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFMul %334 %336 
                                Private f32* %338 = OpAccessChain %65 %120 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %118 
                                         f32 %340 = OpLoad %196 
                                         f32 %341 = OpFMul %339 %340 
                                Private f32* %342 = OpAccessChain %65 %120 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFNegate %343 
                                         f32 %345 = OpFAdd %341 %344 
                                                      OpStore %118 %345 
                              Uniform f32_3* %347 = OpAccessChain %27 %49 
                                       f32_3 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 1 1 1 
                              Uniform f32_4* %351 = OpAccessChain %27 %350 %44 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %349 %353 
                                                      OpStore %326 %354 
                              Uniform f32_4* %355 = OpAccessChain %27 %350 %49 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_3* %358 = OpAccessChain %27 %49 
                                       f32_3 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 0 0 
                                       f32_3 %361 = OpFMul %357 %360 
                                       f32_3 %362 = OpLoad %326 
                                       f32_3 %363 = OpFAdd %361 %362 
                                                      OpStore %326 %363 
                              Uniform f32_4* %364 = OpAccessChain %27 %350 %57 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                              Uniform f32_3* %367 = OpAccessChain %27 %49 
                                       f32_3 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 2 2 2 
                                       f32_3 %370 = OpFMul %366 %369 
                                       f32_3 %371 = OpLoad %326 
                                       f32_3 %372 = OpFAdd %370 %371 
                                                      OpStore %326 %372 
                                       f32_3 %373 = OpLoad %326 
                              Uniform f32_4* %374 = OpAccessChain %27 %350 %67 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFAdd %373 %376 
                                                      OpStore %326 %377 
                                  Input f32* %378 = OpAccessChain %11 %244 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %9 %244 
                                                      OpStore %380 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFNegate %382 
                                       f32_3 %384 = OpLoad %326 
                                       f32_3 %385 = OpFAdd %383 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %9 %387 
                                       f32_3 %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                Private f32* %394 = OpAccessChain %9 %120 
                                                      OpStore %394 %393 
                                Private f32* %397 = OpAccessChain %9 %120 
                                         f32 %398 = OpLoad %397 
                                        bool %399 = OpFOrdLessThan %189 %398 
                                         u32 %401 = OpSelect %399 %400 %120 
                                         i32 %402 = OpBitcast %401 
                                                      OpStore %396 %402 
                                Private f32* %404 = OpAccessChain %9 %120 
                                         f32 %405 = OpLoad %404 
                                        bool %406 = OpFOrdLessThan %405 %189 
                                         u32 %407 = OpSelect %406 %400 %120 
                                         i32 %408 = OpBitcast %407 
                                                      OpStore %403 %408 
                                         i32 %409 = OpLoad %396 
                                         i32 %410 = OpSNegate %409 
                                         i32 %411 = OpLoad %403 
                                         i32 %412 = OpIAdd %410 %411 
                                                      OpStore %403 %412 
                                         i32 %413 = OpLoad %403 
                                         f32 %414 = OpConvertSToF %413 
                                Private f32* %415 = OpAccessChain %9 %120 
                                                      OpStore %415 %414 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                                       f32_3 %418 = OpLoad %389 
                                       f32_3 %419 = OpFMul %417 %418 
                                       f32_4 %420 = OpLoad %9 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                                      OpStore %9 %421 
                                       f32_4 %422 = OpLoad %9 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                              Uniform f32_4* %424 = OpAccessChain %27 %350 %49 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                         f32 %427 = OpDot %423 %426 
                                Private f32* %428 = OpAccessChain %82 %120 
                                                      OpStore %428 %427 
                                       f32_4 %429 = OpLoad %9 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                              Uniform f32_4* %431 = OpAccessChain %27 %350 %44 
                                       f32_4 %432 = OpLoad %431 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                         f32 %434 = OpDot %430 %433 
                                Private f32* %435 = OpAccessChain %82 %103 
                                                      OpStore %435 %434 
                                       f32_4 %436 = OpLoad %9 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                              Uniform f32_4* %438 = OpAccessChain %27 %350 %57 
                                       f32_4 %439 = OpLoad %438 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                         f32 %441 = OpDot %437 %440 
                                Private f32* %442 = OpAccessChain %82 %244 
                                                      OpStore %442 %441 
                                       f32_4 %443 = OpLoad %82 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_4 %445 = OpLoad %82 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                         f32 %447 = OpDot %444 %446 
                                Private f32* %448 = OpAccessChain %9 %120 
                                                      OpStore %448 %447 
                                Private f32* %449 = OpAccessChain %9 %120 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpExtInst %1 32 %450 
                                Private f32* %452 = OpAccessChain %9 %120 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 0 0 0 
                                       f32_4 %455 = OpLoad %82 
                                       f32_4 %456 = OpVectorShuffle %455 %455 0 1 2 2 
                                       f32_4 %457 = OpFMul %454 %456 
                                                      OpStore %82 %457 
                                       f32_4 %458 = OpLoad %40 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                       f32_3 %460 = OpFNegate %459 
                              Uniform f32_3* %461 = OpAccessChain %27 %49 
                                       f32_3 %462 = OpLoad %461 
                                       f32_3 %463 = OpFAdd %460 %462 
                                       f32_4 %464 = OpLoad %9 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %9 %465 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_4 %468 = OpLoad %9 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                         f32 %470 = OpDot %467 %469 
                                                      OpStore %196 %470 
                                         f32 %471 = OpLoad %196 
                                         f32 %472 = OpExtInst %1 32 %471 
                                                      OpStore %196 %472 
                                       f32_4 %473 = OpLoad %9 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
                                         f32 %475 = OpLoad %196 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %326 %477 
                                       f32_4 %478 = OpLoad %82 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 3 
                                       f32_3 %480 = OpLoad %326 
                                         f32 %481 = OpDot %479 %480 
                                                      OpStore %196 %481 
                                         f32 %482 = OpLoad %196 
                                         f32 %483 = OpExtInst %1 4 %482 
                                         f32 %484 = OpLoad %118 
                                         f32 %485 = OpFMul %483 %484 
                                Private f32* %486 = OpAccessChain %65 %120 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %485 %487 
                                 Output f32* %489 = OpAccessChain vs_TEXCOORD5 %103 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %490 
                                       f32_3 %492 = OpVectorShuffle %491 %491 1 1 1 
                              Uniform f32_4* %493 = OpAccessChain %27 %43 %44 
                                       f32_4 %494 = OpLoad %493 
                                       f32_3 %495 = OpVectorShuffle %494 %494 1 2 0 
                                       f32_3 %496 = OpFMul %492 %495 
                                       f32_4 %497 = OpLoad %65 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %65 %498 
                              Uniform f32_4* %499 = OpAccessChain %27 %43 %49 
                                       f32_4 %500 = OpLoad %499 
                                       f32_3 %501 = OpVectorShuffle %500 %500 1 2 0 
                                       f32_4 %502 = OpLoad %490 
                                       f32_3 %503 = OpVectorShuffle %502 %502 0 0 0 
                                       f32_3 %504 = OpFMul %501 %503 
                                       f32_4 %505 = OpLoad %65 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                                       f32_3 %507 = OpFAdd %504 %506 
                                       f32_4 %508 = OpLoad %65 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %65 %509 
                              Uniform f32_4* %510 = OpAccessChain %27 %43 %57 
                                       f32_4 %511 = OpLoad %510 
                                       f32_3 %512 = OpVectorShuffle %511 %511 1 2 0 
                                       f32_4 %513 = OpLoad %490 
                                       f32_3 %514 = OpVectorShuffle %513 %513 2 2 2 
                                       f32_3 %515 = OpFMul %512 %514 
                                       f32_4 %516 = OpLoad %65 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFAdd %515 %517 
                                       f32_4 %519 = OpLoad %65 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %65 %520 
                                       f32_4 %521 = OpLoad %65 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %65 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                         f32 %525 = OpDot %522 %524 
                                                      OpStore %118 %525 
                                         f32 %526 = OpLoad %118 
                                         f32 %527 = OpExtInst %1 32 %526 
                                                      OpStore %118 %527 
                                         f32 %528 = OpLoad %118 
                                       f32_3 %529 = OpCompositeConstruct %528 %528 %528 
                                       f32_4 %530 = OpLoad %65 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                                       f32_3 %532 = OpFMul %529 %531 
                                       f32_4 %533 = OpLoad %65 
                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                                      OpStore %65 %534 
                                       f32_4 %536 = OpLoad %65 
                                       f32_3 %537 = OpVectorShuffle %536 %536 0 1 2 
                                       f32_4 %538 = OpLoad %82 
                                       f32_3 %539 = OpVectorShuffle %538 %538 3 0 1 
                                       f32_3 %540 = OpFMul %537 %539 
                                       f32_4 %541 = OpLoad %535 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 6 3 
                                                      OpStore %535 %542 
                                       f32_4 %543 = OpLoad %82 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %65 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_4 %548 = OpLoad %535 
                                       f32_3 %549 = OpVectorShuffle %548 %548 0 1 2 
                                       f32_3 %550 = OpFNegate %549 
                                       f32_3 %551 = OpFAdd %547 %550 
                                       f32_4 %552 = OpLoad %535 
                                       f32_4 %553 = OpVectorShuffle %552 %551 4 5 6 3 
                                                      OpStore %535 %553 
                                  Input f32* %554 = OpAccessChain %490 %231 
                                         f32 %555 = OpLoad %554 
                                Uniform f32* %557 = OpAccessChain %27 %556 %231 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpFMul %555 %558 
                                                      OpStore %118 %559 
                                         f32 %560 = OpLoad %118 
                                       f32_3 %561 = OpCompositeConstruct %560 %560 %560 
                                       f32_4 %562 = OpLoad %535 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                       f32_3 %564 = OpFMul %561 %563 
                                       f32_4 %565 = OpLoad %535 
                                       f32_4 %566 = OpVectorShuffle %565 %564 4 5 6 3 
                                                      OpStore %535 %566 
                                Private f32* %568 = OpAccessChain %535 %120 
                                         f32 %569 = OpLoad %568 
                                 Output f32* %570 = OpAccessChain vs_TEXCOORD2 %103 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %82 %120 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD2 %244 
                                                      OpStore %573 %572 
                                Private f32* %574 = OpAccessChain %65 %244 
                                         f32 %575 = OpLoad %574 
                                 Output f32* %576 = OpAccessChain vs_TEXCOORD2 %120 
                                                      OpStore %576 %575 
                                Private f32* %577 = OpAccessChain %40 %120 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD2 %231 
                                                      OpStore %579 %578 
                                Private f32* %581 = OpAccessChain %65 %120 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD3 %120 
                                                      OpStore %583 %582 
                                Private f32* %585 = OpAccessChain %65 %103 
                                         f32 %586 = OpLoad %585 
                                 Output f32* %587 = OpAccessChain vs_TEXCOORD4 %120 
                                                      OpStore %587 %586 
                                Private f32* %588 = OpAccessChain %82 %103 
                                         f32 %589 = OpLoad %588 
                                 Output f32* %590 = OpAccessChain vs_TEXCOORD3 %244 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %535 %103 
                                         f32 %592 = OpLoad %591 
                                 Output f32* %593 = OpAccessChain vs_TEXCOORD3 %103 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %535 %244 
                                         f32 %595 = OpLoad %594 
                                 Output f32* %596 = OpAccessChain vs_TEXCOORD4 %103 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %40 %103 
                                         f32 %598 = OpLoad %597 
                                 Output f32* %599 = OpAccessChain vs_TEXCOORD3 %231 
                                                      OpStore %599 %598 
                                Private f32* %600 = OpAccessChain %82 %231 
                                         f32 %601 = OpLoad %600 
                                 Output f32* %602 = OpAccessChain vs_TEXCOORD4 %244 
                                                      OpStore %602 %601 
                                Private f32* %603 = OpAccessChain %40 %244 
                                         f32 %604 = OpLoad %603 
                                 Output f32* %605 = OpAccessChain vs_TEXCOORD4 %231 
                                                      OpStore %605 %604 
                                       f32_4 %608 = OpLoad %607 
                                                      OpStore %606 %608 
                                       f32_4 %609 = OpLoad %9 
                                       f32_3 %610 = OpVectorShuffle %609 %609 1 1 1 
                              Uniform f32_4* %612 = OpAccessChain %27 %611 %44 
                                       f32_4 %613 = OpLoad %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                       f32_3 %615 = OpFMul %610 %614 
                                       f32_4 %616 = OpLoad %65 
                                       f32_4 %617 = OpVectorShuffle %616 %615 4 5 6 3 
                                                      OpStore %65 %617 
                              Uniform f32_4* %618 = OpAccessChain %27 %611 %49 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                       f32_4 %621 = OpLoad %9 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 0 0 
                                       f32_3 %623 = OpFMul %620 %622 
                                       f32_4 %624 = OpLoad %65 
                                       f32_3 %625 = OpVectorShuffle %624 %624 0 1 2 
                                       f32_3 %626 = OpFAdd %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 2 6 
                                                      OpStore %9 %628 
                              Uniform f32_4* %631 = OpAccessChain %27 %611 %57 
                                       f32_4 %632 = OpLoad %631 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 1 2 
                                       f32_4 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 2 2 2 
                                       f32_3 %636 = OpFMul %633 %635 
                                       f32_4 %637 = OpLoad %9 
                                       f32_3 %638 = OpVectorShuffle %637 %637 0 1 3 
                                       f32_3 %639 = OpFAdd %636 %638 
                                                      OpStore vs_TEXCOORD6 %639 
                                       f32_4 %640 = OpLoad %40 
                                       f32_4 %641 = OpVectorShuffle %640 %640 1 1 1 1 
                                       f32_4 %642 = OpFNegate %641 
                              Uniform f32_4* %643 = OpAccessChain %27 %67 
                                       f32_4 %644 = OpLoad %643 
                                       f32_4 %645 = OpFAdd %642 %644 
                                                      OpStore %9 %645 
                                       f32_4 %646 = OpLoad %82 
                                       f32_4 %647 = OpVectorShuffle %646 %646 1 1 1 1 
                                       f32_4 %648 = OpLoad %9 
                                       f32_4 %649 = OpFMul %647 %648 
                                                      OpStore %65 %649 
                                       f32_4 %650 = OpLoad %9 
                                       f32_4 %651 = OpLoad %9 
                                       f32_4 %652 = OpFMul %650 %651 
                                                      OpStore %9 %652 
                                       f32_4 %653 = OpLoad %40 
                                       f32_4 %654 = OpVectorShuffle %653 %653 0 0 0 0 
                                       f32_4 %655 = OpFNegate %654 
                              Uniform f32_4* %656 = OpAccessChain %27 %57 
                                       f32_4 %657 = OpLoad %656 
                                       f32_4 %658 = OpFAdd %655 %657 
                                                      OpStore %535 %658 
                                       f32_4 %659 = OpLoad %40 
                                       f32_4 %660 = OpVectorShuffle %659 %659 2 2 2 2 
                                       f32_4 %661 = OpFNegate %660 
                              Uniform f32_4* %663 = OpAccessChain %27 %662 
                                       f32_4 %664 = OpLoad %663 
                                       f32_4 %665 = OpFAdd %661 %664 
                                                      OpStore %40 %665 
                                       f32_4 %666 = OpLoad %535 
                                       f32_4 %667 = OpLoad %82 
                                       f32_4 %668 = OpVectorShuffle %667 %667 0 0 0 0 
                                       f32_4 %669 = OpFMul %666 %668 
                                       f32_4 %670 = OpLoad %65 
                                       f32_4 %671 = OpFAdd %669 %670 
                                                      OpStore %65 %671 
                                       f32_4 %672 = OpLoad %535 
                                       f32_4 %673 = OpLoad %535 
                                       f32_4 %674 = OpFMul %672 %673 
                                       f32_4 %675 = OpLoad %9 
                                       f32_4 %676 = OpFAdd %674 %675 
                                                      OpStore %9 %676 
                                       f32_4 %677 = OpLoad %40 
                                       f32_4 %678 = OpLoad %40 
                                       f32_4 %679 = OpFMul %677 %678 
                                       f32_4 %680 = OpLoad %9 
                                       f32_4 %681 = OpFAdd %679 %680 
                                                      OpStore %9 %681 
                                       f32_4 %682 = OpLoad %40 
                                       f32_4 %683 = OpLoad %82 
                                       f32_4 %684 = OpVectorShuffle %683 %683 3 3 2 3 
                                       f32_4 %685 = OpFMul %682 %684 
                                       f32_4 %686 = OpLoad %65 
                                       f32_4 %687 = OpFAdd %685 %686 
                                                      OpStore %40 %687 
                                       f32_4 %688 = OpLoad %9 
                                       f32_4 %691 = OpExtInst %1 40 %688 %690 
                                                      OpStore %9 %691 
                                       f32_4 %692 = OpLoad %9 
                                       f32_4 %693 = OpExtInst %1 32 %692 
                                                      OpStore %65 %693 
                                       f32_4 %694 = OpLoad %9 
                              Uniform f32_4* %696 = OpAccessChain %27 %695 
                                       f32_4 %697 = OpLoad %696 
                                       f32_4 %698 = OpFMul %694 %697 
                                       f32_4 %700 = OpFAdd %698 %699 
                                                      OpStore %9 %700 
                                       f32_4 %701 = OpLoad %9 
                                       f32_4 %702 = OpFDiv %699 %701 
                                                      OpStore %9 %702 
                                       f32_4 %703 = OpLoad %40 
                                       f32_4 %704 = OpLoad %65 
                                       f32_4 %705 = OpFMul %703 %704 
                                                      OpStore %40 %705 
                                       f32_4 %706 = OpLoad %40 
                                       f32_4 %708 = OpExtInst %1 40 %706 %707 
                                                      OpStore %40 %708 
                                       f32_4 %709 = OpLoad %9 
                                       f32_4 %710 = OpLoad %40 
                                       f32_4 %711 = OpFMul %709 %710 
                                                      OpStore %9 %711 
                                       f32_4 %712 = OpLoad %9 
                                       f32_3 %713 = OpVectorShuffle %712 %712 1 1 1 
                              Uniform f32_4* %715 = OpAccessChain %27 %714 %44 
                                       f32_4 %716 = OpLoad %715 
                                       f32_3 %717 = OpVectorShuffle %716 %716 0 1 2 
                                       f32_3 %718 = OpFMul %713 %717 
                                       f32_4 %719 = OpLoad %40 
                                       f32_4 %720 = OpVectorShuffle %719 %718 4 5 6 3 
                                                      OpStore %40 %720 
                              Uniform f32_4* %721 = OpAccessChain %27 %714 %49 
                                       f32_4 %722 = OpLoad %721 
                                       f32_3 %723 = OpVectorShuffle %722 %722 0 1 2 
                                       f32_4 %724 = OpLoad %9 
                                       f32_3 %725 = OpVectorShuffle %724 %724 0 0 0 
                                       f32_3 %726 = OpFMul %723 %725 
                                       f32_4 %727 = OpLoad %40 
                                       f32_3 %728 = OpVectorShuffle %727 %727 0 1 2 
                                       f32_3 %729 = OpFAdd %726 %728 
                                       f32_4 %730 = OpLoad %40 
                                       f32_4 %731 = OpVectorShuffle %730 %729 4 5 6 3 
                                                      OpStore %40 %731 
                              Uniform f32_4* %732 = OpAccessChain %27 %714 %57 
                                       f32_4 %733 = OpLoad %732 
                                       f32_3 %734 = OpVectorShuffle %733 %733 0 1 2 
                                       f32_4 %735 = OpLoad %9 
                                       f32_3 %736 = OpVectorShuffle %735 %735 2 2 2 
                                       f32_3 %737 = OpFMul %734 %736 
                                       f32_4 %738 = OpLoad %40 
                                       f32_3 %739 = OpVectorShuffle %738 %738 0 1 2 
                                       f32_3 %740 = OpFAdd %737 %739 
                                       f32_4 %741 = OpLoad %9 
                                       f32_4 %742 = OpVectorShuffle %741 %740 4 5 6 3 
                                                      OpStore %9 %742 
                              Uniform f32_4* %743 = OpAccessChain %27 %714 %67 
                                       f32_4 %744 = OpLoad %743 
                                       f32_3 %745 = OpVectorShuffle %744 %744 0 1 2 
                                       f32_4 %746 = OpLoad %9 
                                       f32_3 %747 = OpVectorShuffle %746 %746 3 3 3 
                                       f32_3 %748 = OpFMul %745 %747 
                                       f32_4 %749 = OpLoad %9 
                                       f32_3 %750 = OpVectorShuffle %749 %749 0 1 2 
                                       f32_3 %751 = OpFAdd %748 %750 
                                       f32_4 %752 = OpLoad %9 
                                       f32_4 %753 = OpVectorShuffle %752 %751 4 5 6 3 
                                                      OpStore %9 %753 
                                       f32_4 %754 = OpLoad %9 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %758 = OpFMul %755 %757 
                                       f32_3 %761 = OpFAdd %758 %760 
                                       f32_4 %762 = OpLoad %40 
                                       f32_4 %763 = OpVectorShuffle %762 %761 4 5 6 3 
                                                      OpStore %40 %763 
                                       f32_4 %764 = OpLoad %9 
                                       f32_3 %765 = OpVectorShuffle %764 %764 0 1 2 
                                       f32_4 %766 = OpLoad %40 
                                       f32_3 %767 = OpVectorShuffle %766 %766 0 1 2 
                                       f32_3 %768 = OpFMul %765 %767 
                                       f32_3 %771 = OpFAdd %768 %770 
                                       f32_4 %772 = OpLoad %40 
                                       f32_4 %773 = OpVectorShuffle %772 %771 4 5 6 3 
                                                      OpStore %40 %773 
                                Private f32* %775 = OpAccessChain %82 %103 
                                         f32 %776 = OpLoad %775 
                                Private f32* %777 = OpAccessChain %82 %103 
                                         f32 %778 = OpLoad %777 
                                         f32 %779 = OpFMul %776 %778 
                                Private f32* %780 = OpAccessChain %774 %120 
                                                      OpStore %780 %779 
                                Private f32* %781 = OpAccessChain %82 %120 
                                         f32 %782 = OpLoad %781 
                                Private f32* %783 = OpAccessChain %82 %120 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpFMul %782 %784 
                                Private f32* %786 = OpAccessChain %774 %120 
                                         f32 %787 = OpLoad %786 
                                         f32 %788 = OpFNegate %787 
                                         f32 %789 = OpFAdd %785 %788 
                                Private f32* %790 = OpAccessChain %774 %120 
                                                      OpStore %790 %789 
                                       f32_4 %792 = OpLoad %82 
                                       f32_4 %793 = OpVectorShuffle %792 %792 1 3 2 0 
                                       f32_4 %794 = OpLoad %82 
                                       f32_4 %795 = OpFMul %793 %794 
                                                      OpStore %791 %795 
                              Uniform f32_4* %798 = OpAccessChain %27 %797 
                                       f32_4 %799 = OpLoad %798 
                                       f32_4 %800 = OpLoad %791 
                                         f32 %801 = OpDot %799 %800 
                                Private f32* %802 = OpAccessChain %796 %120 
                                                      OpStore %802 %801 
                              Uniform f32_4* %804 = OpAccessChain %27 %803 
                                       f32_4 %805 = OpLoad %804 
                                       f32_4 %806 = OpLoad %791 
                                         f32 %807 = OpDot %805 %806 
                                Private f32* %808 = OpAccessChain %796 %103 
                                                      OpStore %808 %807 
                              Uniform f32_4* %810 = OpAccessChain %27 %809 
                                       f32_4 %811 = OpLoad %810 
                                       f32_4 %812 = OpLoad %791 
                                         f32 %813 = OpDot %811 %812 
                                Private f32* %814 = OpAccessChain %796 %244 
                                                      OpStore %814 %813 
                              Uniform f32_4* %816 = OpAccessChain %27 %815 
                                       f32_4 %817 = OpLoad %816 
                                       f32_3 %818 = OpVectorShuffle %817 %817 0 1 2 
                                       f32_3 %819 = OpLoad %774 
                                       f32_3 %820 = OpVectorShuffle %819 %819 0 0 0 
                                       f32_3 %821 = OpFMul %818 %820 
                                       f32_3 %822 = OpLoad %796 
                                       f32_3 %823 = OpFAdd %821 %822 
                                                      OpStore %774 %823 
                                       f32_4 %825 = OpLoad %9 
                                       f32_3 %826 = OpVectorShuffle %825 %825 0 1 2 
                                       f32_4 %827 = OpLoad %40 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 1 2 
                                       f32_3 %829 = OpFMul %826 %828 
                                       f32_3 %830 = OpLoad %774 
                                       f32_3 %831 = OpFAdd %829 %830 
                                                      OpStore vs_TEXCOORD7 %831 
                                 Output f32* %832 = OpAccessChain %107 %49 %103 
                                         f32 %833 = OpLoad %832 
                                         f32 %834 = OpFNegate %833 
                                 Output f32* %835 = OpAccessChain %107 %49 %103 
                                                      OpStore %835 %834 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 837
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %107 %119 %145 %160 %172 %223 %389 %490 %567 %580 %584 %606 %607 %630 %824 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 RelaxedPrecision 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 RelaxedPrecision 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 RelaxedPrecision 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpMemberDecorate %25 10 RelaxedPrecision 
                                                      OpMemberDecorate %25 10 Offset 25 
                                                      OpMemberDecorate %25 11 Offset 25 
                                                      OpMemberDecorate %25 12 Offset 25 
                                                      OpMemberDecorate %25 13 Offset 25 
                                                      OpMemberDecorate %25 14 Offset 25 
                                                      OpMemberDecorate %25 15 Offset 25 
                                                      OpMemberDecorate %25 16 Offset 25 
                                                      OpMemberDecorate %25 17 Offset 25 
                                                      OpMemberDecorate %25 18 Offset 25 
                                                      OpMemberDecorate %25 19 Offset 25 
                                                      OpMemberDecorate %25 20 Offset 25 
                                                      OpMemberDecorate %25 21 Offset 25 
                                                      OpMemberDecorate %25 22 Offset 25 
                                                      OpMemberDecorate %25 23 Offset 25 
                                                      OpMemberDecorate %25 24 Offset 25 
                                                      OpMemberDecorate %25 25 Offset 25 
                                                      OpMemberDecorate %25 26 Offset 25 
                                                      OpMemberDecorate %25 27 Offset 25 
                                                      OpMemberDecorate %25 28 Offset 25 
                                                      OpMemberDecorate %25 29 Offset 25 
                                                      OpMemberDecorate %25 30 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpMemberDecorate %105 0 BuiltIn 105 
                                                      OpMemberDecorate %105 1 BuiltIn 105 
                                                      OpMemberDecorate %105 2 BuiltIn 105 
                                                      OpDecorate %105 Block 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate vs_TEXCOORD0 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 160 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate vs_TEXCOORD5 Location 223 
                                                      OpDecorate %389 Location 389 
                                                      OpDecorate %490 Location 490 
                                                      OpDecorate vs_TEXCOORD2 Location 567 
                                                      OpDecorate vs_TEXCOORD3 Location 580 
                                                      OpDecorate vs_TEXCOORD4 Location 584 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %606 Location 606 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %607 Location 607 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD6 Location 630 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %799 RelaxedPrecision 
                                                      OpDecorate %800 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %817 RelaxedPrecision 
                                                      OpDecorate %818 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 824 
                                                      OpDecorate %830 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeArray %7 %19 
                                              %24 = OpTypeArray %7 %19 
                                              %25 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %7 %7 %7 %7 %20 %21 %7 %22 %23 %6 %24 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 21 
                                              %30 = OpTypePointer Uniform %6 
                                          i32 %33 = OpConstant 22 
                               Private f32_4* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 11 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %7 
                                          i32 %49 = OpConstant 0 
                                          i32 %57 = OpConstant 2 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %67 = OpConstant 3 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 15 
                                         u32 %103 = OpConstant 1 
                                             %104 = OpTypeArray %6 %103 
                                             %105 = OpTypeStruct %7 %6 %104 
                                             %106 = OpTypePointer Output %105 
        Output struct {f32_4; f32; f32[1];}* %107 = OpVariable Output 
                                             %115 = OpTypePointer Output %7 
                                             %117 = OpTypePointer Private %6 
                                Private f32* %118 = OpVariable Private 
                                Input f32_4* %119 = OpVariable Input 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Input %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %140 = OpConstant 3.674022E-40 
                                       f32_2 %141 = OpConstantComposite %140 %140 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                         i32 %148 = OpConstant 29 
                                             %159 = OpTypePointer Output %12 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %163 = OpConstant 30 
                                Input f32_4* %172 = OpVariable Input 
                                         i32 %175 = OpConstant 28 
                                             %186 = OpTypeBool 
                                             %187 = OpTypePointer Private %186 
                               Private bool* %188 = OpVariable Private 
                                         f32 %189 = OpConstant 3.674022E-40 
                                         f32 %194 = OpConstant 3.674022E-40 
                                Private f32* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 18 
                                         i32 %201 = OpConstant 19 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 16 
                                         i32 %219 = OpConstant 20 
                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %225 = OpConstant 3.674022E-40 
                                             %227 = OpTypePointer Output %6 
                                         u32 %231 = OpConstant 3 
                                         u32 %244 = OpConstant 2 
                                         i32 %260 = OpConstant 14 
                                         i32 %281 = OpConstant 24 
                                         i32 %284 = OpConstant 25 
                                         i32 %308 = OpConstant 23 
                                         i32 %312 = OpConstant 27 
                                             %325 = OpTypePointer Private %15 
                              Private f32_3* %326 = OpVariable Private 
                                         i32 %327 = OpConstant 26 
                                             %346 = OpTypePointer Uniform %15 
                                         i32 %350 = OpConstant 12 
                                             %388 = OpTypePointer Input %15 
                                Input f32_3* %389 = OpVariable Input 
                                             %395 = OpTypePointer Private %28 
                                Private i32* %396 = OpVariable Private 
                                         u32 %400 = OpConstant 4294967295 
                                Private i32* %403 = OpVariable Private 
                                Input f32_4* %490 = OpVariable Input 
                              Private f32_4* %535 = OpVariable Private 
                                         i32 %556 = OpConstant 13 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                               Output f32_4* %606 = OpVariable Output 
                                Input f32_4* %607 = OpVariable Input 
                                         i32 %611 = OpConstant 17 
                                             %629 = OpTypePointer Output %15 
                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
                                         i32 %662 = OpConstant 4 
                                         f32 %689 = OpConstant 3.674022E-40 
                                       f32_4 %690 = OpConstantComposite %689 %689 %689 %689 
                                         i32 %695 = OpConstant 5 
                                       f32_4 %699 = OpConstantComposite %194 %194 %194 %194 
                                       f32_4 %707 = OpConstantComposite %189 %189 %189 %189 
                                         i32 %714 = OpConstant 6 
                                         f32 %756 = OpConstant 3.674022E-40 
                                       f32_3 %757 = OpConstantComposite %756 %756 %756 
                                         f32 %759 = OpConstant 3.674022E-40 
                                       f32_3 %760 = OpConstantComposite %759 %759 %759 
                                         f32 %769 = OpConstant 3.674022E-40 
                                       f32_3 %770 = OpConstantComposite %769 %769 %769 
                              Private f32_3* %774 = OpVariable Private 
                              Private f32_4* %791 = OpVariable Private 
                              Private f32_3* %796 = OpVariable Private 
                                         i32 %797 = OpConstant 7 
                                         i32 %803 = OpConstant 8 
                                         i32 %809 = OpConstant 9 
                                         i32 %815 = OpConstant 10 
                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %31 = OpAccessChain %27 %29 
                                          f32 %32 = OpLoad %31 
                                 Uniform f32* %34 = OpAccessChain %27 %33 
                                          f32 %35 = OpLoad %34 
                                        f32_2 %36 = OpCompositeConstruct %32 %35 
                                        f32_2 %37 = OpFAdd %14 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpVectorShuffle %41 %41 1 1 1 1 
                               Uniform f32_4* %46 = OpAccessChain %27 %43 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %42 %47 
                                                      OpStore %40 %48 
                               Uniform f32_4* %50 = OpAccessChain %27 %43 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %52 0 0 0 0 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %40 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %40 %56 
                               Uniform f32_4* %58 = OpAccessChain %27 %43 %57 
                                        f32_4 %59 = OpLoad %58 
                                        f32_4 %60 = OpLoad %11 
                                        f32_4 %61 = OpVectorShuffle %60 %60 2 2 2 2 
                                        f32_4 %62 = OpFMul %59 %61 
                                        f32_4 %63 = OpLoad %40 
                                        f32_4 %64 = OpFAdd %62 %63 
                                                      OpStore %40 %64 
                                        f32_4 %66 = OpLoad %40 
                               Uniform f32_4* %68 = OpAccessChain %27 %43 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFAdd %66 %69 
                                                      OpStore %65 %70 
                               Uniform f32_4* %71 = OpAccessChain %27 %43 %67 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_4 %74 = OpLoad %11 
                                        f32_3 %75 = OpVectorShuffle %74 %74 3 3 3 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %40 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %40 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %40 %81 
                                        f32_4 %83 = OpLoad %65 
                                        f32_4 %84 = OpVectorShuffle %83 %83 1 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %27 %85 %44 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFMul %84 %87 
                                                      OpStore %82 %88 
                               Uniform f32_4* %89 = OpAccessChain %27 %85 %49 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpVectorShuffle %91 %91 0 0 0 0 
                                        f32_4 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %82 
                                        f32_4 %95 = OpFAdd %93 %94 
                                                      OpStore %82 %95 
                               Uniform f32_4* %96 = OpAccessChain %27 %85 %57 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %65 
                                        f32_4 %99 = OpVectorShuffle %98 %98 2 2 2 2 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %82 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %82 %102 
                              Uniform f32_4* %108 = OpAccessChain %27 %85 %67 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %65 
                                       f32_4 %111 = OpVectorShuffle %110 %110 3 3 3 3 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %82 
                                       f32_4 %114 = OpFAdd %112 %113 
                               Output f32_4* %116 = OpAccessChain %107 %49 
                                                      OpStore %116 %114 
                                  Input f32* %122 = OpAccessChain %119 %120 
                                         f32 %123 = OpLoad %122 
                                         f32 %125 = OpFMul %123 %124 
                                                      OpStore %118 %125 
                                         f32 %126 = OpLoad %118 
                                         f32 %127 = OpExtInst %1 8 %126 
                                Private f32* %128 = OpAccessChain %82 %120 
                                                      OpStore %128 %127 
                                Private f32* %129 = OpAccessChain %82 %120 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %133 = OpFMul %131 %132 
                                  Input f32* %134 = OpAccessChain %119 %120 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %133 %135 
                                Private f32* %137 = OpAccessChain %82 %103 
                                                      OpStore %137 %136 
                                       f32_4 %138 = OpLoad %82 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %82 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 2 3 
                                                      OpStore %82 %144 
                                       f32_4 %146 = OpLoad %82 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %149 = OpAccessChain %27 %148 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                                       f32_2 %152 = OpFMul %147 %151 
                              Uniform f32_4* %153 = OpAccessChain %27 %148 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 2 3 
                                       f32_2 %156 = OpFAdd %152 %155 
                                       f32_4 %157 = OpLoad vs_TEXCOORD0 
                                       f32_4 %158 = OpVectorShuffle %157 %156 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %158 
                                       f32_4 %161 = OpLoad %82 
                                       f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                              Uniform f32_4* %164 = OpAccessChain %27 %163 
                                       f32_4 %165 = OpLoad %164 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFMul %162 %166 
                              Uniform f32_4* %168 = OpAccessChain %27 %163 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_2 %171 = OpFAdd %167 %170 
                                                      OpStore vs_TEXCOORD1 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                              Uniform f32_4* %176 = OpAccessChain %27 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                       f32_2 %179 = OpFMul %174 %178 
                              Uniform f32_4* %180 = OpAccessChain %27 %175 
                                       f32_4 %181 = OpLoad %180 
                                       f32_2 %182 = OpVectorShuffle %181 %181 2 3 
                                       f32_2 %183 = OpFAdd %179 %182 
                                       f32_4 %184 = OpLoad vs_TEXCOORD0 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %185 
                                  Input f32* %190 = OpAccessChain %119 %103 
                                         f32 %191 = OpLoad %190 
                                        bool %192 = OpFOrdGreaterThanEqual %189 %191 
                                                      OpStore %188 %192 
                                        bool %193 = OpLoad %188 
                                         f32 %195 = OpSelect %193 %194 %189 
                                                      OpStore %118 %195 
                                Uniform f32* %198 = OpAccessChain %27 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                Uniform f32* %202 = OpAccessChain %27 %201 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %200 %203 
                                                      OpStore %196 %204 
                                         f32 %205 = OpLoad %118 
                                         f32 %206 = OpLoad %196 
                                         f32 %207 = OpFMul %205 %206 
                                Uniform f32* %208 = OpAccessChain %27 %197 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFAdd %207 %209 
                                                      OpStore %118 %210 
                                         f32 %211 = OpLoad %118 
                                         f32 %213 = OpFMul %211 %212 
                                Uniform f32* %215 = OpAccessChain %27 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFAdd %213 %216 
                                                      OpStore %118 %217 
                                         f32 %218 = OpLoad %118 
                                Uniform f32* %220 = OpAccessChain %27 %219 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %218 %221 
                                                      OpStore %118 %222 
                                         f32 %224 = OpLoad %118 
                                         f32 %226 = OpFMul %224 %225 
                                 Output f32* %228 = OpAccessChain vs_TEXCOORD5 %120 
                                                      OpStore %228 %226 
                                Private f32* %229 = OpAccessChain %65 %103 
                                         f32 %230 = OpLoad %229 
                                Uniform f32* %232 = OpAccessChain %27 %85 %44 %231 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFMul %230 %233 
                                                      OpStore %118 %234 
                                Uniform f32* %235 = OpAccessChain %27 %85 %49 %231 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %65 %120 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                         f32 %240 = OpLoad %118 
                                         f32 %241 = OpFAdd %239 %240 
                                                      OpStore %118 %241 
                                Uniform f32* %242 = OpAccessChain %27 %85 %57 %231 
                                         f32 %243 = OpLoad %242 
                                Private f32* %245 = OpAccessChain %65 %244 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFMul %243 %246 
                                         f32 %248 = OpLoad %118 
                                         f32 %249 = OpFAdd %247 %248 
                                                      OpStore %118 %249 
                                Uniform f32* %250 = OpAccessChain %27 %85 %67 %231 
                                         f32 %251 = OpLoad %250 
                                Private f32* %252 = OpAccessChain %65 %231 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                         f32 %255 = OpLoad %118 
                                         f32 %256 = OpFAdd %254 %255 
                                                      OpStore %118 %256 
                              Uniform f32_4* %257 = OpAccessChain %27 %44 
                                       f32_4 %258 = OpLoad %257 
                                       f32_2 %259 = OpVectorShuffle %258 %258 1 1 
                              Uniform f32_4* %261 = OpAccessChain %27 %260 %44 
                                       f32_4 %262 = OpLoad %261 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFMul %259 %263 
                                       f32_4 %265 = OpLoad %65 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 2 3 
                                                      OpStore %65 %266 
                              Uniform f32_4* %267 = OpAccessChain %27 %260 %49 
                                       f32_4 %268 = OpLoad %267 
                                       f32_2 %269 = OpVectorShuffle %268 %268 0 1 
                              Uniform f32_4* %270 = OpAccessChain %27 %44 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 0 
                                       f32_2 %273 = OpFMul %269 %272 
                                       f32_4 %274 = OpLoad %65 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFAdd %273 %275 
                                       f32_4 %277 = OpLoad %65 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %65 %278 
                                       f32_4 %279 = OpLoad %65 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                Uniform f32* %282 = OpAccessChain %27 %281 
                                         f32 %283 = OpLoad %282 
                                Uniform f32* %285 = OpAccessChain %27 %284 
                                         f32 %286 = OpLoad %285 
                                       f32_2 %287 = OpCompositeConstruct %283 %286 
                                       f32_2 %288 = OpFMul %280 %287 
                                       f32_4 %289 = OpLoad %65 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %65 %290 
                                         f32 %291 = OpLoad %118 
                                       f32_2 %292 = OpCompositeConstruct %291 %291 
                                       f32_4 %293 = OpLoad %65 
                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
                                       f32_2 %295 = OpFDiv %292 %294 
                                       f32_4 %296 = OpLoad %65 
                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
                                                      OpStore %65 %297 
                                       f32_4 %298 = OpLoad %65 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                       f32_4 %300 = OpLoad %65 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                         f32 %302 = OpDot %299 %301 
                                                      OpStore %118 %302 
                                         f32 %303 = OpLoad %118 
                                         f32 %304 = OpExtInst %1 32 %303 
                                                      OpStore %118 %304 
                                  Input f32* %305 = OpAccessChain %119 %103 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpExtInst %1 4 %306 
                                Uniform f32* %309 = OpAccessChain %27 %308 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFMul %307 %310 
                                                      OpStore %196 %311 
                                Uniform f32* %313 = OpAccessChain %27 %312 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFAdd %314 %194 
                                Private f32* %316 = OpAccessChain %65 %120 
                                                      OpStore %316 %315 
                                         f32 %317 = OpLoad %196 
                                Private f32* %318 = OpAccessChain %65 %120 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                                      OpStore %196 %320 
                                         f32 %321 = OpLoad %118 
                                         f32 %322 = OpLoad %196 
                                         f32 %323 = OpFMul %321 %322 
                                Private f32* %324 = OpAccessChain %65 %120 
                                                      OpStore %324 %323 
                                Uniform f32* %328 = OpAccessChain %27 %327 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFNegate %329 
                                         f32 %331 = OpFAdd %330 %194 
                                Private f32* %332 = OpAccessChain %326 %120 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %326 %120 
                                         f32 %334 = OpLoad %333 
                                Private f32* %335 = OpAccessChain %65 %120 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFMul %334 %336 
                                Private f32* %338 = OpAccessChain %65 %120 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %118 
                                         f32 %340 = OpLoad %196 
                                         f32 %341 = OpFMul %339 %340 
                                Private f32* %342 = OpAccessChain %65 %120 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFNegate %343 
                                         f32 %345 = OpFAdd %341 %344 
                                                      OpStore %118 %345 
                              Uniform f32_3* %347 = OpAccessChain %27 %49 
                                       f32_3 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 1 1 1 
                              Uniform f32_4* %351 = OpAccessChain %27 %350 %44 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %349 %353 
                                                      OpStore %326 %354 
                              Uniform f32_4* %355 = OpAccessChain %27 %350 %49 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_3* %358 = OpAccessChain %27 %49 
                                       f32_3 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 0 0 
                                       f32_3 %361 = OpFMul %357 %360 
                                       f32_3 %362 = OpLoad %326 
                                       f32_3 %363 = OpFAdd %361 %362 
                                                      OpStore %326 %363 
                              Uniform f32_4* %364 = OpAccessChain %27 %350 %57 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                              Uniform f32_3* %367 = OpAccessChain %27 %49 
                                       f32_3 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 2 2 2 
                                       f32_3 %370 = OpFMul %366 %369 
                                       f32_3 %371 = OpLoad %326 
                                       f32_3 %372 = OpFAdd %370 %371 
                                                      OpStore %326 %372 
                                       f32_3 %373 = OpLoad %326 
                              Uniform f32_4* %374 = OpAccessChain %27 %350 %67 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFAdd %373 %376 
                                                      OpStore %326 %377 
                                  Input f32* %378 = OpAccessChain %11 %244 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %9 %244 
                                                      OpStore %380 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFNegate %382 
                                       f32_3 %384 = OpLoad %326 
                                       f32_3 %385 = OpFAdd %383 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %9 %387 
                                       f32_3 %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                Private f32* %394 = OpAccessChain %9 %120 
                                                      OpStore %394 %393 
                                Private f32* %397 = OpAccessChain %9 %120 
                                         f32 %398 = OpLoad %397 
                                        bool %399 = OpFOrdLessThan %189 %398 
                                         u32 %401 = OpSelect %399 %400 %120 
                                         i32 %402 = OpBitcast %401 
                                                      OpStore %396 %402 
                                Private f32* %404 = OpAccessChain %9 %120 
                                         f32 %405 = OpLoad %404 
                                        bool %406 = OpFOrdLessThan %405 %189 
                                         u32 %407 = OpSelect %406 %400 %120 
                                         i32 %408 = OpBitcast %407 
                                                      OpStore %403 %408 
                                         i32 %409 = OpLoad %396 
                                         i32 %410 = OpSNegate %409 
                                         i32 %411 = OpLoad %403 
                                         i32 %412 = OpIAdd %410 %411 
                                                      OpStore %403 %412 
                                         i32 %413 = OpLoad %403 
                                         f32 %414 = OpConvertSToF %413 
                                Private f32* %415 = OpAccessChain %9 %120 
                                                      OpStore %415 %414 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                                       f32_3 %418 = OpLoad %389 
                                       f32_3 %419 = OpFMul %417 %418 
                                       f32_4 %420 = OpLoad %9 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                                      OpStore %9 %421 
                                       f32_4 %422 = OpLoad %9 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                              Uniform f32_4* %424 = OpAccessChain %27 %350 %49 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                         f32 %427 = OpDot %423 %426 
                                Private f32* %428 = OpAccessChain %82 %120 
                                                      OpStore %428 %427 
                                       f32_4 %429 = OpLoad %9 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                              Uniform f32_4* %431 = OpAccessChain %27 %350 %44 
                                       f32_4 %432 = OpLoad %431 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                         f32 %434 = OpDot %430 %433 
                                Private f32* %435 = OpAccessChain %82 %103 
                                                      OpStore %435 %434 
                                       f32_4 %436 = OpLoad %9 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                              Uniform f32_4* %438 = OpAccessChain %27 %350 %57 
                                       f32_4 %439 = OpLoad %438 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                         f32 %441 = OpDot %437 %440 
                                Private f32* %442 = OpAccessChain %82 %244 
                                                      OpStore %442 %441 
                                       f32_4 %443 = OpLoad %82 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_4 %445 = OpLoad %82 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                         f32 %447 = OpDot %444 %446 
                                Private f32* %448 = OpAccessChain %9 %120 
                                                      OpStore %448 %447 
                                Private f32* %449 = OpAccessChain %9 %120 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpExtInst %1 32 %450 
                                Private f32* %452 = OpAccessChain %9 %120 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 0 0 0 
                                       f32_4 %455 = OpLoad %82 
                                       f32_4 %456 = OpVectorShuffle %455 %455 0 1 2 2 
                                       f32_4 %457 = OpFMul %454 %456 
                                                      OpStore %82 %457 
                                       f32_4 %458 = OpLoad %40 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                       f32_3 %460 = OpFNegate %459 
                              Uniform f32_3* %461 = OpAccessChain %27 %49 
                                       f32_3 %462 = OpLoad %461 
                                       f32_3 %463 = OpFAdd %460 %462 
                                       f32_4 %464 = OpLoad %9 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %9 %465 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_4 %468 = OpLoad %9 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                         f32 %470 = OpDot %467 %469 
                                                      OpStore %196 %470 
                                         f32 %471 = OpLoad %196 
                                         f32 %472 = OpExtInst %1 32 %471 
                                                      OpStore %196 %472 
                                       f32_4 %473 = OpLoad %9 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
                                         f32 %475 = OpLoad %196 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %326 %477 
                                       f32_4 %478 = OpLoad %82 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 3 
                                       f32_3 %480 = OpLoad %326 
                                         f32 %481 = OpDot %479 %480 
                                                      OpStore %196 %481 
                                         f32 %482 = OpLoad %196 
                                         f32 %483 = OpExtInst %1 4 %482 
                                         f32 %484 = OpLoad %118 
                                         f32 %485 = OpFMul %483 %484 
                                Private f32* %486 = OpAccessChain %65 %120 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %485 %487 
                                 Output f32* %489 = OpAccessChain vs_TEXCOORD5 %103 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %490 
                                       f32_3 %492 = OpVectorShuffle %491 %491 1 1 1 
                              Uniform f32_4* %493 = OpAccessChain %27 %43 %44 
                                       f32_4 %494 = OpLoad %493 
                                       f32_3 %495 = OpVectorShuffle %494 %494 1 2 0 
                                       f32_3 %496 = OpFMul %492 %495 
                                       f32_4 %497 = OpLoad %65 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %65 %498 
                              Uniform f32_4* %499 = OpAccessChain %27 %43 %49 
                                       f32_4 %500 = OpLoad %499 
                                       f32_3 %501 = OpVectorShuffle %500 %500 1 2 0 
                                       f32_4 %502 = OpLoad %490 
                                       f32_3 %503 = OpVectorShuffle %502 %502 0 0 0 
                                       f32_3 %504 = OpFMul %501 %503 
                                       f32_4 %505 = OpLoad %65 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                                       f32_3 %507 = OpFAdd %504 %506 
                                       f32_4 %508 = OpLoad %65 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %65 %509 
                              Uniform f32_4* %510 = OpAccessChain %27 %43 %57 
                                       f32_4 %511 = OpLoad %510 
                                       f32_3 %512 = OpVectorShuffle %511 %511 1 2 0 
                                       f32_4 %513 = OpLoad %490 
                                       f32_3 %514 = OpVectorShuffle %513 %513 2 2 2 
                                       f32_3 %515 = OpFMul %512 %514 
                                       f32_4 %516 = OpLoad %65 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFAdd %515 %517 
                                       f32_4 %519 = OpLoad %65 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %65 %520 
                                       f32_4 %521 = OpLoad %65 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %65 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                         f32 %525 = OpDot %522 %524 
                                                      OpStore %118 %525 
                                         f32 %526 = OpLoad %118 
                                         f32 %527 = OpExtInst %1 32 %526 
                                                      OpStore %118 %527 
                                         f32 %528 = OpLoad %118 
                                       f32_3 %529 = OpCompositeConstruct %528 %528 %528 
                                       f32_4 %530 = OpLoad %65 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                                       f32_3 %532 = OpFMul %529 %531 
                                       f32_4 %533 = OpLoad %65 
                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                                      OpStore %65 %534 
                                       f32_4 %536 = OpLoad %65 
                                       f32_3 %537 = OpVectorShuffle %536 %536 0 1 2 
                                       f32_4 %538 = OpLoad %82 
                                       f32_3 %539 = OpVectorShuffle %538 %538 3 0 1 
                                       f32_3 %540 = OpFMul %537 %539 
                                       f32_4 %541 = OpLoad %535 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 6 3 
                                                      OpStore %535 %542 
                                       f32_4 %543 = OpLoad %82 
                                       f32_3 %544 = OpVectorShuffle %543 %543 1 3 0 
                                       f32_4 %545 = OpLoad %65 
                                       f32_3 %546 = OpVectorShuffle %545 %545 1 2 0 
                                       f32_3 %547 = OpFMul %544 %546 
                                       f32_4 %548 = OpLoad %535 
                                       f32_3 %549 = OpVectorShuffle %548 %548 0 1 2 
                                       f32_3 %550 = OpFNegate %549 
                                       f32_3 %551 = OpFAdd %547 %550 
                                       f32_4 %552 = OpLoad %535 
                                       f32_4 %553 = OpVectorShuffle %552 %551 4 5 6 3 
                                                      OpStore %535 %553 
                                  Input f32* %554 = OpAccessChain %490 %231 
                                         f32 %555 = OpLoad %554 
                                Uniform f32* %557 = OpAccessChain %27 %556 %231 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpFMul %555 %558 
                                                      OpStore %118 %559 
                                         f32 %560 = OpLoad %118 
                                       f32_3 %561 = OpCompositeConstruct %560 %560 %560 
                                       f32_4 %562 = OpLoad %535 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                       f32_3 %564 = OpFMul %561 %563 
                                       f32_4 %565 = OpLoad %535 
                                       f32_4 %566 = OpVectorShuffle %565 %564 4 5 6 3 
                                                      OpStore %535 %566 
                                Private f32* %568 = OpAccessChain %535 %120 
                                         f32 %569 = OpLoad %568 
                                 Output f32* %570 = OpAccessChain vs_TEXCOORD2 %103 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %82 %120 
                                         f32 %572 = OpLoad %571 
                                 Output f32* %573 = OpAccessChain vs_TEXCOORD2 %244 
                                                      OpStore %573 %572 
                                Private f32* %574 = OpAccessChain %65 %244 
                                         f32 %575 = OpLoad %574 
                                 Output f32* %576 = OpAccessChain vs_TEXCOORD2 %120 
                                                      OpStore %576 %575 
                                Private f32* %577 = OpAccessChain %40 %120 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD2 %231 
                                                      OpStore %579 %578 
                                Private f32* %581 = OpAccessChain %65 %120 
                                         f32 %582 = OpLoad %581 
                                 Output f32* %583 = OpAccessChain vs_TEXCOORD3 %120 
                                                      OpStore %583 %582 
                                Private f32* %585 = OpAccessChain %65 %103 
                                         f32 %586 = OpLoad %585 
                                 Output f32* %587 = OpAccessChain vs_TEXCOORD4 %120 
                                                      OpStore %587 %586 
                                Private f32* %588 = OpAccessChain %82 %103 
                                         f32 %589 = OpLoad %588 
                                 Output f32* %590 = OpAccessChain vs_TEXCOORD3 %244 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %535 %103 
                                         f32 %592 = OpLoad %591 
                                 Output f32* %593 = OpAccessChain vs_TEXCOORD3 %103 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %535 %244 
                                         f32 %595 = OpLoad %594 
                                 Output f32* %596 = OpAccessChain vs_TEXCOORD4 %103 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %40 %103 
                                         f32 %598 = OpLoad %597 
                                 Output f32* %599 = OpAccessChain vs_TEXCOORD3 %231 
                                                      OpStore %599 %598 
                                Private f32* %600 = OpAccessChain %82 %231 
                                         f32 %601 = OpLoad %600 
                                 Output f32* %602 = OpAccessChain vs_TEXCOORD4 %244 
                                                      OpStore %602 %601 
                                Private f32* %603 = OpAccessChain %40 %244 
                                         f32 %604 = OpLoad %603 
                                 Output f32* %605 = OpAccessChain vs_TEXCOORD4 %231 
                                                      OpStore %605 %604 
                                       f32_4 %608 = OpLoad %607 
                                                      OpStore %606 %608 
                                       f32_4 %609 = OpLoad %9 
                                       f32_3 %610 = OpVectorShuffle %609 %609 1 1 1 
                              Uniform f32_4* %612 = OpAccessChain %27 %611 %44 
                                       f32_4 %613 = OpLoad %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                       f32_3 %615 = OpFMul %610 %614 
                                       f32_4 %616 = OpLoad %65 
                                       f32_4 %617 = OpVectorShuffle %616 %615 4 5 6 3 
                                                      OpStore %65 %617 
                              Uniform f32_4* %618 = OpAccessChain %27 %611 %49 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                       f32_4 %621 = OpLoad %9 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 0 0 
                                       f32_3 %623 = OpFMul %620 %622 
                                       f32_4 %624 = OpLoad %65 
                                       f32_3 %625 = OpVectorShuffle %624 %624 0 1 2 
                                       f32_3 %626 = OpFAdd %623 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 2 6 
                                                      OpStore %9 %628 
                              Uniform f32_4* %631 = OpAccessChain %27 %611 %57 
                                       f32_4 %632 = OpLoad %631 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 1 2 
                                       f32_4 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 2 2 2 
                                       f32_3 %636 = OpFMul %633 %635 
                                       f32_4 %637 = OpLoad %9 
                                       f32_3 %638 = OpVectorShuffle %637 %637 0 1 3 
                                       f32_3 %639 = OpFAdd %636 %638 
                                                      OpStore vs_TEXCOORD6 %639 
                                       f32_4 %640 = OpLoad %40 
                                       f32_4 %641 = OpVectorShuffle %640 %640 1 1 1 1 
                                       f32_4 %642 = OpFNegate %641 
                              Uniform f32_4* %643 = OpAccessChain %27 %67 
                                       f32_4 %644 = OpLoad %643 
                                       f32_4 %645 = OpFAdd %642 %644 
                                                      OpStore %9 %645 
                                       f32_4 %646 = OpLoad %82 
                                       f32_4 %647 = OpVectorShuffle %646 %646 1 1 1 1 
                                       f32_4 %648 = OpLoad %9 
                                       f32_4 %649 = OpFMul %647 %648 
                                                      OpStore %65 %649 
                                       f32_4 %650 = OpLoad %9 
                                       f32_4 %651 = OpLoad %9 
                                       f32_4 %652 = OpFMul %650 %651 
                                                      OpStore %9 %652 
                                       f32_4 %653 = OpLoad %40 
                                       f32_4 %654 = OpVectorShuffle %653 %653 0 0 0 0 
                                       f32_4 %655 = OpFNegate %654 
                              Uniform f32_4* %656 = OpAccessChain %27 %57 
                                       f32_4 %657 = OpLoad %656 
                                       f32_4 %658 = OpFAdd %655 %657 
                                                      OpStore %535 %658 
                                       f32_4 %659 = OpLoad %40 
                                       f32_4 %660 = OpVectorShuffle %659 %659 2 2 2 2 
                                       f32_4 %661 = OpFNegate %660 
                              Uniform f32_4* %663 = OpAccessChain %27 %662 
                                       f32_4 %664 = OpLoad %663 
                                       f32_4 %665 = OpFAdd %661 %664 
                                                      OpStore %40 %665 
                                       f32_4 %666 = OpLoad %535 
                                       f32_4 %667 = OpLoad %82 
                                       f32_4 %668 = OpVectorShuffle %667 %667 0 0 0 0 
                                       f32_4 %669 = OpFMul %666 %668 
                                       f32_4 %670 = OpLoad %65 
                                       f32_4 %671 = OpFAdd %669 %670 
                                                      OpStore %65 %671 
                                       f32_4 %672 = OpLoad %535 
                                       f32_4 %673 = OpLoad %535 
                                       f32_4 %674 = OpFMul %672 %673 
                                       f32_4 %675 = OpLoad %9 
                                       f32_4 %676 = OpFAdd %674 %675 
                                                      OpStore %9 %676 
                                       f32_4 %677 = OpLoad %40 
                                       f32_4 %678 = OpLoad %40 
                                       f32_4 %679 = OpFMul %677 %678 
                                       f32_4 %680 = OpLoad %9 
                                       f32_4 %681 = OpFAdd %679 %680 
                                                      OpStore %9 %681 
                                       f32_4 %682 = OpLoad %40 
                                       f32_4 %683 = OpLoad %82 
                                       f32_4 %684 = OpVectorShuffle %683 %683 3 3 2 3 
                                       f32_4 %685 = OpFMul %682 %684 
                                       f32_4 %686 = OpLoad %65 
                                       f32_4 %687 = OpFAdd %685 %686 
                                                      OpStore %40 %687 
                                       f32_4 %688 = OpLoad %9 
                                       f32_4 %691 = OpExtInst %1 40 %688 %690 
                                                      OpStore %9 %691 
                                       f32_4 %692 = OpLoad %9 
                                       f32_4 %693 = OpExtInst %1 32 %692 
                                                      OpStore %65 %693 
                                       f32_4 %694 = OpLoad %9 
                              Uniform f32_4* %696 = OpAccessChain %27 %695 
                                       f32_4 %697 = OpLoad %696 
                                       f32_4 %698 = OpFMul %694 %697 
                                       f32_4 %700 = OpFAdd %698 %699 
                                                      OpStore %9 %700 
                                       f32_4 %701 = OpLoad %9 
                                       f32_4 %702 = OpFDiv %699 %701 
                                                      OpStore %9 %702 
                                       f32_4 %703 = OpLoad %40 
                                       f32_4 %704 = OpLoad %65 
                                       f32_4 %705 = OpFMul %703 %704 
                                                      OpStore %40 %705 
                                       f32_4 %706 = OpLoad %40 
                                       f32_4 %708 = OpExtInst %1 40 %706 %707 
                                                      OpStore %40 %708 
                                       f32_4 %709 = OpLoad %9 
                                       f32_4 %710 = OpLoad %40 
                                       f32_4 %711 = OpFMul %709 %710 
                                                      OpStore %9 %711 
                                       f32_4 %712 = OpLoad %9 
                                       f32_3 %713 = OpVectorShuffle %712 %712 1 1 1 
                              Uniform f32_4* %715 = OpAccessChain %27 %714 %44 
                                       f32_4 %716 = OpLoad %715 
                                       f32_3 %717 = OpVectorShuffle %716 %716 0 1 2 
                                       f32_3 %718 = OpFMul %713 %717 
                                       f32_4 %719 = OpLoad %40 
                                       f32_4 %720 = OpVectorShuffle %719 %718 4 5 6 3 
                                                      OpStore %40 %720 
                              Uniform f32_4* %721 = OpAccessChain %27 %714 %49 
                                       f32_4 %722 = OpLoad %721 
                                       f32_3 %723 = OpVectorShuffle %722 %722 0 1 2 
                                       f32_4 %724 = OpLoad %9 
                                       f32_3 %725 = OpVectorShuffle %724 %724 0 0 0 
                                       f32_3 %726 = OpFMul %723 %725 
                                       f32_4 %727 = OpLoad %40 
                                       f32_3 %728 = OpVectorShuffle %727 %727 0 1 2 
                                       f32_3 %729 = OpFAdd %726 %728 
                                       f32_4 %730 = OpLoad %40 
                                       f32_4 %731 = OpVectorShuffle %730 %729 4 5 6 3 
                                                      OpStore %40 %731 
                              Uniform f32_4* %732 = OpAccessChain %27 %714 %57 
                                       f32_4 %733 = OpLoad %732 
                                       f32_3 %734 = OpVectorShuffle %733 %733 0 1 2 
                                       f32_4 %735 = OpLoad %9 
                                       f32_3 %736 = OpVectorShuffle %735 %735 2 2 2 
                                       f32_3 %737 = OpFMul %734 %736 
                                       f32_4 %738 = OpLoad %40 
                                       f32_3 %739 = OpVectorShuffle %738 %738 0 1 2 
                                       f32_3 %740 = OpFAdd %737 %739 
                                       f32_4 %741 = OpLoad %9 
                                       f32_4 %742 = OpVectorShuffle %741 %740 4 5 6 3 
                                                      OpStore %9 %742 
                              Uniform f32_4* %743 = OpAccessChain %27 %714 %67 
                                       f32_4 %744 = OpLoad %743 
                                       f32_3 %745 = OpVectorShuffle %744 %744 0 1 2 
                                       f32_4 %746 = OpLoad %9 
                                       f32_3 %747 = OpVectorShuffle %746 %746 3 3 3 
                                       f32_3 %748 = OpFMul %745 %747 
                                       f32_4 %749 = OpLoad %9 
                                       f32_3 %750 = OpVectorShuffle %749 %749 0 1 2 
                                       f32_3 %751 = OpFAdd %748 %750 
                                       f32_4 %752 = OpLoad %9 
                                       f32_4 %753 = OpVectorShuffle %752 %751 4 5 6 3 
                                                      OpStore %9 %753 
                                       f32_4 %754 = OpLoad %9 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %758 = OpFMul %755 %757 
                                       f32_3 %761 = OpFAdd %758 %760 
                                       f32_4 %762 = OpLoad %40 
                                       f32_4 %763 = OpVectorShuffle %762 %761 4 5 6 3 
                                                      OpStore %40 %763 
                                       f32_4 %764 = OpLoad %9 
                                       f32_3 %765 = OpVectorShuffle %764 %764 0 1 2 
                                       f32_4 %766 = OpLoad %40 
                                       f32_3 %767 = OpVectorShuffle %766 %766 0 1 2 
                                       f32_3 %768 = OpFMul %765 %767 
                                       f32_3 %771 = OpFAdd %768 %770 
                                       f32_4 %772 = OpLoad %40 
                                       f32_4 %773 = OpVectorShuffle %772 %771 4 5 6 3 
                                                      OpStore %40 %773 
                                Private f32* %775 = OpAccessChain %82 %103 
                                         f32 %776 = OpLoad %775 
                                Private f32* %777 = OpAccessChain %82 %103 
                                         f32 %778 = OpLoad %777 
                                         f32 %779 = OpFMul %776 %778 
                                Private f32* %780 = OpAccessChain %774 %120 
                                                      OpStore %780 %779 
                                Private f32* %781 = OpAccessChain %82 %120 
                                         f32 %782 = OpLoad %781 
                                Private f32* %783 = OpAccessChain %82 %120 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpFMul %782 %784 
                                Private f32* %786 = OpAccessChain %774 %120 
                                         f32 %787 = OpLoad %786 
                                         f32 %788 = OpFNegate %787 
                                         f32 %789 = OpFAdd %785 %788 
                                Private f32* %790 = OpAccessChain %774 %120 
                                                      OpStore %790 %789 
                                       f32_4 %792 = OpLoad %82 
                                       f32_4 %793 = OpVectorShuffle %792 %792 1 3 2 0 
                                       f32_4 %794 = OpLoad %82 
                                       f32_4 %795 = OpFMul %793 %794 
                                                      OpStore %791 %795 
                              Uniform f32_4* %798 = OpAccessChain %27 %797 
                                       f32_4 %799 = OpLoad %798 
                                       f32_4 %800 = OpLoad %791 
                                         f32 %801 = OpDot %799 %800 
                                Private f32* %802 = OpAccessChain %796 %120 
                                                      OpStore %802 %801 
                              Uniform f32_4* %804 = OpAccessChain %27 %803 
                                       f32_4 %805 = OpLoad %804 
                                       f32_4 %806 = OpLoad %791 
                                         f32 %807 = OpDot %805 %806 
                                Private f32* %808 = OpAccessChain %796 %103 
                                                      OpStore %808 %807 
                              Uniform f32_4* %810 = OpAccessChain %27 %809 
                                       f32_4 %811 = OpLoad %810 
                                       f32_4 %812 = OpLoad %791 
                                         f32 %813 = OpDot %811 %812 
                                Private f32* %814 = OpAccessChain %796 %244 
                                                      OpStore %814 %813 
                              Uniform f32_4* %816 = OpAccessChain %27 %815 
                                       f32_4 %817 = OpLoad %816 
                                       f32_3 %818 = OpVectorShuffle %817 %817 0 1 2 
                                       f32_3 %819 = OpLoad %774 
                                       f32_3 %820 = OpVectorShuffle %819 %819 0 0 0 
                                       f32_3 %821 = OpFMul %818 %820 
                                       f32_3 %822 = OpLoad %796 
                                       f32_3 %823 = OpFAdd %821 %822 
                                                      OpStore %774 %823 
                                       f32_4 %825 = OpLoad %9 
                                       f32_3 %826 = OpVectorShuffle %825 %825 0 1 2 
                                       f32_4 %827 = OpLoad %40 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 1 2 
                                       f32_3 %829 = OpFMul %826 %828 
                                       f32_3 %830 = OpLoad %774 
                                       f32_3 %831 = OpFAdd %829 %830 
                                                      OpStore vs_TEXCOORD7 %831 
                                 Output f32* %832 = OpAccessChain %107 %49 %103 
                                         f32 %833 = OpLoad %832 
                                         f32 %834 = OpFNegate %833 
                                 Output f32* %835 = OpAccessChain %107 %49 %103 
                                                      OpStore %835 %834 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %43 %121 %144 %298 %304 %309 %313 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 43 
                                                      OpMemberDecorate %59 0 Offset 59 
                                                      OpMemberDecorate %59 1 RelaxedPrecision 
                                                      OpMemberDecorate %59 1 Offset 59 
                                                      OpMemberDecorate %59 2 RelaxedPrecision 
                                                      OpMemberDecorate %59 2 Offset 59 
                                                      OpMemberDecorate %59 3 RelaxedPrecision 
                                                      OpMemberDecorate %59 3 Offset 59 
                                                      OpMemberDecorate %59 4 RelaxedPrecision 
                                                      OpMemberDecorate %59 4 Offset 59 
                                                      OpMemberDecorate %59 5 RelaxedPrecision 
                                                      OpMemberDecorate %59 5 Offset 59 
                                                      OpMemberDecorate %59 6 Offset 59 
                                                      OpMemberDecorate %59 7 Offset 59 
                                                      OpMemberDecorate %59 8 RelaxedPrecision 
                                                      OpMemberDecorate %59 8 Offset 59 
                                                      OpMemberDecorate %59 9 Offset 59 
                                                      OpMemberDecorate %59 10 Offset 59 
                                                      OpMemberDecorate %59 11 Offset 59 
                                                      OpMemberDecorate %59 12 RelaxedPrecision 
                                                      OpMemberDecorate %59 12 Offset 59 
                                                      OpMemberDecorate %59 13 Offset 59 
                                                      OpMemberDecorate %59 14 Offset 59 
                                                      OpDecorate %59 Block 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 121 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 DescriptorSet 126 
                                                      OpDecorate %126 Binding 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %128 DescriptorSet 128 
                                                      OpDecorate %128 Binding 128 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 304 
                                                      OpDecorate vs_TEXCOORD3 Location 309 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 359 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 3 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %32 = OpVariable Private 
                                          f32 %36 = OpConstant 3.674022E-40 
                               Private f32_4* %39 = OpVariable Private 
                                              %42 = OpTypePointer Input %22 
                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
                                              %44 = OpTypePointer Input %6 
                                          u32 %52 = OpConstant 1 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeStruct %7 %7 %7 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %61 = OpVariable Uniform 
                                              %62 = OpTypeInt 32 1 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %6 
                                          i32 %67 = OpConstant 14 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
                                 Private f32* %98 = OpVariable Private 
                                         i32 %108 = OpConstant 10 
                                         i32 %111 = OpConstant 11 
                                         i32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
        UniformConstant read_only Texture2D* %126 = OpVariable UniformConstant 
                    UniformConstant sampler* %128 = OpVariable UniformConstant 
                                         i32 %136 = OpConstant 12 
                              Private f32_4* %143 = OpVariable Private 
                                Input f32_4* %144 = OpVariable Input 
                                Private f32* %151 = OpVariable Private 
                                             %157 = OpTypePointer Private %22 
                              Private f32_2* %158 = OpVariable Private 
                                         i32 %159 = OpConstant 6 
                                         i32 %162 = OpConstant 7 
                              Private f32_4* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %174 = OpVariable UniformConstant 
                    UniformConstant sampler* %176 = OpVariable UniformConstant 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                Private f32* %243 = OpVariable Private 
                                         i32 %244 = OpConstant 9 
                                Private f32* %250 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %289 = OpConstant 3.674022E-40 
                                             %297 = OpTypePointer Output %7 
                               Output f32_4* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %6 
                              Private f32_3* %303 = OpVariable Private 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         u32 %305 = OpConstant 2 
                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
                                Private f32* %317 = OpVariable Private 
                                         i32 %331 = OpConstant 1 
                                         i32 %338 = OpConstant 2 
                                         i32 %344 = OpConstant 3 
                                         i32 %350 = OpConstant 4 
                                             %358 = OpTypePointer Input %88 
                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
                                       f32_4 %365 = OpConstantComposite %84 %84 %84 %84 
                                         f32 %374 = OpConstant 3.674022E-40 
                                       f32_3 %375 = OpConstantComposite %374 %374 %374 
                                         f32 %386 = OpConstant 3.674022E-40 
                                       f32_3 %387 = OpConstantComposite %386 %386 %386 
                                         f32 %389 = OpConstant 3.674022E-40 
                                       f32_3 %390 = OpConstantComposite %389 %389 %389 
                                       f32_3 %396 = OpConstantComposite %84 %84 %84 
                                         i32 %405 = OpConstant 5 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 3 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %33 = OpAccessChain %9 %29 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %37 = OpFAdd %35 %36 
                                 Private f32* %38 = OpAccessChain %32 %29 
                                                      OpStore %38 %37 
                                 Private f32* %40 = OpAccessChain %32 %29 
                                          f32 %41 = OpLoad %40 
                                   Input f32* %45 = OpAccessChain vs_TEXCOORD5 %29 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFNegate %46 
                                          f32 %48 = OpFAdd %41 %47 
                                 Private f32* %49 = OpAccessChain %39 %29 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %39 %29 
                                          f32 %51 = OpLoad %50 
                                   Input f32* %53 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFMul %51 %54 
                                          f32 %56 = OpFAdd %55 %36 
                                 Private f32* %57 = OpAccessChain %39 %29 
                                                      OpStore %57 %56 
                                 Uniform f32* %65 = OpAccessChain %61 %63 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %68 = OpAccessChain %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %66 %69 
                                                      OpStore %58 %70 
                                          f32 %71 = OpLoad %58 
                                   Input f32* %72 = OpAccessChain vs_TEXCOORD5 %52 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                                      OpStore %58 %74 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFMul %76 %36 
                                 Private f32* %78 = OpAccessChain %39 %29 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFAdd %77 %79 
                                 Private f32* %81 = OpAccessChain %75 %29 
                                                      OpStore %81 %80 
                                 Private f32* %82 = OpAccessChain %75 %29 
                                          f32 %83 = OpLoad %82 
                                          f32 %86 = OpExtInst %1 43 %83 %84 %85 
                                 Private f32* %87 = OpAccessChain %75 %29 
                                                      OpStore %87 %86 
                                          f32 %91 = OpLoad %58 
                                          f32 %92 = OpFNegate %91 
                                          f32 %93 = OpFMul %92 %36 
                                 Private f32* %94 = OpAccessChain %39 %29 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %90 %29 
                                                      OpStore %97 %96 
                                          f32 %99 = OpLoad %58 
                                         f32 %100 = OpExtInst %1 37 %99 %85 
                                                      OpStore %98 %100 
                                         f32 %101 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 31 %101 
                                                      OpStore %98 %102 
                                         f32 %103 = OpLoad %98 
                                Private f32* %104 = OpAccessChain %75 %29 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %75 %29 
                                                      OpStore %107 %106 
                                Uniform f32* %109 = OpAccessChain %61 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %61 %111 
                                         f32 %113 = OpLoad %112 
                                       f32_2 %114 = OpCompositeConstruct %110 %113 
                              Uniform f32_4* %117 = OpAccessChain %61 %115 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 1 
                                       f32_2 %120 = OpFMul %114 %119 
                                       f32_2 %122 = OpLoad vs_TEXCOORD1 
                                       f32_2 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %39 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %39 %125 
                         read_only Texture2D %127 = OpLoad %126 
                                     sampler %129 = OpLoad %128 
                  read_only Texture2DSampled %130 = OpSampledImage %127 %129 
                                       f32_4 %131 = OpLoad %39 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %61 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFMul %135 %139 
                                       f32_4 %141 = OpLoad %32 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %32 %142 
                                  Input f32* %145 = OpAccessChain %144 %27 
                                         f32 %146 = OpLoad %145 
                                Uniform f32* %147 = OpAccessChain %61 %136 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %143 %29 
                                                      OpStore %150 %149 
                                Private f32* %152 = OpAccessChain %9 %27 
                                         f32 %153 = OpLoad %152 
                                Private f32* %154 = OpAccessChain %143 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                                      OpStore %151 %156 
                                Uniform f32* %160 = OpAccessChain %61 %159 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %61 %162 
                                         f32 %164 = OpLoad %163 
                                       f32_2 %165 = OpCompositeConstruct %161 %164 
                              Uniform f32_4* %166 = OpAccessChain %61 %115 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                                       f32_2 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad vs_TEXCOORD0 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %169 %171 
                                                      OpStore %158 %172 
                         read_only Texture2D %175 = OpLoad %174 
                                     sampler %177 = OpLoad %176 
                  read_only Texture2DSampled %178 = OpSampledImage %175 %177 
                                       f32_2 %179 = OpLoad %158 
                                       f32_4 %180 = OpImageSampleImplicitLod %178 %179 
                                                      OpStore %173 %180 
                                       f32_4 %182 = OpLoad %144 
                              Uniform f32_4* %184 = OpAccessChain %61 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %181 %186 
                                       f32_4 %188 = OpLoad %173 
                                       f32_4 %189 = OpLoad %181 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %187 %190 
                                       f32_4 %192 = OpLoad %187 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %187 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %191 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %191 %198 
                                       f32_4 %199 = OpLoad %32 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpLoad %151 
                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %191 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFNegate %205 
                                       f32_3 %207 = OpFAdd %203 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %191 %209 
                                Private f32* %210 = OpAccessChain %143 %29 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %9 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                Private f32* %215 = OpAccessChain %187 %27 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                Private f32* %219 = OpAccessChain %191 %27 
                                                      OpStore %219 %218 
                                       f32_4 %220 = OpLoad %75 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpLoad %191 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %32 %223 
                                Private f32* %224 = OpAccessChain %181 %27 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %173 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %32 %27 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %143 %27 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %187 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %32 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %143 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %143 %242 
                                Uniform f32* %245 = OpAccessChain %61 %244 
                                         f32 %246 = OpLoad %245 
                                Uniform f32* %247 = OpAccessChain %61 %67 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %243 %249 
                                         f32 %251 = OpLoad %243 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %243 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD5 %52 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %85 
                                Private f32* %260 = OpAccessChain %75 %29 
                                                      OpStore %260 %259 
                                         f32 %261 = OpLoad %250 
                                         f32 %262 = OpFMul %261 %36 
                                Private f32* %263 = OpAccessChain %90 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %90 %29 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %90 %29 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %75 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFDiv %268 %270 
                                Private f32* %272 = OpAccessChain %75 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %75 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %84 %85 
                                Private f32* %276 = OpAccessChain %75 %29 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %75 %29 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %85 
                                Private f32* %281 = OpAccessChain %75 %29 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %75 
                                       f32_4 %283 = OpVectorShuffle %282 %282 0 0 0 0 
                                       f32_4 %284 = OpLoad %143 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %32 %285 
                                Private f32* %287 = OpAccessChain %32 %27 
                                         f32 %288 = OpLoad %287 
                                         f32 %290 = OpExtInst %1 40 %288 %289 
                                Private f32* %291 = OpAccessChain %286 %29 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %32 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %286 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                                       f32_3 %296 = OpFDiv %293 %295 
                                                      OpStore %286 %296 
                                Private f32* %299 = OpAccessChain %32 %27 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %302 = OpAccessChain %298 %27 
                                                      OpStore %302 %300 
                                  Input f32* %306 = OpAccessChain vs_TEXCOORD2 %305 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %303 %29 
                                                      OpStore %308 %307 
                                  Input f32* %310 = OpAccessChain vs_TEXCOORD3 %305 
                                         f32 %311 = OpLoad %310 
                                Private f32* %312 = OpAccessChain %303 %52 
                                                      OpStore %312 %311 
                                  Input f32* %314 = OpAccessChain vs_TEXCOORD4 %305 
                                         f32 %315 = OpLoad %314 
                                Private f32* %316 = OpAccessChain %303 %305 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %303 
                                       f32_3 %319 = OpLoad %303 
                                         f32 %320 = OpDot %318 %319 
                                                      OpStore %317 %320 
                                         f32 %321 = OpLoad %317 
                                         f32 %322 = OpExtInst %1 32 %321 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpLoad %303 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %39 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %39 %328 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %61 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %330 %334 
                                Private f32* %336 = OpAccessChain %75 %29 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %39 %27 
                                                      OpStore %337 %85 
                              Uniform f32_4* %339 = OpAccessChain %61 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %39 
                                         f32 %342 = OpDot %340 %341 
                                Private f32* %343 = OpAccessChain %191 %29 
                                                      OpStore %343 %342 
                              Uniform f32_4* %345 = OpAccessChain %61 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpLoad %39 
                                         f32 %348 = OpDot %346 %347 
                                Private f32* %349 = OpAccessChain %191 %52 
                                                      OpStore %349 %348 
                              Uniform f32_4* %351 = OpAccessChain %61 %350 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %39 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %191 %305 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %191 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %360 = OpLoad vs_TEXCOORD7 
                                       f32_3 %361 = OpFAdd %357 %360 
                                       f32_4 %362 = OpLoad %75 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 5 6 
                                                      OpStore %75 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_4 %366 = OpExtInst %1 40 %364 %365 
                                                      OpStore %75 %366 
                                       f32_4 %367 = OpLoad %75 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 2 3 
                                       f32_3 %369 = OpExtInst %1 30 %368 
                                       f32_4 %370 = OpLoad %181 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %181 %371 
                                       f32_4 %372 = OpLoad %181 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %181 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %181 %378 
                                       f32_4 %379 = OpLoad %181 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpExtInst %1 29 %380 
                                       f32_4 %382 = OpLoad %181 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %181 %383 
                                       f32_4 %384 = OpLoad %181 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %181 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %181 %393 
                                       f32_4 %394 = OpLoad %181 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %397 = OpExtInst %1 40 %395 %396 
                                       f32_4 %398 = OpLoad %181 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %181 %399 
                                       f32_3 %400 = OpLoad %286 
                                       f32_4 %401 = OpLoad %181 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                                      OpStore %90 %403 
                                       f32_3 %404 = OpLoad %286 
                              Uniform f32_4* %406 = OpAccessChain %61 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %191 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %191 %411 
                                       f32_4 %412 = OpLoad %191 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %75 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %90 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %298 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %298 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "Caster"
  LOD 300
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Offset 1, 1
  Fog {
   Mode Off
  }
  GpuProgramID 128069
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _OutlineTex_ST;
uniform 	float _OutlineWidth;
uniform 	float _FaceDilate;
uniform 	float _ScaleRatioA;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD3;
out highp float vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat4);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
    vs_TEXCOORD2 = u_xlat0.x * 0.5;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _OutlineTex_ST;
uniform 	float _OutlineWidth;
uniform 	float _FaceDilate;
uniform 	float _ScaleRatioA;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD3;
out highp float vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat4);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
    vs_TEXCOORD2 = u_xlat0.x * 0.5;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _OutlineTex_ST;
uniform 	float _OutlineWidth;
uniform 	float _FaceDilate;
uniform 	float _ScaleRatioA;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD3;
out highp float vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat4);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
    vs_TEXCOORD2 = u_xlat0.x * 0.5;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %111 %136 %137 %148 %182 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpMemberDecorate %109 0 BuiltIn 109 
                                                      OpMemberDecorate %109 1 BuiltIn 109 
                                                      OpMemberDecorate %109 2 BuiltIn 109 
                                                      OpDecorate %109 Block 
                                                      OpDecorate vs_TEXCOORD1 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate vs_TEXCOORD3 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 182 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeStruct %7 %16 %17 %7 %7 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 0 
                                          i32 %35 = OpConstant 2 
                                          i32 %44 = OpConstant 3 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %75 = OpConstant 0 
                                              %76 = OpTypePointer Uniform %6 
                                          u32 %79 = OpConstant 3 
                                              %80 = OpTypePointer Private %6 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                          u32 %96 = OpConstant 2 
                                         u32 %107 = OpConstant 1 
                                             %108 = OpTypeArray %6 %107 
                                             %109 = OpTypeStruct %7 %6 %108 
                                             %110 = OpTypePointer Output %109 
        Output struct {f32_4; f32; f32[1];}* %111 = OpVariable Output 
                                             %112 = OpTypeVector %6 3 
                                             %115 = OpTypePointer Output %7 
                                             %132 = OpTypePointer Output %6 
                                             %134 = OpTypeVector %6 2 
                                             %135 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %151 = OpConstant 4 
                                         i32 %160 = OpConstant 5 
                                         i32 %164 = OpConstant 7 
                                         f32 %168 = OpConstant 3.674022E-40 
                                         i32 %171 = OpConstant 6 
                         Output f32* vs_TEXCOORD2 = OpVariable Output 
                                         f32 %185 = OpConstant 3.674022E-40 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_4 %26 = OpFMul %13 %25 
                                                      OpStore %9 %26 
                               Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpLoad %11 
                                        f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                        f32_4 %32 = OpFMul %29 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpFAdd %32 %33 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_4 %38 = OpLoad %11 
                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                        f32_4 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpFAdd %40 %41 
                                                      OpStore %9 %42 
                                        f32_4 %43 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %43 %46 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %51 = OpAccessChain %20 %35 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpFMul %50 %52 
                                                      OpStore %48 %53 
                               Uniform f32_4* %54 = OpAccessChain %20 %35 %27 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %48 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %48 %60 
                               Uniform f32_4* %61 = OpAccessChain %20 %35 %35 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %48 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %48 %67 
                               Uniform f32_4* %68 = OpAccessChain %20 %35 %44 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %70 3 3 3 3 
                                        f32_4 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %48 
                                        f32_4 %74 = OpFAdd %72 %73 
                                                      OpStore %9 %74 
                                 Uniform f32* %77 = OpAccessChain %20 %27 %75 
                                          f32 %78 = OpLoad %77 
                                 Private f32* %81 = OpAccessChain %9 %79 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFDiv %78 %82 
                                 Private f32* %84 = OpAccessChain %48 %75 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %48 %75 
                                          f32 %86 = OpLoad %85 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                 Private f32* %89 = OpAccessChain %48 %75 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %48 %75 
                                          f32 %91 = OpLoad %90 
                                          f32 %93 = OpExtInst %1 40 %91 %92 
                                 Private f32* %94 = OpAccessChain %48 %75 
                                                      OpStore %94 %93 
                                 Private f32* %97 = OpAccessChain %9 %96 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %48 %75 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                                      OpStore %95 %101 
                                Private f32* %102 = OpAccessChain %9 %79 
                                         f32 %103 = OpLoad %102 
                                         f32 %104 = OpLoad %95 
                                         f32 %105 = OpExtInst %1 37 %103 %104 
                                Private f32* %106 = OpAccessChain %48 %75 
                                                      OpStore %106 %105 
                                       f32_4 %113 = OpLoad %9 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
                               Output f32_4* %116 = OpAccessChain %111 %27 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpVectorShuffle %117 %114 4 5 2 6 
                                                      OpStore %116 %118 
                                         f32 %119 = OpLoad %95 
                                         f32 %120 = OpFNegate %119 
                                Private f32* %121 = OpAccessChain %48 %75 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %120 %122 
                                Private f32* %124 = OpAccessChain %9 %75 
                                                      OpStore %124 %123 
                                Uniform f32* %125 = OpAccessChain %20 %27 %107 
                                         f32 %126 = OpLoad %125 
                                Private f32* %127 = OpAccessChain %9 %75 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFMul %126 %128 
                                         f32 %130 = OpLoad %95 
                                         f32 %131 = OpFAdd %129 %130 
                                 Output f32* %133 = OpAccessChain %111 %27 %96 
                                                      OpStore %133 %131 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                              Uniform f32_4* %140 = OpAccessChain %20 %44 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_2 %143 = OpFMul %139 %142 
                              Uniform f32_4* %144 = OpAccessChain %20 %44 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 2 3 
                                       f32_2 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD1 %147 
                                       f32_4 %149 = OpLoad %137 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                              Uniform f32_4* %152 = OpAccessChain %20 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFMul %150 %154 
                              Uniform f32_4* %156 = OpAccessChain %20 %151 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                       f32_2 %159 = OpFAdd %155 %158 
                                                      OpStore vs_TEXCOORD3 %159 
                                Uniform f32* %161 = OpAccessChain %20 %160 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                Uniform f32* %165 = OpAccessChain %20 %164 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %163 %166 
                                         f32 %169 = OpFAdd %167 %168 
                                Private f32* %170 = OpAccessChain %9 %75 
                                                      OpStore %170 %169 
                                Uniform f32* %172 = OpAccessChain %20 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Uniform f32* %175 = OpAccessChain %20 %164 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %174 %176 
                                Private f32* %178 = OpAccessChain %9 %75 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFAdd %177 %179 
                                Private f32* %181 = OpAccessChain %9 %75 
                                                      OpStore %181 %180 
                                Private f32* %183 = OpAccessChain %9 %75 
                                         f32 %184 = OpLoad %183 
                                         f32 %186 = OpFMul %184 %185 
                                                      OpStore vs_TEXCOORD2 %186 
                                 Output f32* %187 = OpAccessChain %111 %27 %107 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %111 %27 %107 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 56
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %31 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD2 Location 31 
                                             OpDecorate %53 Location 53 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD2 = OpVariable Input 
                                     %35 = OpTypeBool 
                                     %36 = OpTypePointer Private %35 
                       Private bool* %37 = OpVariable Private 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %42 = OpTypeInt 32 1 
                                 i32 %43 = OpConstant 0 
                                 i32 %44 = OpConstant 1 
                                 i32 %46 = OpConstant -1 
                                     %52 = OpTypePointer Output %23 
                       Output f32_4* %53 = OpVariable Output 
                               f32_4 %54 = OpConstantComposite %39 %39 %39 %39 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD1 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                                 f32 %32 = OpLoad vs_TEXCOORD2 
                                 f32 %33 = OpFNegate %32 
                                 f32 %34 = OpFAdd %29 %33 
                                             OpStore %28 %34 
                                 f32 %38 = OpLoad %28 
                                bool %40 = OpFOrdLessThan %38 %39 
                                             OpStore %37 %40 
                                bool %41 = OpLoad %37 
                                 i32 %45 = OpSelect %41 %44 %43 
                                 i32 %47 = OpIMul %45 %46 
                                bool %48 = OpINotEqual %47 %43 
                                             OpSelectionMerge %50 None 
                                             OpBranchConditional %48 %49 %50 
                                     %49 = OpLabel 
                                             OpKill
                                     %50 = OpLabel 
                                             OpStore %53 %54 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %111 %136 %137 %148 %182 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpMemberDecorate %109 0 BuiltIn 109 
                                                      OpMemberDecorate %109 1 BuiltIn 109 
                                                      OpMemberDecorate %109 2 BuiltIn 109 
                                                      OpDecorate %109 Block 
                                                      OpDecorate vs_TEXCOORD1 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate vs_TEXCOORD3 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 182 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeStruct %7 %16 %17 %7 %7 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 0 
                                          i32 %35 = OpConstant 2 
                                          i32 %44 = OpConstant 3 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %75 = OpConstant 0 
                                              %76 = OpTypePointer Uniform %6 
                                          u32 %79 = OpConstant 3 
                                              %80 = OpTypePointer Private %6 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                          u32 %96 = OpConstant 2 
                                         u32 %107 = OpConstant 1 
                                             %108 = OpTypeArray %6 %107 
                                             %109 = OpTypeStruct %7 %6 %108 
                                             %110 = OpTypePointer Output %109 
        Output struct {f32_4; f32; f32[1];}* %111 = OpVariable Output 
                                             %112 = OpTypeVector %6 3 
                                             %115 = OpTypePointer Output %7 
                                             %132 = OpTypePointer Output %6 
                                             %134 = OpTypeVector %6 2 
                                             %135 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %151 = OpConstant 4 
                                         i32 %160 = OpConstant 5 
                                         i32 %164 = OpConstant 7 
                                         f32 %168 = OpConstant 3.674022E-40 
                                         i32 %171 = OpConstant 6 
                         Output f32* vs_TEXCOORD2 = OpVariable Output 
                                         f32 %185 = OpConstant 3.674022E-40 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_4 %26 = OpFMul %13 %25 
                                                      OpStore %9 %26 
                               Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpLoad %11 
                                        f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                        f32_4 %32 = OpFMul %29 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpFAdd %32 %33 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_4 %38 = OpLoad %11 
                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                        f32_4 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpFAdd %40 %41 
                                                      OpStore %9 %42 
                                        f32_4 %43 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %43 %46 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %51 = OpAccessChain %20 %35 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpFMul %50 %52 
                                                      OpStore %48 %53 
                               Uniform f32_4* %54 = OpAccessChain %20 %35 %27 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %48 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %48 %60 
                               Uniform f32_4* %61 = OpAccessChain %20 %35 %35 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %48 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %48 %67 
                               Uniform f32_4* %68 = OpAccessChain %20 %35 %44 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %70 3 3 3 3 
                                        f32_4 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %48 
                                        f32_4 %74 = OpFAdd %72 %73 
                                                      OpStore %9 %74 
                                 Uniform f32* %77 = OpAccessChain %20 %27 %75 
                                          f32 %78 = OpLoad %77 
                                 Private f32* %81 = OpAccessChain %9 %79 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFDiv %78 %82 
                                 Private f32* %84 = OpAccessChain %48 %75 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %48 %75 
                                          f32 %86 = OpLoad %85 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                 Private f32* %89 = OpAccessChain %48 %75 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %48 %75 
                                          f32 %91 = OpLoad %90 
                                          f32 %93 = OpExtInst %1 40 %91 %92 
                                 Private f32* %94 = OpAccessChain %48 %75 
                                                      OpStore %94 %93 
                                 Private f32* %97 = OpAccessChain %9 %96 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %48 %75 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                                      OpStore %95 %101 
                                Private f32* %102 = OpAccessChain %9 %79 
                                         f32 %103 = OpLoad %102 
                                         f32 %104 = OpLoad %95 
                                         f32 %105 = OpExtInst %1 37 %103 %104 
                                Private f32* %106 = OpAccessChain %48 %75 
                                                      OpStore %106 %105 
                                       f32_4 %113 = OpLoad %9 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
                               Output f32_4* %116 = OpAccessChain %111 %27 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpVectorShuffle %117 %114 4 5 2 6 
                                                      OpStore %116 %118 
                                         f32 %119 = OpLoad %95 
                                         f32 %120 = OpFNegate %119 
                                Private f32* %121 = OpAccessChain %48 %75 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %120 %122 
                                Private f32* %124 = OpAccessChain %9 %75 
                                                      OpStore %124 %123 
                                Uniform f32* %125 = OpAccessChain %20 %27 %107 
                                         f32 %126 = OpLoad %125 
                                Private f32* %127 = OpAccessChain %9 %75 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFMul %126 %128 
                                         f32 %130 = OpLoad %95 
                                         f32 %131 = OpFAdd %129 %130 
                                 Output f32* %133 = OpAccessChain %111 %27 %96 
                                                      OpStore %133 %131 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                              Uniform f32_4* %140 = OpAccessChain %20 %44 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_2 %143 = OpFMul %139 %142 
                              Uniform f32_4* %144 = OpAccessChain %20 %44 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 2 3 
                                       f32_2 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD1 %147 
                                       f32_4 %149 = OpLoad %137 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                              Uniform f32_4* %152 = OpAccessChain %20 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFMul %150 %154 
                              Uniform f32_4* %156 = OpAccessChain %20 %151 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                       f32_2 %159 = OpFAdd %155 %158 
                                                      OpStore vs_TEXCOORD3 %159 
                                Uniform f32* %161 = OpAccessChain %20 %160 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                Uniform f32* %165 = OpAccessChain %20 %164 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %163 %166 
                                         f32 %169 = OpFAdd %167 %168 
                                Private f32* %170 = OpAccessChain %9 %75 
                                                      OpStore %170 %169 
                                Uniform f32* %172 = OpAccessChain %20 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Uniform f32* %175 = OpAccessChain %20 %164 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %174 %176 
                                Private f32* %178 = OpAccessChain %9 %75 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFAdd %177 %179 
                                Private f32* %181 = OpAccessChain %9 %75 
                                                      OpStore %181 %180 
                                Private f32* %183 = OpAccessChain %9 %75 
                                         f32 %184 = OpLoad %183 
                                         f32 %186 = OpFMul %184 %185 
                                                      OpStore vs_TEXCOORD2 %186 
                                 Output f32* %187 = OpAccessChain %111 %27 %107 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %111 %27 %107 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 56
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %31 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD2 Location 31 
                                             OpDecorate %53 Location 53 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD2 = OpVariable Input 
                                     %35 = OpTypeBool 
                                     %36 = OpTypePointer Private %35 
                       Private bool* %37 = OpVariable Private 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %42 = OpTypeInt 32 1 
                                 i32 %43 = OpConstant 0 
                                 i32 %44 = OpConstant 1 
                                 i32 %46 = OpConstant -1 
                                     %52 = OpTypePointer Output %23 
                       Output f32_4* %53 = OpVariable Output 
                               f32_4 %54 = OpConstantComposite %39 %39 %39 %39 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD1 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                                 f32 %32 = OpLoad vs_TEXCOORD2 
                                 f32 %33 = OpFNegate %32 
                                 f32 %34 = OpFAdd %29 %33 
                                             OpStore %28 %34 
                                 f32 %38 = OpLoad %28 
                                bool %40 = OpFOrdLessThan %38 %39 
                                             OpStore %37 %40 
                                bool %41 = OpLoad %37 
                                 i32 %45 = OpSelect %41 %44 %43 
                                 i32 %47 = OpIMul %45 %46 
                                bool %48 = OpINotEqual %47 %43 
                                             OpSelectionMerge %50 None 
                                             OpBranchConditional %48 %49 %50 
                                     %49 = OpLabel 
                                             OpKill
                                     %50 = OpLabel 
                                             OpStore %53 %54 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %111 %136 %137 %148 %182 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpMemberDecorate %109 0 BuiltIn 109 
                                                      OpMemberDecorate %109 1 BuiltIn 109 
                                                      OpMemberDecorate %109 2 BuiltIn 109 
                                                      OpDecorate %109 Block 
                                                      OpDecorate vs_TEXCOORD1 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate vs_TEXCOORD3 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 182 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeStruct %7 %16 %17 %7 %7 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 0 
                                          i32 %35 = OpConstant 2 
                                          i32 %44 = OpConstant 3 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %75 = OpConstant 0 
                                              %76 = OpTypePointer Uniform %6 
                                          u32 %79 = OpConstant 3 
                                              %80 = OpTypePointer Private %6 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                          u32 %96 = OpConstant 2 
                                         u32 %107 = OpConstant 1 
                                             %108 = OpTypeArray %6 %107 
                                             %109 = OpTypeStruct %7 %6 %108 
                                             %110 = OpTypePointer Output %109 
        Output struct {f32_4; f32; f32[1];}* %111 = OpVariable Output 
                                             %112 = OpTypeVector %6 3 
                                             %115 = OpTypePointer Output %7 
                                             %132 = OpTypePointer Output %6 
                                             %134 = OpTypeVector %6 2 
                                             %135 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %151 = OpConstant 4 
                                         i32 %160 = OpConstant 5 
                                         i32 %164 = OpConstant 7 
                                         f32 %168 = OpConstant 3.674022E-40 
                                         i32 %171 = OpConstant 6 
                         Output f32* vs_TEXCOORD2 = OpVariable Output 
                                         f32 %185 = OpConstant 3.674022E-40 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_4 %26 = OpFMul %13 %25 
                                                      OpStore %9 %26 
                               Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpLoad %11 
                                        f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                        f32_4 %32 = OpFMul %29 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpFAdd %32 %33 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_4 %38 = OpLoad %11 
                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                        f32_4 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpFAdd %40 %41 
                                                      OpStore %9 %42 
                                        f32_4 %43 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %43 %46 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %51 = OpAccessChain %20 %35 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpFMul %50 %52 
                                                      OpStore %48 %53 
                               Uniform f32_4* %54 = OpAccessChain %20 %35 %27 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %48 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %48 %60 
                               Uniform f32_4* %61 = OpAccessChain %20 %35 %35 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %48 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %48 %67 
                               Uniform f32_4* %68 = OpAccessChain %20 %35 %44 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %70 3 3 3 3 
                                        f32_4 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %48 
                                        f32_4 %74 = OpFAdd %72 %73 
                                                      OpStore %9 %74 
                                 Uniform f32* %77 = OpAccessChain %20 %27 %75 
                                          f32 %78 = OpLoad %77 
                                 Private f32* %81 = OpAccessChain %9 %79 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFDiv %78 %82 
                                 Private f32* %84 = OpAccessChain %48 %75 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %48 %75 
                                          f32 %86 = OpLoad %85 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                 Private f32* %89 = OpAccessChain %48 %75 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %48 %75 
                                          f32 %91 = OpLoad %90 
                                          f32 %93 = OpExtInst %1 40 %91 %92 
                                 Private f32* %94 = OpAccessChain %48 %75 
                                                      OpStore %94 %93 
                                 Private f32* %97 = OpAccessChain %9 %96 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %48 %75 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                                      OpStore %95 %101 
                                Private f32* %102 = OpAccessChain %9 %79 
                                         f32 %103 = OpLoad %102 
                                         f32 %104 = OpLoad %95 
                                         f32 %105 = OpExtInst %1 37 %103 %104 
                                Private f32* %106 = OpAccessChain %48 %75 
                                                      OpStore %106 %105 
                                       f32_4 %113 = OpLoad %9 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
                               Output f32_4* %116 = OpAccessChain %111 %27 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpVectorShuffle %117 %114 4 5 2 6 
                                                      OpStore %116 %118 
                                         f32 %119 = OpLoad %95 
                                         f32 %120 = OpFNegate %119 
                                Private f32* %121 = OpAccessChain %48 %75 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %120 %122 
                                Private f32* %124 = OpAccessChain %9 %75 
                                                      OpStore %124 %123 
                                Uniform f32* %125 = OpAccessChain %20 %27 %107 
                                         f32 %126 = OpLoad %125 
                                Private f32* %127 = OpAccessChain %9 %75 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFMul %126 %128 
                                         f32 %130 = OpLoad %95 
                                         f32 %131 = OpFAdd %129 %130 
                                 Output f32* %133 = OpAccessChain %111 %27 %96 
                                                      OpStore %133 %131 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                              Uniform f32_4* %140 = OpAccessChain %20 %44 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_2 %143 = OpFMul %139 %142 
                              Uniform f32_4* %144 = OpAccessChain %20 %44 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 2 3 
                                       f32_2 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD1 %147 
                                       f32_4 %149 = OpLoad %137 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                              Uniform f32_4* %152 = OpAccessChain %20 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFMul %150 %154 
                              Uniform f32_4* %156 = OpAccessChain %20 %151 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                       f32_2 %159 = OpFAdd %155 %158 
                                                      OpStore vs_TEXCOORD3 %159 
                                Uniform f32* %161 = OpAccessChain %20 %160 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                Uniform f32* %165 = OpAccessChain %20 %164 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %163 %166 
                                         f32 %169 = OpFAdd %167 %168 
                                Private f32* %170 = OpAccessChain %9 %75 
                                                      OpStore %170 %169 
                                Uniform f32* %172 = OpAccessChain %20 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Uniform f32* %175 = OpAccessChain %20 %164 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %174 %176 
                                Private f32* %178 = OpAccessChain %9 %75 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFAdd %177 %179 
                                Private f32* %181 = OpAccessChain %9 %75 
                                                      OpStore %181 %180 
                                Private f32* %183 = OpAccessChain %9 %75 
                                         f32 %184 = OpLoad %183 
                                         f32 %186 = OpFMul %184 %185 
                                                      OpStore vs_TEXCOORD2 %186 
                                 Output f32* %187 = OpAccessChain %111 %27 %107 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %111 %27 %107 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 56
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %31 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD2 Location 31 
                                             OpDecorate %53 Location 53 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD2 = OpVariable Input 
                                     %35 = OpTypeBool 
                                     %36 = OpTypePointer Private %35 
                       Private bool* %37 = OpVariable Private 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %42 = OpTypeInt 32 1 
                                 i32 %43 = OpConstant 0 
                                 i32 %44 = OpConstant 1 
                                 i32 %46 = OpConstant -1 
                                     %52 = OpTypePointer Output %23 
                       Output f32_4* %53 = OpVariable Output 
                               f32_4 %54 = OpConstantComposite %39 %39 %39 %39 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD1 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                                 f32 %32 = OpLoad vs_TEXCOORD2 
                                 f32 %33 = OpFNegate %32 
                                 f32 %34 = OpFAdd %29 %33 
                                             OpStore %28 %34 
                                 f32 %38 = OpLoad %28 
                                bool %40 = OpFOrdLessThan %38 %39 
                                             OpStore %37 %40 
                                bool %41 = OpLoad %37 
                                 i32 %45 = OpSelect %41 %44 %43 
                                 i32 %47 = OpIMul %45 %46 
                                bool %48 = OpINotEqual %47 %43 
                                             OpSelectionMerge %50 None 
                                             OpBranchConditional %48 %49 %50 
                                     %49 = OpLabel 
                                             OpKill
                                     %50 = OpLabel 
                                             OpStore %53 %54 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _OutlineTex_ST;
uniform 	float _OutlineWidth;
uniform 	float _FaceDilate;
uniform 	float _ScaleRatioA;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD3;
out highp float vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
    vs_TEXCOORD2 = u_xlat0.x * 0.5;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _OutlineTex_ST;
uniform 	float _OutlineWidth;
uniform 	float _FaceDilate;
uniform 	float _ScaleRatioA;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD3;
out highp float vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
    vs_TEXCOORD2 = u_xlat0.x * 0.5;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _OutlineTex_ST;
uniform 	float _OutlineWidth;
uniform 	float _FaceDilate;
uniform 	float _ScaleRatioA;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD3;
out highp float vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
    vs_TEXCOORD2 = u_xlat0.x * 0.5;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 173
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %96 %117 %118 %129 %163 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpMemberDecorate %94 0 BuiltIn 94 
                                                      OpMemberDecorate %94 1 BuiltIn 94 
                                                      OpMemberDecorate %94 2 BuiltIn 94 
                                                      OpDecorate %94 Block 
                                                      OpDecorate vs_TEXCOORD1 Location 117 
                                                      OpDecorate %118 Location 118 
                                                      OpDecorate vs_TEXCOORD3 Location 129 
                                                      OpDecorate vs_TEXCOORD2 Location 163 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeStruct %7 %16 %17 %7 %7 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 0 
                                          i32 %35 = OpConstant 2 
                                          i32 %44 = OpConstant 3 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %75 = OpConstant 3 
                                              %76 = OpTypePointer Private %6 
                                          u32 %79 = OpConstant 2 
                                          u32 %83 = OpConstant 0 
                                          u32 %92 = OpConstant 1 
                                              %93 = OpTypeArray %6 %92 
                                              %94 = OpTypeStruct %7 %6 %93 
                                              %95 = OpTypePointer Output %94 
         Output struct {f32_4; f32; f32[1];}* %96 = OpVariable Output 
                                              %97 = OpTypePointer Uniform %6 
                                             %106 = OpTypePointer Output %6 
                                             %108 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Output %7 
                                             %115 = OpTypeVector %6 2 
                                             %116 = OpTypePointer Output %115 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                Input f32_4* %118 = OpVariable Input 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %132 = OpConstant 4 
                                         i32 %141 = OpConstant 5 
                                         i32 %145 = OpConstant 7 
                                         f32 %149 = OpConstant 3.674022E-40 
                                         i32 %152 = OpConstant 6 
                         Output f32* vs_TEXCOORD2 = OpVariable Output 
                                         f32 %166 = OpConstant 3.674022E-40 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_4 %26 = OpFMul %13 %25 
                                                      OpStore %9 %26 
                               Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpLoad %11 
                                        f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                        f32_4 %32 = OpFMul %29 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpFAdd %32 %33 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_4 %38 = OpLoad %11 
                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                        f32_4 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpFAdd %40 %41 
                                                      OpStore %9 %42 
                                        f32_4 %43 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %43 %46 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %51 = OpAccessChain %20 %35 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpFMul %50 %52 
                                                      OpStore %48 %53 
                               Uniform f32_4* %54 = OpAccessChain %20 %35 %27 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %48 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %48 %60 
                               Uniform f32_4* %61 = OpAccessChain %20 %35 %35 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %48 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %48 %67 
                               Uniform f32_4* %68 = OpAccessChain %20 %35 %44 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %70 3 3 3 3 
                                        f32_4 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %48 
                                        f32_4 %74 = OpFAdd %72 %73 
                                                      OpStore %9 %74 
                                 Private f32* %77 = OpAccessChain %9 %75 
                                          f32 %78 = OpLoad %77 
                                 Private f32* %80 = OpAccessChain %9 %79 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpExtInst %1 37 %78 %81 
                                 Private f32* %84 = OpAccessChain %48 %83 
                                                      OpStore %84 %82 
                                 Private f32* %85 = OpAccessChain %9 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFNegate %86 
                                 Private f32* %88 = OpAccessChain %48 %83 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %48 %83 
                                                      OpStore %91 %90 
                                 Uniform f32* %98 = OpAccessChain %20 %27 %92 
                                          f32 %99 = OpLoad %98 
                                Private f32* %100 = OpAccessChain %48 %83 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %99 %101 
                                Private f32* %103 = OpAccessChain %9 %79 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFAdd %102 %104 
                                 Output f32* %107 = OpAccessChain %96 %27 %79 
                                                      OpStore %107 %105 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                               Output f32_4* %112 = OpAccessChain %96 %27 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpVectorShuffle %113 %110 4 5 2 6 
                                                      OpStore %112 %114 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                              Uniform f32_4* %121 = OpAccessChain %20 %44 
                                       f32_4 %122 = OpLoad %121 
                                       f32_2 %123 = OpVectorShuffle %122 %122 0 1 
                                       f32_2 %124 = OpFMul %120 %123 
                              Uniform f32_4* %125 = OpAccessChain %20 %44 
                                       f32_4 %126 = OpLoad %125 
                                       f32_2 %127 = OpVectorShuffle %126 %126 2 3 
                                       f32_2 %128 = OpFAdd %124 %127 
                                                      OpStore vs_TEXCOORD1 %128 
                                       f32_4 %130 = OpLoad %118 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %20 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %20 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore vs_TEXCOORD3 %140 
                                Uniform f32* %142 = OpAccessChain %20 %141 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFNegate %143 
                                Uniform f32* %146 = OpAccessChain %20 %145 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %144 %147 
                                         f32 %150 = OpFAdd %148 %149 
                                Private f32* %151 = OpAccessChain %9 %83 
                                                      OpStore %151 %150 
                                Uniform f32* %153 = OpAccessChain %20 %152 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                Uniform f32* %156 = OpAccessChain %20 %145 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %155 %157 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %9 %83 
                                                      OpStore %162 %161 
                                Private f32* %164 = OpAccessChain %9 %83 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFMul %165 %166 
                                                      OpStore vs_TEXCOORD2 %167 
                                 Output f32* %168 = OpAccessChain %96 %27 %92 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                 Output f32* %171 = OpAccessChain %96 %27 %92 
                                                      OpStore %171 %170 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 56
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %31 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD2 Location 31 
                                             OpDecorate %53 Location 53 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD2 = OpVariable Input 
                                     %35 = OpTypeBool 
                                     %36 = OpTypePointer Private %35 
                       Private bool* %37 = OpVariable Private 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %42 = OpTypeInt 32 1 
                                 i32 %43 = OpConstant 0 
                                 i32 %44 = OpConstant 1 
                                 i32 %46 = OpConstant -1 
                                     %52 = OpTypePointer Output %23 
                       Output f32_4* %53 = OpVariable Output 
                               f32_4 %54 = OpConstantComposite %39 %39 %39 %39 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD1 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                                 f32 %32 = OpLoad vs_TEXCOORD2 
                                 f32 %33 = OpFNegate %32 
                                 f32 %34 = OpFAdd %29 %33 
                                             OpStore %28 %34 
                                 f32 %38 = OpLoad %28 
                                bool %40 = OpFOrdLessThan %38 %39 
                                             OpStore %37 %40 
                                bool %41 = OpLoad %37 
                                 i32 %45 = OpSelect %41 %44 %43 
                                 i32 %47 = OpIMul %45 %46 
                                bool %48 = OpINotEqual %47 %43 
                                             OpSelectionMerge %50 None 
                                             OpBranchConditional %48 %49 %50 
                                     %49 = OpLabel 
                                             OpKill
                                     %50 = OpLabel 
                                             OpStore %53 %54 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 173
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %96 %117 %118 %129 %163 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpMemberDecorate %94 0 BuiltIn 94 
                                                      OpMemberDecorate %94 1 BuiltIn 94 
                                                      OpMemberDecorate %94 2 BuiltIn 94 
                                                      OpDecorate %94 Block 
                                                      OpDecorate vs_TEXCOORD1 Location 117 
                                                      OpDecorate %118 Location 118 
                                                      OpDecorate vs_TEXCOORD3 Location 129 
                                                      OpDecorate vs_TEXCOORD2 Location 163 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeStruct %7 %16 %17 %7 %7 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 0 
                                          i32 %35 = OpConstant 2 
                                          i32 %44 = OpConstant 3 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %75 = OpConstant 3 
                                              %76 = OpTypePointer Private %6 
                                          u32 %79 = OpConstant 2 
                                          u32 %83 = OpConstant 0 
                                          u32 %92 = OpConstant 1 
                                              %93 = OpTypeArray %6 %92 
                                              %94 = OpTypeStruct %7 %6 %93 
                                              %95 = OpTypePointer Output %94 
         Output struct {f32_4; f32; f32[1];}* %96 = OpVariable Output 
                                              %97 = OpTypePointer Uniform %6 
                                             %106 = OpTypePointer Output %6 
                                             %108 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Output %7 
                                             %115 = OpTypeVector %6 2 
                                             %116 = OpTypePointer Output %115 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                Input f32_4* %118 = OpVariable Input 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %132 = OpConstant 4 
                                         i32 %141 = OpConstant 5 
                                         i32 %145 = OpConstant 7 
                                         f32 %149 = OpConstant 3.674022E-40 
                                         i32 %152 = OpConstant 6 
                         Output f32* vs_TEXCOORD2 = OpVariable Output 
                                         f32 %166 = OpConstant 3.674022E-40 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_4 %26 = OpFMul %13 %25 
                                                      OpStore %9 %26 
                               Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpLoad %11 
                                        f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                        f32_4 %32 = OpFMul %29 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpFAdd %32 %33 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_4 %38 = OpLoad %11 
                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                        f32_4 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpFAdd %40 %41 
                                                      OpStore %9 %42 
                                        f32_4 %43 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %43 %46 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %51 = OpAccessChain %20 %35 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpFMul %50 %52 
                                                      OpStore %48 %53 
                               Uniform f32_4* %54 = OpAccessChain %20 %35 %27 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %48 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %48 %60 
                               Uniform f32_4* %61 = OpAccessChain %20 %35 %35 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %48 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %48 %67 
                               Uniform f32_4* %68 = OpAccessChain %20 %35 %44 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %70 3 3 3 3 
                                        f32_4 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %48 
                                        f32_4 %74 = OpFAdd %72 %73 
                                                      OpStore %9 %74 
                                 Private f32* %77 = OpAccessChain %9 %75 
                                          f32 %78 = OpLoad %77 
                                 Private f32* %80 = OpAccessChain %9 %79 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpExtInst %1 37 %78 %81 
                                 Private f32* %84 = OpAccessChain %48 %83 
                                                      OpStore %84 %82 
                                 Private f32* %85 = OpAccessChain %9 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFNegate %86 
                                 Private f32* %88 = OpAccessChain %48 %83 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %48 %83 
                                                      OpStore %91 %90 
                                 Uniform f32* %98 = OpAccessChain %20 %27 %92 
                                          f32 %99 = OpLoad %98 
                                Private f32* %100 = OpAccessChain %48 %83 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %99 %101 
                                Private f32* %103 = OpAccessChain %9 %79 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFAdd %102 %104 
                                 Output f32* %107 = OpAccessChain %96 %27 %79 
                                                      OpStore %107 %105 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                               Output f32_4* %112 = OpAccessChain %96 %27 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpVectorShuffle %113 %110 4 5 2 6 
                                                      OpStore %112 %114 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                              Uniform f32_4* %121 = OpAccessChain %20 %44 
                                       f32_4 %122 = OpLoad %121 
                                       f32_2 %123 = OpVectorShuffle %122 %122 0 1 
                                       f32_2 %124 = OpFMul %120 %123 
                              Uniform f32_4* %125 = OpAccessChain %20 %44 
                                       f32_4 %126 = OpLoad %125 
                                       f32_2 %127 = OpVectorShuffle %126 %126 2 3 
                                       f32_2 %128 = OpFAdd %124 %127 
                                                      OpStore vs_TEXCOORD1 %128 
                                       f32_4 %130 = OpLoad %118 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %20 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %20 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore vs_TEXCOORD3 %140 
                                Uniform f32* %142 = OpAccessChain %20 %141 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFNegate %143 
                                Uniform f32* %146 = OpAccessChain %20 %145 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %144 %147 
                                         f32 %150 = OpFAdd %148 %149 
                                Private f32* %151 = OpAccessChain %9 %83 
                                                      OpStore %151 %150 
                                Uniform f32* %153 = OpAccessChain %20 %152 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                Uniform f32* %156 = OpAccessChain %20 %145 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %155 %157 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %9 %83 
                                                      OpStore %162 %161 
                                Private f32* %164 = OpAccessChain %9 %83 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFMul %165 %166 
                                                      OpStore vs_TEXCOORD2 %167 
                                 Output f32* %168 = OpAccessChain %96 %27 %92 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                 Output f32* %171 = OpAccessChain %96 %27 %92 
                                                      OpStore %171 %170 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 56
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %31 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD2 Location 31 
                                             OpDecorate %53 Location 53 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD2 = OpVariable Input 
                                     %35 = OpTypeBool 
                                     %36 = OpTypePointer Private %35 
                       Private bool* %37 = OpVariable Private 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %42 = OpTypeInt 32 1 
                                 i32 %43 = OpConstant 0 
                                 i32 %44 = OpConstant 1 
                                 i32 %46 = OpConstant -1 
                                     %52 = OpTypePointer Output %23 
                       Output f32_4* %53 = OpVariable Output 
                               f32_4 %54 = OpConstantComposite %39 %39 %39 %39 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD1 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                                 f32 %32 = OpLoad vs_TEXCOORD2 
                                 f32 %33 = OpFNegate %32 
                                 f32 %34 = OpFAdd %29 %33 
                                             OpStore %28 %34 
                                 f32 %38 = OpLoad %28 
                                bool %40 = OpFOrdLessThan %38 %39 
                                             OpStore %37 %40 
                                bool %41 = OpLoad %37 
                                 i32 %45 = OpSelect %41 %44 %43 
                                 i32 %47 = OpIMul %45 %46 
                                bool %48 = OpINotEqual %47 %43 
                                             OpSelectionMerge %50 None 
                                             OpBranchConditional %48 %49 %50 
                                     %49 = OpLabel 
                                             OpKill
                                     %50 = OpLabel 
                                             OpStore %53 %54 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 173
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %96 %117 %118 %129 %163 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpMemberDecorate %94 0 BuiltIn 94 
                                                      OpMemberDecorate %94 1 BuiltIn 94 
                                                      OpMemberDecorate %94 2 BuiltIn 94 
                                                      OpDecorate %94 Block 
                                                      OpDecorate vs_TEXCOORD1 Location 117 
                                                      OpDecorate %118 Location 118 
                                                      OpDecorate vs_TEXCOORD3 Location 129 
                                                      OpDecorate vs_TEXCOORD2 Location 163 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeStruct %7 %16 %17 %7 %7 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %7 
                                          i32 %27 = OpConstant 0 
                                          i32 %35 = OpConstant 2 
                                          i32 %44 = OpConstant 3 
                               Private f32_4* %48 = OpVariable Private 
                                          u32 %75 = OpConstant 3 
                                              %76 = OpTypePointer Private %6 
                                          u32 %79 = OpConstant 2 
                                          u32 %83 = OpConstant 0 
                                          u32 %92 = OpConstant 1 
                                              %93 = OpTypeArray %6 %92 
                                              %94 = OpTypeStruct %7 %6 %93 
                                              %95 = OpTypePointer Output %94 
         Output struct {f32_4; f32; f32[1];}* %96 = OpVariable Output 
                                              %97 = OpTypePointer Uniform %6 
                                             %106 = OpTypePointer Output %6 
                                             %108 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Output %7 
                                             %115 = OpTypeVector %6 2 
                                             %116 = OpTypePointer Output %115 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                Input f32_4* %118 = OpVariable Input 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %132 = OpConstant 4 
                                         i32 %141 = OpConstant 5 
                                         i32 %145 = OpConstant 7 
                                         f32 %149 = OpConstant 3.674022E-40 
                                         i32 %152 = OpConstant 6 
                         Output f32* vs_TEXCOORD2 = OpVariable Output 
                                         f32 %166 = OpConstant 3.674022E-40 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_4 %26 = OpFMul %13 %25 
                                                      OpStore %9 %26 
                               Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpLoad %11 
                                        f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                        f32_4 %32 = OpFMul %29 %31 
                                        f32_4 %33 = OpLoad %9 
                                        f32_4 %34 = OpFAdd %32 %33 
                                                      OpStore %9 %34 
                               Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_4 %38 = OpLoad %11 
                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                        f32_4 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpFAdd %40 %41 
                                                      OpStore %9 %42 
                                        f32_4 %43 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %43 %46 
                                                      OpStore %9 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                               Uniform f32_4* %51 = OpAccessChain %20 %35 %22 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpFMul %50 %52 
                                                      OpStore %48 %53 
                               Uniform f32_4* %54 = OpAccessChain %20 %35 %27 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %48 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %48 %60 
                               Uniform f32_4* %61 = OpAccessChain %20 %35 %35 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %48 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %48 %67 
                               Uniform f32_4* %68 = OpAccessChain %20 %35 %44 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %9 
                                        f32_4 %71 = OpVectorShuffle %70 %70 3 3 3 3 
                                        f32_4 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %48 
                                        f32_4 %74 = OpFAdd %72 %73 
                                                      OpStore %9 %74 
                                 Private f32* %77 = OpAccessChain %9 %75 
                                          f32 %78 = OpLoad %77 
                                 Private f32* %80 = OpAccessChain %9 %79 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpExtInst %1 37 %78 %81 
                                 Private f32* %84 = OpAccessChain %48 %83 
                                                      OpStore %84 %82 
                                 Private f32* %85 = OpAccessChain %9 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFNegate %86 
                                 Private f32* %88 = OpAccessChain %48 %83 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %48 %83 
                                                      OpStore %91 %90 
                                 Uniform f32* %98 = OpAccessChain %20 %27 %92 
                                          f32 %99 = OpLoad %98 
                                Private f32* %100 = OpAccessChain %48 %83 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %99 %101 
                                Private f32* %103 = OpAccessChain %9 %79 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFAdd %102 %104 
                                 Output f32* %107 = OpAccessChain %96 %27 %79 
                                                      OpStore %107 %105 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                               Output f32_4* %112 = OpAccessChain %96 %27 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpVectorShuffle %113 %110 4 5 2 6 
                                                      OpStore %112 %114 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                              Uniform f32_4* %121 = OpAccessChain %20 %44 
                                       f32_4 %122 = OpLoad %121 
                                       f32_2 %123 = OpVectorShuffle %122 %122 0 1 
                                       f32_2 %124 = OpFMul %120 %123 
                              Uniform f32_4* %125 = OpAccessChain %20 %44 
                                       f32_4 %126 = OpLoad %125 
                                       f32_2 %127 = OpVectorShuffle %126 %126 2 3 
                                       f32_2 %128 = OpFAdd %124 %127 
                                                      OpStore vs_TEXCOORD1 %128 
                                       f32_4 %130 = OpLoad %118 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %133 = OpAccessChain %20 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %131 %135 
                              Uniform f32_4* %137 = OpAccessChain %20 %132 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore vs_TEXCOORD3 %140 
                                Uniform f32* %142 = OpAccessChain %20 %141 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFNegate %143 
                                Uniform f32* %146 = OpAccessChain %20 %145 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %144 %147 
                                         f32 %150 = OpFAdd %148 %149 
                                Private f32* %151 = OpAccessChain %9 %83 
                                                      OpStore %151 %150 
                                Uniform f32* %153 = OpAccessChain %20 %152 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                Uniform f32* %156 = OpAccessChain %20 %145 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %155 %157 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %9 %83 
                                                      OpStore %162 %161 
                                Private f32* %164 = OpAccessChain %9 %83 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFMul %165 %166 
                                                      OpStore vs_TEXCOORD2 %167 
                                 Output f32* %168 = OpAccessChain %96 %27 %92 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                 Output f32* %171 = OpAccessChain %96 %27 %92 
                                                      OpStore %171 %170 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 56
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %31 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD2 Location 31 
                                             OpDecorate %53 Location 53 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD2 = OpVariable Input 
                                     %35 = OpTypeBool 
                                     %36 = OpTypePointer Private %35 
                       Private bool* %37 = OpVariable Private 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %42 = OpTypeInt 32 1 
                                 i32 %43 = OpConstant 0 
                                 i32 %44 = OpConstant 1 
                                 i32 %46 = OpConstant -1 
                                     %52 = OpTypePointer Output %23 
                       Output f32_4* %53 = OpVariable Output 
                               f32_4 %54 = OpConstantComposite %39 %39 %39 %39 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD1 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                                 f32 %32 = OpLoad vs_TEXCOORD2 
                                 f32 %33 = OpFNegate %32 
                                 f32 %34 = OpFAdd %29 %33 
                                             OpStore %28 %34 
                                 f32 %38 = OpLoad %28 
                                bool %40 = OpFOrdLessThan %38 %39 
                                             OpStore %37 %40 
                                bool %41 = OpLoad %37 
                                 i32 %45 = OpSelect %41 %44 %43 
                                 i32 %47 = OpIMul %45 %46 
                                bool %48 = OpINotEqual %47 %43 
                                             OpSelectionMerge %50 None 
                                             OpBranchConditional %48 %49 %50 
                                     %49 = OpLabel 
                                             OpKill
                                     %50 = OpLabel 
                                             OpStore %53 %54 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_CUBE" }
""
}
}
}
}
CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}