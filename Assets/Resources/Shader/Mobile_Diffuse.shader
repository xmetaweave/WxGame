//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Mobile/Diffuse" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader {
 LOD 150
 Tags { "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  LOD 150
  Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 3410
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 66
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                                     %52 = OpTypePointer Output %13 
                       Output f32_4* %53 = OpVariable Output 
                                 f32 %60 = OpConstant 3.674022E-40 
                                     %61 = OpTypeInt 32 0 
                                 u32 %62 = OpConstant 3 
                                     %63 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                                 f32 %54 = OpLoad %8 
                               f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                               f32_3 %56 = OpLoad %45 
                               f32_3 %57 = OpFMul %55 %56 
                               f32_4 %58 = OpLoad %53 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %53 %59 
                         Output f32* %64 = OpAccessChain %53 %62 
                                             OpStore %64 %60 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 66
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                                     %52 = OpTypePointer Output %13 
                       Output f32_4* %53 = OpVariable Output 
                                 f32 %60 = OpConstant 3.674022E-40 
                                     %61 = OpTypeInt 32 0 
                                 u32 %62 = OpConstant 3 
                                     %63 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                                 f32 %54 = OpLoad %8 
                               f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                               f32_3 %56 = OpLoad %45 
                               f32_3 %57 = OpFMul %55 %56 
                               f32_4 %58 = OpLoad %53 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %53 %59 
                         Output f32* %64 = OpAccessChain %53 %62 
                                             OpStore %64 %60 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 66
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                                     %52 = OpTypePointer Output %13 
                       Output f32_4* %53 = OpVariable Output 
                                 f32 %60 = OpConstant 3.674022E-40 
                                     %61 = OpTypeInt 32 0 
                                 u32 %62 = OpConstant 3 
                                     %63 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                                 f32 %54 = OpLoad %8 
                               f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                               f32_3 %56 = OpLoad %45 
                               f32_3 %57 = OpFMul %55 %56 
                               f32_4 %58 = OpLoad %53 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %53 %59 
                         Output f32* %64 = OpAccessChain %53 %62 
                                             OpStore %64 %60 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %261 %264 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 261 
                                                      OpDecorate vs_TEXCOORD5 Location 264 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %154 = OpTypePointer Private %51 
                              Private f32_3* %155 = OpVariable Private 
                              Private f32_4* %172 = OpVariable Private 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %184 = OpConstant 4 
                                         i32 %190 = OpConstant 5 
                                         i32 %196 = OpConstant 6 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         u32 %206 = OpConstant 3 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_3 %228 = OpConstantComposite %227 %227 %227 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %265 = OpConstantComposite %227 %227 %227 %227 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                Private f32* %156 = OpAccessChain %9 %83 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %9 %83 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %155 %120 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                Private f32* %164 = OpAccessChain %9 %120 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Private f32* %167 = OpAccessChain %155 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFNegate %168 
                                         f32 %170 = OpFAdd %166 %169 
                                Private f32* %171 = OpAccessChain %155 %120 
                                                      OpStore %171 %170 
                                       f32_4 %173 = OpLoad %9 
                                       f32_4 %174 = OpVectorShuffle %173 %173 1 2 2 0 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 1 2 2 
                                       f32_4 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                              Uniform f32_4* %179 = OpAccessChain %21 %47 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpLoad %172 
                                         f32 %182 = OpDot %180 %181 
                                Private f32* %183 = OpAccessChain %178 %120 
                                                      OpStore %183 %182 
                              Uniform f32_4* %185 = OpAccessChain %21 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %172 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %178 %83 
                                                      OpStore %189 %188 
                              Uniform f32_4* %191 = OpAccessChain %21 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %172 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %178 %134 
                                                      OpStore %195 %194 
                              Uniform f32_4* %197 = OpAccessChain %21 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpLoad %155 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %178 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %155 %204 
                                Private f32* %207 = OpAccessChain %9 %206 
                                                      OpStore %207 %205 
                              Uniform f32_4* %208 = OpAccessChain %21 %29 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %9 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %178 %120 
                                                      OpStore %212 %211 
                              Uniform f32_4* %213 = OpAccessChain %21 %24 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %9 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %178 %83 
                                                      OpStore %217 %216 
                              Uniform f32_4* %218 = OpAccessChain %21 %37 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %9 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %178 %134 
                                                      OpStore %222 %221 
                                       f32_3 %223 = OpLoad %155 
                                       f32_3 %224 = OpLoad %178 
                                       f32_3 %225 = OpFAdd %223 %224 
                                                      OpStore %155 %225 
                                       f32_3 %226 = OpLoad %155 
                                       f32_3 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %155 %229 
                                       f32_3 %230 = OpLoad %155 
                                       f32_3 %231 = OpExtInst %1 30 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %238 = OpFMul %235 %237 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %9 %240 
                                       f32_4 %241 = OpLoad %9 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %9 %245 
                                       f32_4 %246 = OpLoad %9 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %9 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %9 %255 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpExtInst %1 40 %257 %228 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                                      OpStore vs_TEXCOORD3 %263 
                                                      OpStore vs_TEXCOORD5 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %54 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 Location 54 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                      Private f32_3* %52 = OpVariable Private 
               Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                     %57 = OpTypePointer Output %13 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                               f32_3 %53 = OpLoad %28 
                               f32_3 %55 = OpLoad vs_TEXCOORD3 
                               f32_3 %56 = OpFMul %53 %55 
                                             OpStore %52 %56 
                               f32_3 %59 = OpLoad %45 
                                 f32 %60 = OpLoad %8 
                               f32_3 %61 = OpCompositeConstruct %60 %60 %60 
                               f32_3 %62 = OpFMul %59 %61 
                               f32_3 %63 = OpLoad %52 
                               f32_3 %64 = OpFAdd %62 %63 
                               f32_4 %65 = OpLoad %58 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %58 %66 
                         Output f32* %71 = OpAccessChain %58 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %261 %264 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 261 
                                                      OpDecorate vs_TEXCOORD5 Location 264 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %154 = OpTypePointer Private %51 
                              Private f32_3* %155 = OpVariable Private 
                              Private f32_4* %172 = OpVariable Private 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %184 = OpConstant 4 
                                         i32 %190 = OpConstant 5 
                                         i32 %196 = OpConstant 6 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         u32 %206 = OpConstant 3 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_3 %228 = OpConstantComposite %227 %227 %227 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %265 = OpConstantComposite %227 %227 %227 %227 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                Private f32* %156 = OpAccessChain %9 %83 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %9 %83 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %155 %120 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                Private f32* %164 = OpAccessChain %9 %120 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Private f32* %167 = OpAccessChain %155 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFNegate %168 
                                         f32 %170 = OpFAdd %166 %169 
                                Private f32* %171 = OpAccessChain %155 %120 
                                                      OpStore %171 %170 
                                       f32_4 %173 = OpLoad %9 
                                       f32_4 %174 = OpVectorShuffle %173 %173 1 2 2 0 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 1 2 2 
                                       f32_4 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                              Uniform f32_4* %179 = OpAccessChain %21 %47 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpLoad %172 
                                         f32 %182 = OpDot %180 %181 
                                Private f32* %183 = OpAccessChain %178 %120 
                                                      OpStore %183 %182 
                              Uniform f32_4* %185 = OpAccessChain %21 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %172 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %178 %83 
                                                      OpStore %189 %188 
                              Uniform f32_4* %191 = OpAccessChain %21 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %172 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %178 %134 
                                                      OpStore %195 %194 
                              Uniform f32_4* %197 = OpAccessChain %21 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpLoad %155 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %178 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %155 %204 
                                Private f32* %207 = OpAccessChain %9 %206 
                                                      OpStore %207 %205 
                              Uniform f32_4* %208 = OpAccessChain %21 %29 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %9 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %178 %120 
                                                      OpStore %212 %211 
                              Uniform f32_4* %213 = OpAccessChain %21 %24 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %9 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %178 %83 
                                                      OpStore %217 %216 
                              Uniform f32_4* %218 = OpAccessChain %21 %37 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %9 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %178 %134 
                                                      OpStore %222 %221 
                                       f32_3 %223 = OpLoad %155 
                                       f32_3 %224 = OpLoad %178 
                                       f32_3 %225 = OpFAdd %223 %224 
                                                      OpStore %155 %225 
                                       f32_3 %226 = OpLoad %155 
                                       f32_3 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %155 %229 
                                       f32_3 %230 = OpLoad %155 
                                       f32_3 %231 = OpExtInst %1 30 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %238 = OpFMul %235 %237 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %9 %240 
                                       f32_4 %241 = OpLoad %9 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %9 %245 
                                       f32_4 %246 = OpLoad %9 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %9 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %9 %255 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpExtInst %1 40 %257 %228 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                                      OpStore vs_TEXCOORD3 %263 
                                                      OpStore vs_TEXCOORD5 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %54 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 Location 54 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                      Private f32_3* %52 = OpVariable Private 
               Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                     %57 = OpTypePointer Output %13 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                               f32_3 %53 = OpLoad %28 
                               f32_3 %55 = OpLoad vs_TEXCOORD3 
                               f32_3 %56 = OpFMul %53 %55 
                                             OpStore %52 %56 
                               f32_3 %59 = OpLoad %45 
                                 f32 %60 = OpLoad %8 
                               f32_3 %61 = OpCompositeConstruct %60 %60 %60 
                               f32_3 %62 = OpFMul %59 %61 
                               f32_3 %63 = OpLoad %52 
                               f32_3 %64 = OpFAdd %62 %63 
                               f32_4 %65 = OpLoad %58 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %58 %66 
                         Output f32* %71 = OpAccessChain %58 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %261 %264 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 261 
                                                      OpDecorate vs_TEXCOORD5 Location 264 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %154 = OpTypePointer Private %51 
                              Private f32_3* %155 = OpVariable Private 
                              Private f32_4* %172 = OpVariable Private 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %184 = OpConstant 4 
                                         i32 %190 = OpConstant 5 
                                         i32 %196 = OpConstant 6 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         u32 %206 = OpConstant 3 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_3 %228 = OpConstantComposite %227 %227 %227 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %265 = OpConstantComposite %227 %227 %227 %227 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                Private f32* %156 = OpAccessChain %9 %83 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %9 %83 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %155 %120 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                Private f32* %164 = OpAccessChain %9 %120 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Private f32* %167 = OpAccessChain %155 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFNegate %168 
                                         f32 %170 = OpFAdd %166 %169 
                                Private f32* %171 = OpAccessChain %155 %120 
                                                      OpStore %171 %170 
                                       f32_4 %173 = OpLoad %9 
                                       f32_4 %174 = OpVectorShuffle %173 %173 1 2 2 0 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 1 2 2 
                                       f32_4 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                              Uniform f32_4* %179 = OpAccessChain %21 %47 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpLoad %172 
                                         f32 %182 = OpDot %180 %181 
                                Private f32* %183 = OpAccessChain %178 %120 
                                                      OpStore %183 %182 
                              Uniform f32_4* %185 = OpAccessChain %21 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %172 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %178 %83 
                                                      OpStore %189 %188 
                              Uniform f32_4* %191 = OpAccessChain %21 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %172 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %178 %134 
                                                      OpStore %195 %194 
                              Uniform f32_4* %197 = OpAccessChain %21 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpLoad %155 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %178 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %155 %204 
                                Private f32* %207 = OpAccessChain %9 %206 
                                                      OpStore %207 %205 
                              Uniform f32_4* %208 = OpAccessChain %21 %29 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %9 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %178 %120 
                                                      OpStore %212 %211 
                              Uniform f32_4* %213 = OpAccessChain %21 %24 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %9 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %178 %83 
                                                      OpStore %217 %216 
                              Uniform f32_4* %218 = OpAccessChain %21 %37 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %9 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %178 %134 
                                                      OpStore %222 %221 
                                       f32_3 %223 = OpLoad %155 
                                       f32_3 %224 = OpLoad %178 
                                       f32_3 %225 = OpFAdd %223 %224 
                                                      OpStore %155 %225 
                                       f32_3 %226 = OpLoad %155 
                                       f32_3 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %155 %229 
                                       f32_3 %230 = OpLoad %155 
                                       f32_3 %231 = OpExtInst %1 30 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %238 = OpFMul %235 %237 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %9 %240 
                                       f32_4 %241 = OpLoad %9 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %9 %245 
                                       f32_4 %246 = OpLoad %9 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %9 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %9 %255 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpExtInst %1 40 %257 %228 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                                      OpStore vs_TEXCOORD3 %263 
                                                      OpStore vs_TEXCOORD5 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %54 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 Location 54 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                      Private f32_3* %52 = OpVariable Private 
               Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                     %57 = OpTypePointer Output %13 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                               f32_3 %53 = OpLoad %28 
                               f32_3 %55 = OpLoad vs_TEXCOORD3 
                               f32_3 %56 = OpFMul %53 %55 
                                             OpStore %52 %56 
                               f32_3 %59 = OpLoad %45 
                                 f32 %60 = OpLoad %8 
                               f32_3 %61 = OpCompositeConstruct %60 %60 %60 
                               f32_3 %62 = OpFMul %59 %61 
                               f32_3 %63 = OpLoad %52 
                               f32_3 %64 = OpFAdd %62 %63 
                               f32_4 %65 = OpLoad %58 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %58 %66 
                         Output f32* %71 = OpAccessChain %58 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_5;
mediump float u_xlat16_11;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat3.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_11 = max(u_xlat16_11, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_5;
mediump float u_xlat16_11;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat3.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_11 = max(u_xlat16_11, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_5;
mediump float u_xlat16_11;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat3.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_11 = max(u_xlat16_11, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 156
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                                      OpDecorate vs_TEXCOORD6 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %150 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                                      OpStore vs_TEXCOORD6 %148 
                                 Output f32* %151 = OpAccessChain %85 %23 %81 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                 Output f32* %154 = OpAccessChain %85 %23 %81 
                                                      OpStore %154 %153 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %195 %203 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %190 DescriptorSet 190 
                                                      OpDecorate %190 Binding 190 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 195 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 203 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_3* %48 = OpVariable Private 
                                          i32 %49 = OpConstant 5 
                                          u32 %50 = OpConstant 2 
                                              %51 = OpTypePointer Uniform %6 
                                          i32 %55 = OpConstant 1 
                                          u32 %58 = OpConstant 1 
                                          i32 %60 = OpConstant 2 
                                          u32 %75 = OpConstant 3 
                                          i32 %87 = OpConstant 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                             %128 = OpTypePointer Function %7 
                                             %130 = OpTypeVector %6 2 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %140 = OpTypePointer UniformConstant %139 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                                             %143 = OpTypeSampler 
                                             %144 = OpTypePointer UniformConstant %143 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %148 = OpTypeSampledImage %147 
                              Private f32_3* %153 = OpVariable Private 
                                Private f32* %167 = OpVariable Private 
                                         i32 %182 = OpConstant 6 
                              Private f32_3* %187 = OpVariable Private 
        UniformConstant read_only Texture2D* %188 = OpVariable UniformConstant 
                    UniformConstant sampler* %190 = OpVariable UniformConstant 
                                             %192 = OpTypeSampledImage %139 
                                             %194 = OpTypePointer Input %130 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %211 = OpTypePointer Output %13 
                               Output f32_4* %212 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %129 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %52 = OpAccessChain %21 %49 %43 %50 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %48 %33 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %21 %49 %55 %50 
                                          f32 %57 = OpLoad %56 
                                 Private f32* %59 = OpAccessChain %48 %58 
                                                      OpStore %59 %57 
                                 Uniform f32* %61 = OpAccessChain %21 %49 %60 %50 
                                          f32 %62 = OpLoad %61 
                                 Private f32* %63 = OpAccessChain %48 %50 
                                                      OpStore %63 %62 
                                        f32_3 %64 = OpLoad %40 
                                        f32_3 %65 = OpLoad %48 
                                          f32 %66 = OpDot %64 %65 
                                 Private f32* %67 = OpAccessChain %40 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %40 %33 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                 Private f32* %71 = OpAccessChain %9 %33 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %70 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %76 = OpAccessChain %21 %23 %75 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %40 %33 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFAdd %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %33 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %9 %33 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %88 = OpAccessChain %21 %87 %50 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFMul %86 %89 
                                 Uniform f32* %91 = OpAccessChain %21 %87 %75 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFAdd %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %33 
                                                      OpStore %94 %93 
                                 Private f32* %95 = OpAccessChain %9 %33 
                                          f32 %96 = OpLoad %95 
                                          f32 %99 = OpExtInst %1 43 %96 %97 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD2 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %60 %55 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_3 %106 = OpFMul %102 %105 
                                                      OpStore %40 %106 
                              Uniform f32_4* %107 = OpAccessChain %21 %60 %43 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpLoad vs_TEXCOORD2 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 0 0 
                                       f32_3 %112 = OpFMul %109 %111 
                                       f32_3 %113 = OpLoad %40 
                                       f32_3 %114 = OpFAdd %112 %113 
                                                      OpStore %40 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %60 %60 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad vs_TEXCOORD2 
                                       f32_3 %119 = OpVectorShuffle %118 %118 2 2 2 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %40 
                                       f32_3 %122 = OpFAdd %120 %121 
                                                      OpStore %40 %122 
                                       f32_3 %123 = OpLoad %40 
                              Uniform f32_4* %124 = OpAccessChain %21 %60 %87 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %123 %126 
                                                      OpStore %40 %127 
                                       f32_3 %131 = OpLoad %40 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                Private f32* %133 = OpAccessChain %40 %50 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpCompositeExtract %132 0 
                                         f32 %136 = OpCompositeExtract %132 1 
                                       f32_3 %137 = OpCompositeConstruct %135 %136 %134 
                                                      OpStore %129 %137 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %149 = OpSampledImage %142 %146 
                                       f32_3 %150 = OpLoad %129 
                                         f32 %151 = OpCompositeExtract %150 2 
                                         f32 %152 = OpImageSampleDrefExplicitLod %149 %150 %151 Lod %6 
                                                      OpStore %138 %152 
                                Uniform f32* %154 = OpAccessChain %21 %87 %33 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFNegate %155 
                                         f32 %157 = OpFAdd %156 %98 
                                Private f32* %158 = OpAccessChain %153 %33 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %138 
                                Private f32* %160 = OpAccessChain %153 %33 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                Uniform f32* %163 = OpAccessChain %21 %87 %33 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %153 %33 
                                                      OpStore %166 %165 
                                Private f32* %168 = OpAccessChain %153 %33 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %170 %98 
                                                      OpStore %167 %171 
                                Private f32* %172 = OpAccessChain %9 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpLoad %167 
                                         f32 %175 = OpFMul %173 %174 
                                Private f32* %176 = OpAccessChain %153 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFAdd %175 %177 
                                Private f32* %179 = OpAccessChain %153 %33 
                                                      OpStore %179 %178 
                                       f32_3 %180 = OpLoad %153 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %181 %185 
                                                      OpStore %153 %186 
                         read_only Texture2D %189 = OpLoad %188 
                                     sampler %191 = OpLoad %190 
                  read_only Texture2DSampled %193 = OpSampledImage %189 %191 
                                       f32_2 %196 = OpLoad vs_TEXCOORD0 
                                       f32_4 %197 = OpImageSampleImplicitLod %193 %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %187 %198 
                                       f32_3 %199 = OpLoad %153 
                                       f32_3 %200 = OpLoad %187 
                                       f32_3 %201 = OpFMul %199 %200 
                                                      OpStore %153 %201 
                                       f32_3 %204 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %205 = OpAccessChain %21 %55 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                                      OpStore %202 %208 
                                         f32 %209 = OpLoad %202 
                                         f32 %210 = OpExtInst %1 40 %209 %97 
                                                      OpStore %202 %210 
                                         f32 %213 = OpLoad %202 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %153 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                 Output f32* %220 = OpAccessChain %212 %75 
                                                      OpStore %220 %98 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 156
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                                      OpDecorate vs_TEXCOORD6 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %150 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                                      OpStore vs_TEXCOORD6 %148 
                                 Output f32* %151 = OpAccessChain %85 %23 %81 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                 Output f32* %154 = OpAccessChain %85 %23 %81 
                                                      OpStore %154 %153 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %195 %203 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %190 DescriptorSet 190 
                                                      OpDecorate %190 Binding 190 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 195 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 203 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_3* %48 = OpVariable Private 
                                          i32 %49 = OpConstant 5 
                                          u32 %50 = OpConstant 2 
                                              %51 = OpTypePointer Uniform %6 
                                          i32 %55 = OpConstant 1 
                                          u32 %58 = OpConstant 1 
                                          i32 %60 = OpConstant 2 
                                          u32 %75 = OpConstant 3 
                                          i32 %87 = OpConstant 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                             %128 = OpTypePointer Function %7 
                                             %130 = OpTypeVector %6 2 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %140 = OpTypePointer UniformConstant %139 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                                             %143 = OpTypeSampler 
                                             %144 = OpTypePointer UniformConstant %143 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %148 = OpTypeSampledImage %147 
                              Private f32_3* %153 = OpVariable Private 
                                Private f32* %167 = OpVariable Private 
                                         i32 %182 = OpConstant 6 
                              Private f32_3* %187 = OpVariable Private 
        UniformConstant read_only Texture2D* %188 = OpVariable UniformConstant 
                    UniformConstant sampler* %190 = OpVariable UniformConstant 
                                             %192 = OpTypeSampledImage %139 
                                             %194 = OpTypePointer Input %130 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %211 = OpTypePointer Output %13 
                               Output f32_4* %212 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %129 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %52 = OpAccessChain %21 %49 %43 %50 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %48 %33 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %21 %49 %55 %50 
                                          f32 %57 = OpLoad %56 
                                 Private f32* %59 = OpAccessChain %48 %58 
                                                      OpStore %59 %57 
                                 Uniform f32* %61 = OpAccessChain %21 %49 %60 %50 
                                          f32 %62 = OpLoad %61 
                                 Private f32* %63 = OpAccessChain %48 %50 
                                                      OpStore %63 %62 
                                        f32_3 %64 = OpLoad %40 
                                        f32_3 %65 = OpLoad %48 
                                          f32 %66 = OpDot %64 %65 
                                 Private f32* %67 = OpAccessChain %40 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %40 %33 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                 Private f32* %71 = OpAccessChain %9 %33 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %70 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %76 = OpAccessChain %21 %23 %75 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %40 %33 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFAdd %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %33 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %9 %33 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %88 = OpAccessChain %21 %87 %50 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFMul %86 %89 
                                 Uniform f32* %91 = OpAccessChain %21 %87 %75 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFAdd %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %33 
                                                      OpStore %94 %93 
                                 Private f32* %95 = OpAccessChain %9 %33 
                                          f32 %96 = OpLoad %95 
                                          f32 %99 = OpExtInst %1 43 %96 %97 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD2 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %60 %55 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_3 %106 = OpFMul %102 %105 
                                                      OpStore %40 %106 
                              Uniform f32_4* %107 = OpAccessChain %21 %60 %43 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpLoad vs_TEXCOORD2 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 0 0 
                                       f32_3 %112 = OpFMul %109 %111 
                                       f32_3 %113 = OpLoad %40 
                                       f32_3 %114 = OpFAdd %112 %113 
                                                      OpStore %40 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %60 %60 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad vs_TEXCOORD2 
                                       f32_3 %119 = OpVectorShuffle %118 %118 2 2 2 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %40 
                                       f32_3 %122 = OpFAdd %120 %121 
                                                      OpStore %40 %122 
                                       f32_3 %123 = OpLoad %40 
                              Uniform f32_4* %124 = OpAccessChain %21 %60 %87 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %123 %126 
                                                      OpStore %40 %127 
                                       f32_3 %131 = OpLoad %40 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                Private f32* %133 = OpAccessChain %40 %50 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpCompositeExtract %132 0 
                                         f32 %136 = OpCompositeExtract %132 1 
                                       f32_3 %137 = OpCompositeConstruct %135 %136 %134 
                                                      OpStore %129 %137 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %149 = OpSampledImage %142 %146 
                                       f32_3 %150 = OpLoad %129 
                                         f32 %151 = OpCompositeExtract %150 2 
                                         f32 %152 = OpImageSampleDrefExplicitLod %149 %150 %151 Lod %6 
                                                      OpStore %138 %152 
                                Uniform f32* %154 = OpAccessChain %21 %87 %33 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFNegate %155 
                                         f32 %157 = OpFAdd %156 %98 
                                Private f32* %158 = OpAccessChain %153 %33 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %138 
                                Private f32* %160 = OpAccessChain %153 %33 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                Uniform f32* %163 = OpAccessChain %21 %87 %33 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %153 %33 
                                                      OpStore %166 %165 
                                Private f32* %168 = OpAccessChain %153 %33 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %170 %98 
                                                      OpStore %167 %171 
                                Private f32* %172 = OpAccessChain %9 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpLoad %167 
                                         f32 %175 = OpFMul %173 %174 
                                Private f32* %176 = OpAccessChain %153 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFAdd %175 %177 
                                Private f32* %179 = OpAccessChain %153 %33 
                                                      OpStore %179 %178 
                                       f32_3 %180 = OpLoad %153 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %181 %185 
                                                      OpStore %153 %186 
                         read_only Texture2D %189 = OpLoad %188 
                                     sampler %191 = OpLoad %190 
                  read_only Texture2DSampled %193 = OpSampledImage %189 %191 
                                       f32_2 %196 = OpLoad vs_TEXCOORD0 
                                       f32_4 %197 = OpImageSampleImplicitLod %193 %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %187 %198 
                                       f32_3 %199 = OpLoad %153 
                                       f32_3 %200 = OpLoad %187 
                                       f32_3 %201 = OpFMul %199 %200 
                                                      OpStore %153 %201 
                                       f32_3 %204 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %205 = OpAccessChain %21 %55 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                                      OpStore %202 %208 
                                         f32 %209 = OpLoad %202 
                                         f32 %210 = OpExtInst %1 40 %209 %97 
                                                      OpStore %202 %210 
                                         f32 %213 = OpLoad %202 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %153 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                 Output f32* %220 = OpAccessChain %212 %75 
                                                      OpStore %220 %98 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 156
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                                      OpDecorate vs_TEXCOORD6 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %150 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                                      OpStore vs_TEXCOORD6 %148 
                                 Output f32* %151 = OpAccessChain %85 %23 %81 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                 Output f32* %154 = OpAccessChain %85 %23 %81 
                                                      OpStore %154 %153 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %195 %203 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %190 DescriptorSet 190 
                                                      OpDecorate %190 Binding 190 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 195 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 203 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_3* %48 = OpVariable Private 
                                          i32 %49 = OpConstant 5 
                                          u32 %50 = OpConstant 2 
                                              %51 = OpTypePointer Uniform %6 
                                          i32 %55 = OpConstant 1 
                                          u32 %58 = OpConstant 1 
                                          i32 %60 = OpConstant 2 
                                          u32 %75 = OpConstant 3 
                                          i32 %87 = OpConstant 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                             %128 = OpTypePointer Function %7 
                                             %130 = OpTypeVector %6 2 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %140 = OpTypePointer UniformConstant %139 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                                             %143 = OpTypeSampler 
                                             %144 = OpTypePointer UniformConstant %143 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %148 = OpTypeSampledImage %147 
                              Private f32_3* %153 = OpVariable Private 
                                Private f32* %167 = OpVariable Private 
                                         i32 %182 = OpConstant 6 
                              Private f32_3* %187 = OpVariable Private 
        UniformConstant read_only Texture2D* %188 = OpVariable UniformConstant 
                    UniformConstant sampler* %190 = OpVariable UniformConstant 
                                             %192 = OpTypeSampledImage %139 
                                             %194 = OpTypePointer Input %130 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %211 = OpTypePointer Output %13 
                               Output f32_4* %212 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %129 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %52 = OpAccessChain %21 %49 %43 %50 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %48 %33 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %21 %49 %55 %50 
                                          f32 %57 = OpLoad %56 
                                 Private f32* %59 = OpAccessChain %48 %58 
                                                      OpStore %59 %57 
                                 Uniform f32* %61 = OpAccessChain %21 %49 %60 %50 
                                          f32 %62 = OpLoad %61 
                                 Private f32* %63 = OpAccessChain %48 %50 
                                                      OpStore %63 %62 
                                        f32_3 %64 = OpLoad %40 
                                        f32_3 %65 = OpLoad %48 
                                          f32 %66 = OpDot %64 %65 
                                 Private f32* %67 = OpAccessChain %40 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %40 %33 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                 Private f32* %71 = OpAccessChain %9 %33 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %70 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %76 = OpAccessChain %21 %23 %75 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %40 %33 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFAdd %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %33 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %9 %33 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %88 = OpAccessChain %21 %87 %50 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFMul %86 %89 
                                 Uniform f32* %91 = OpAccessChain %21 %87 %75 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFAdd %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %33 
                                                      OpStore %94 %93 
                                 Private f32* %95 = OpAccessChain %9 %33 
                                          f32 %96 = OpLoad %95 
                                          f32 %99 = OpExtInst %1 43 %96 %97 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD2 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %60 %55 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_3 %106 = OpFMul %102 %105 
                                                      OpStore %40 %106 
                              Uniform f32_4* %107 = OpAccessChain %21 %60 %43 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpLoad vs_TEXCOORD2 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 0 0 
                                       f32_3 %112 = OpFMul %109 %111 
                                       f32_3 %113 = OpLoad %40 
                                       f32_3 %114 = OpFAdd %112 %113 
                                                      OpStore %40 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %60 %60 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad vs_TEXCOORD2 
                                       f32_3 %119 = OpVectorShuffle %118 %118 2 2 2 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %40 
                                       f32_3 %122 = OpFAdd %120 %121 
                                                      OpStore %40 %122 
                                       f32_3 %123 = OpLoad %40 
                              Uniform f32_4* %124 = OpAccessChain %21 %60 %87 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %123 %126 
                                                      OpStore %40 %127 
                                       f32_3 %131 = OpLoad %40 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                Private f32* %133 = OpAccessChain %40 %50 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpCompositeExtract %132 0 
                                         f32 %136 = OpCompositeExtract %132 1 
                                       f32_3 %137 = OpCompositeConstruct %135 %136 %134 
                                                      OpStore %129 %137 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %149 = OpSampledImage %142 %146 
                                       f32_3 %150 = OpLoad %129 
                                         f32 %151 = OpCompositeExtract %150 2 
                                         f32 %152 = OpImageSampleDrefExplicitLod %149 %150 %151 Lod %6 
                                                      OpStore %138 %152 
                                Uniform f32* %154 = OpAccessChain %21 %87 %33 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFNegate %155 
                                         f32 %157 = OpFAdd %156 %98 
                                Private f32* %158 = OpAccessChain %153 %33 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %138 
                                Private f32* %160 = OpAccessChain %153 %33 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                Uniform f32* %163 = OpAccessChain %21 %87 %33 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %153 %33 
                                                      OpStore %166 %165 
                                Private f32* %168 = OpAccessChain %153 %33 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %170 %98 
                                                      OpStore %167 %171 
                                Private f32* %172 = OpAccessChain %9 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpLoad %167 
                                         f32 %175 = OpFMul %173 %174 
                                Private f32* %176 = OpAccessChain %153 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFAdd %175 %177 
                                Private f32* %179 = OpAccessChain %153 %33 
                                                      OpStore %179 %178 
                                       f32_3 %180 = OpLoad %153 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %181 %185 
                                                      OpStore %153 %186 
                         read_only Texture2D %189 = OpLoad %188 
                                     sampler %191 = OpLoad %190 
                  read_only Texture2DSampled %193 = OpSampledImage %189 %191 
                                       f32_2 %196 = OpLoad vs_TEXCOORD0 
                                       f32_4 %197 = OpImageSampleImplicitLod %193 %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %187 %198 
                                       f32_3 %199 = OpLoad %153 
                                       f32_3 %200 = OpLoad %187 
                                       f32_3 %201 = OpFMul %199 %200 
                                                      OpStore %153 %201 
                                       f32_3 %204 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %205 = OpAccessChain %21 %55 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                                      OpStore %202 %208 
                                         f32 %209 = OpLoad %202 
                                         f32 %210 = OpExtInst %1 40 %209 %97 
                                                      OpStore %202 %210 
                                         f32 %213 = OpLoad %202 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %153 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                 Output f32* %220 = OpAccessChain %212 %75 
                                                      OpStore %220 %98 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump float u_xlat16_4;
mediump float u_xlat16_6;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_14 = max(u_xlat16_14, 0.0);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump float u_xlat16_4;
mediump float u_xlat16_6;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_14 = max(u_xlat16_14, 0.0);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump float u_xlat16_4;
mediump float u_xlat16_6;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_14 = max(u_xlat16_14, 0.0);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 210
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %191 %200 %203 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 191 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 200 
                                                      OpDecorate vs_TEXCOORD6 Location 203 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 6 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 7 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 5 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %154 = OpVariable Private 
                              Private f32_4* %168 = OpVariable Private 
                                             %174 = OpTypePointer Private %51 
                              Private f32_3* %175 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %201 = OpConstant 3.674022E-40 
                                       f32_4 %202 = OpConstantComposite %201 %201 %201 %201 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %204 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                Private f32* %155 = OpAccessChain %9 %83 
                                         f32 %156 = OpLoad %155 
                                Private f32* %157 = OpAccessChain %9 %83 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                Private f32* %160 = OpAccessChain %9 %120 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                         f32 %165 = OpLoad %154 
                                         f32 %166 = OpFNegate %165 
                                         f32 %167 = OpFAdd %164 %166 
                                                      OpStore %154 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_4 %170 = OpVectorShuffle %169 %169 1 2 2 0 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %171 0 1 2 2 
                                       f32_4 %173 = OpFMul %170 %172 
                                                      OpStore %168 %173 
                              Uniform f32_4* %176 = OpAccessChain %21 %29 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpLoad %168 
                                         f32 %179 = OpDot %177 %178 
                                Private f32* %180 = OpAccessChain %175 %120 
                                                      OpStore %180 %179 
                              Uniform f32_4* %181 = OpAccessChain %21 %24 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %168 
                                         f32 %184 = OpDot %182 %183 
                                Private f32* %185 = OpAccessChain %175 %83 
                                                      OpStore %185 %184 
                              Uniform f32_4* %186 = OpAccessChain %21 %37 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %168 
                                         f32 %189 = OpDot %187 %188 
                                Private f32* %190 = OpAccessChain %175 %134 
                                                      OpStore %190 %189 
                              Uniform f32_4* %192 = OpAccessChain %21 %47 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpLoad %154 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_3 %198 = OpLoad %175 
                                       f32_3 %199 = OpFAdd %197 %198 
                                                      OpStore vs_TEXCOORD3 %199 
                                                      OpStore vs_TEXCOORD5 %202 
                                                      OpStore vs_TEXCOORD6 %202 
                                 Output f32* %205 = OpAccessChain %87 %29 %83 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                 Output f32* %208 = OpAccessChain %87 %29 %83 
                                                      OpStore %208 %207 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %199 %206 %229 %265 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 DescriptorSet 149 
                                                      OpDecorate %149 Binding 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 DescriptorSet 192 
                                                      OpDecorate %192 Binding 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %194 DescriptorSet 194 
                                                      OpDecorate %194 Binding 194 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 206 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 229 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %265 Location 265 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                                              %48 = OpTypePointer Private %13 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %50 = OpConstant 8 
                                          u32 %51 = OpConstant 2 
                                              %52 = OpTypePointer Uniform %6 
                                          i32 %56 = OpConstant 1 
                                          u32 %59 = OpConstant 1 
                                          i32 %61 = OpConstant 2 
                                          u32 %77 = OpConstant 3 
                                          i32 %89 = OpConstant 6 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         i32 %105 = OpConstant 5 
                                         i32 %127 = OpConstant 3 
                                             %132 = OpTypePointer Function %7 
                                             %134 = OpTypeVector %6 2 
                                Private f32* %142 = OpVariable Private 
                                             %143 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %144 = OpTypePointer UniformConstant %143 
        UniformConstant read_only Texture2D* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeSampler 
                                             %148 = OpTypePointer UniformConstant %147 
                    UniformConstant sampler* %149 = OpVariable UniformConstant 
                                             %151 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %152 = OpTypeSampledImage %151 
                              Private f32_3* %157 = OpVariable Private 
                                Private f32* %171 = OpVariable Private 
                                         i32 %186 = OpConstant 9 
                              Private f32_3* %191 = OpVariable Private 
        UniformConstant read_only Texture2D* %192 = OpVariable UniformConstant 
                    UniformConstant sampler* %194 = OpVariable UniformConstant 
                                             %196 = OpTypeSampledImage %143 
                                             %198 = OpTypePointer Input %134 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %211 = OpVariable Private 
                                         i32 %222 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %233 = OpConstantComposite %99 %99 %99 
                              Private f32_3* %235 = OpVariable Private 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                Private f32* %256 = OpVariable Private 
                                             %264 = OpTypePointer Output %13 
                               Output f32_4* %265 = OpVariable Output 
                                             %274 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %133 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %53 = OpAccessChain %21 %50 %43 %51 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %49 %33 
                                                      OpStore %55 %54 
                                 Uniform f32* %57 = OpAccessChain %21 %50 %56 %51 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %60 = OpAccessChain %49 %59 
                                                      OpStore %60 %58 
                                 Uniform f32* %62 = OpAccessChain %21 %50 %61 %51 
                                          f32 %63 = OpLoad %62 
                                 Private f32* %64 = OpAccessChain %49 %51 
                                                      OpStore %64 %63 
                                        f32_3 %65 = OpLoad %40 
                                        f32_4 %66 = OpLoad %49 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %68 = OpDot %65 %67 
                                 Private f32* %69 = OpAccessChain %40 %33 
                                                      OpStore %69 %68 
                                 Private f32* %70 = OpAccessChain %40 %33 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %33 
                                                      OpStore %76 %75 
                                 Uniform f32* %78 = OpAccessChain %21 %23 %77 
                                          f32 %79 = OpLoad %78 
                                 Private f32* %80 = OpAccessChain %9 %33 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFMul %79 %81 
                                 Private f32* %83 = OpAccessChain %40 %33 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFAdd %82 %84 
                                 Private f32* %86 = OpAccessChain %9 %33 
                                                      OpStore %86 %85 
                                 Private f32* %87 = OpAccessChain %9 %33 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %90 = OpAccessChain %21 %89 %51 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %93 = OpAccessChain %21 %89 %77 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %33 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %33 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %33 
                                                      OpStore %102 %101 
                                       f32_3 %103 = OpLoad vs_TEXCOORD2 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %21 %105 %56 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %40 %109 
                              Uniform f32_4* %110 = OpAccessChain %21 %105 %43 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpLoad vs_TEXCOORD2 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %40 
                                       f32_3 %117 = OpFAdd %115 %116 
                                                      OpStore %40 %117 
                              Uniform f32_4* %118 = OpAccessChain %21 %105 %61 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpLoad vs_TEXCOORD2 
                                       f32_3 %122 = OpVectorShuffle %121 %121 2 2 2 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %40 
                                       f32_3 %125 = OpFAdd %123 %124 
                                                      OpStore %40 %125 
                                       f32_3 %126 = OpLoad %40 
                              Uniform f32_4* %128 = OpAccessChain %21 %105 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %126 %130 
                                                      OpStore %40 %131 
                                       f32_3 %135 = OpLoad %40 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Private f32* %137 = OpAccessChain %40 %51 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpCompositeExtract %136 0 
                                         f32 %140 = OpCompositeExtract %136 1 
                                       f32_3 %141 = OpCompositeConstruct %139 %140 %138 
                                                      OpStore %133 %141 
                         read_only Texture2D %146 = OpLoad %145 
                                     sampler %150 = OpLoad %149 
                  read_only Texture2DSampled %153 = OpSampledImage %146 %150 
                                       f32_3 %154 = OpLoad %133 
                                         f32 %155 = OpCompositeExtract %154 2 
                                         f32 %156 = OpImageSampleDrefExplicitLod %153 %154 %155 Lod %6 
                                                      OpStore %142 %156 
                                Uniform f32* %158 = OpAccessChain %21 %89 %33 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFNegate %159 
                                         f32 %161 = OpFAdd %160 %100 
                                Private f32* %162 = OpAccessChain %157 %33 
                                                      OpStore %162 %161 
                                         f32 %163 = OpLoad %142 
                                Private f32* %164 = OpAccessChain %157 %33 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Uniform f32* %167 = OpAccessChain %21 %89 %33 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                Private f32* %170 = OpAccessChain %157 %33 
                                                      OpStore %170 %169 
                                Private f32* %172 = OpAccessChain %157 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %174 %100 
                                                      OpStore %171 %175 
                                Private f32* %176 = OpAccessChain %9 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpLoad %171 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %157 %33 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFAdd %179 %181 
                                Private f32* %183 = OpAccessChain %157 %33 
                                                      OpStore %183 %182 
                                       f32_3 %184 = OpLoad %157 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 0 0 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %157 %190 
                         read_only Texture2D %193 = OpLoad %192 
                                     sampler %195 = OpLoad %194 
                  read_only Texture2DSampled %197 = OpSampledImage %193 %195 
                                       f32_2 %200 = OpLoad vs_TEXCOORD0 
                                       f32_4 %201 = OpImageSampleImplicitLod %197 %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                                      OpStore %191 %202 
                                       f32_3 %203 = OpLoad %157 
                                       f32_3 %204 = OpLoad %191 
                                       f32_3 %205 = OpFMul %203 %204 
                                                      OpStore %157 %205 
                                       f32_3 %207 = OpLoad vs_TEXCOORD1 
                                       f32_4 %208 = OpLoad %49 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %49 %209 
                                Private f32* %210 = OpAccessChain %49 %77 
                                                      OpStore %210 %100 
                              Uniform f32_4* %212 = OpAccessChain %21 %61 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %49 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %211 %33 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %127 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %49 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %211 %59 
                                                      OpStore %221 %220 
                              Uniform f32_4* %223 = OpAccessChain %21 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %49 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %211 %51 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %211 
                                       f32_3 %230 = OpLoad vs_TEXCOORD3 
                                       f32_3 %231 = OpFAdd %228 %230 
                                                      OpStore %211 %231 
                                       f32_3 %232 = OpLoad %211 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %211 %234 
                                       f32_3 %236 = OpLoad %211 
                                       f32_3 %237 = OpExtInst %1 30 %236 
                                                      OpStore %235 %237 
                                       f32_3 %238 = OpLoad %235 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %235 %241 
                                       f32_3 %242 = OpLoad %235 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                                      OpStore %235 %243 
                                       f32_3 %244 = OpLoad %235 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_3 %250 = OpFAdd %247 %249 
                                                      OpStore %235 %250 
                                       f32_3 %251 = OpLoad %235 
                                       f32_3 %252 = OpExtInst %1 40 %251 %233 
                                                      OpStore %235 %252 
                                       f32_3 %253 = OpLoad %191 
                                       f32_3 %254 = OpLoad %235 
                                       f32_3 %255 = OpFMul %253 %254 
                                                      OpStore %211 %255 
                                       f32_3 %257 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %258 = OpAccessChain %21 %56 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                         f32 %261 = OpDot %257 %260 
                                                      OpStore %256 %261 
                                         f32 %262 = OpLoad %256 
                                         f32 %263 = OpExtInst %1 40 %262 %99 
                                                      OpStore %256 %263 
                                       f32_3 %266 = OpLoad %157 
                                         f32 %267 = OpLoad %256 
                                       f32_3 %268 = OpCompositeConstruct %267 %267 %267 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %211 
                                       f32_3 %271 = OpFAdd %269 %270 
                                       f32_4 %272 = OpLoad %265 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %265 %273 
                                 Output f32* %275 = OpAccessChain %265 %77 
                                                      OpStore %275 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 210
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %191 %200 %203 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 191 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 200 
                                                      OpDecorate vs_TEXCOORD6 Location 203 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 6 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 7 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 5 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %154 = OpVariable Private 
                              Private f32_4* %168 = OpVariable Private 
                                             %174 = OpTypePointer Private %51 
                              Private f32_3* %175 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %201 = OpConstant 3.674022E-40 
                                       f32_4 %202 = OpConstantComposite %201 %201 %201 %201 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %204 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                Private f32* %155 = OpAccessChain %9 %83 
                                         f32 %156 = OpLoad %155 
                                Private f32* %157 = OpAccessChain %9 %83 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                Private f32* %160 = OpAccessChain %9 %120 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                         f32 %165 = OpLoad %154 
                                         f32 %166 = OpFNegate %165 
                                         f32 %167 = OpFAdd %164 %166 
                                                      OpStore %154 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_4 %170 = OpVectorShuffle %169 %169 1 2 2 0 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %171 0 1 2 2 
                                       f32_4 %173 = OpFMul %170 %172 
                                                      OpStore %168 %173 
                              Uniform f32_4* %176 = OpAccessChain %21 %29 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpLoad %168 
                                         f32 %179 = OpDot %177 %178 
                                Private f32* %180 = OpAccessChain %175 %120 
                                                      OpStore %180 %179 
                              Uniform f32_4* %181 = OpAccessChain %21 %24 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %168 
                                         f32 %184 = OpDot %182 %183 
                                Private f32* %185 = OpAccessChain %175 %83 
                                                      OpStore %185 %184 
                              Uniform f32_4* %186 = OpAccessChain %21 %37 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %168 
                                         f32 %189 = OpDot %187 %188 
                                Private f32* %190 = OpAccessChain %175 %134 
                                                      OpStore %190 %189 
                              Uniform f32_4* %192 = OpAccessChain %21 %47 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpLoad %154 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_3 %198 = OpLoad %175 
                                       f32_3 %199 = OpFAdd %197 %198 
                                                      OpStore vs_TEXCOORD3 %199 
                                                      OpStore vs_TEXCOORD5 %202 
                                                      OpStore vs_TEXCOORD6 %202 
                                 Output f32* %205 = OpAccessChain %87 %29 %83 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                 Output f32* %208 = OpAccessChain %87 %29 %83 
                                                      OpStore %208 %207 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %199 %206 %229 %265 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 DescriptorSet 149 
                                                      OpDecorate %149 Binding 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 DescriptorSet 192 
                                                      OpDecorate %192 Binding 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %194 DescriptorSet 194 
                                                      OpDecorate %194 Binding 194 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 206 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 229 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %265 Location 265 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                                              %48 = OpTypePointer Private %13 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %50 = OpConstant 8 
                                          u32 %51 = OpConstant 2 
                                              %52 = OpTypePointer Uniform %6 
                                          i32 %56 = OpConstant 1 
                                          u32 %59 = OpConstant 1 
                                          i32 %61 = OpConstant 2 
                                          u32 %77 = OpConstant 3 
                                          i32 %89 = OpConstant 6 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         i32 %105 = OpConstant 5 
                                         i32 %127 = OpConstant 3 
                                             %132 = OpTypePointer Function %7 
                                             %134 = OpTypeVector %6 2 
                                Private f32* %142 = OpVariable Private 
                                             %143 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %144 = OpTypePointer UniformConstant %143 
        UniformConstant read_only Texture2D* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeSampler 
                                             %148 = OpTypePointer UniformConstant %147 
                    UniformConstant sampler* %149 = OpVariable UniformConstant 
                                             %151 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %152 = OpTypeSampledImage %151 
                              Private f32_3* %157 = OpVariable Private 
                                Private f32* %171 = OpVariable Private 
                                         i32 %186 = OpConstant 9 
                              Private f32_3* %191 = OpVariable Private 
        UniformConstant read_only Texture2D* %192 = OpVariable UniformConstant 
                    UniformConstant sampler* %194 = OpVariable UniformConstant 
                                             %196 = OpTypeSampledImage %143 
                                             %198 = OpTypePointer Input %134 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %211 = OpVariable Private 
                                         i32 %222 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %233 = OpConstantComposite %99 %99 %99 
                              Private f32_3* %235 = OpVariable Private 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                Private f32* %256 = OpVariable Private 
                                             %264 = OpTypePointer Output %13 
                               Output f32_4* %265 = OpVariable Output 
                                             %274 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %133 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %53 = OpAccessChain %21 %50 %43 %51 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %49 %33 
                                                      OpStore %55 %54 
                                 Uniform f32* %57 = OpAccessChain %21 %50 %56 %51 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %60 = OpAccessChain %49 %59 
                                                      OpStore %60 %58 
                                 Uniform f32* %62 = OpAccessChain %21 %50 %61 %51 
                                          f32 %63 = OpLoad %62 
                                 Private f32* %64 = OpAccessChain %49 %51 
                                                      OpStore %64 %63 
                                        f32_3 %65 = OpLoad %40 
                                        f32_4 %66 = OpLoad %49 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %68 = OpDot %65 %67 
                                 Private f32* %69 = OpAccessChain %40 %33 
                                                      OpStore %69 %68 
                                 Private f32* %70 = OpAccessChain %40 %33 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %33 
                                                      OpStore %76 %75 
                                 Uniform f32* %78 = OpAccessChain %21 %23 %77 
                                          f32 %79 = OpLoad %78 
                                 Private f32* %80 = OpAccessChain %9 %33 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFMul %79 %81 
                                 Private f32* %83 = OpAccessChain %40 %33 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFAdd %82 %84 
                                 Private f32* %86 = OpAccessChain %9 %33 
                                                      OpStore %86 %85 
                                 Private f32* %87 = OpAccessChain %9 %33 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %90 = OpAccessChain %21 %89 %51 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %93 = OpAccessChain %21 %89 %77 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %33 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %33 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %33 
                                                      OpStore %102 %101 
                                       f32_3 %103 = OpLoad vs_TEXCOORD2 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %21 %105 %56 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %40 %109 
                              Uniform f32_4* %110 = OpAccessChain %21 %105 %43 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpLoad vs_TEXCOORD2 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %40 
                                       f32_3 %117 = OpFAdd %115 %116 
                                                      OpStore %40 %117 
                              Uniform f32_4* %118 = OpAccessChain %21 %105 %61 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpLoad vs_TEXCOORD2 
                                       f32_3 %122 = OpVectorShuffle %121 %121 2 2 2 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %40 
                                       f32_3 %125 = OpFAdd %123 %124 
                                                      OpStore %40 %125 
                                       f32_3 %126 = OpLoad %40 
                              Uniform f32_4* %128 = OpAccessChain %21 %105 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %126 %130 
                                                      OpStore %40 %131 
                                       f32_3 %135 = OpLoad %40 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Private f32* %137 = OpAccessChain %40 %51 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpCompositeExtract %136 0 
                                         f32 %140 = OpCompositeExtract %136 1 
                                       f32_3 %141 = OpCompositeConstruct %139 %140 %138 
                                                      OpStore %133 %141 
                         read_only Texture2D %146 = OpLoad %145 
                                     sampler %150 = OpLoad %149 
                  read_only Texture2DSampled %153 = OpSampledImage %146 %150 
                                       f32_3 %154 = OpLoad %133 
                                         f32 %155 = OpCompositeExtract %154 2 
                                         f32 %156 = OpImageSampleDrefExplicitLod %153 %154 %155 Lod %6 
                                                      OpStore %142 %156 
                                Uniform f32* %158 = OpAccessChain %21 %89 %33 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFNegate %159 
                                         f32 %161 = OpFAdd %160 %100 
                                Private f32* %162 = OpAccessChain %157 %33 
                                                      OpStore %162 %161 
                                         f32 %163 = OpLoad %142 
                                Private f32* %164 = OpAccessChain %157 %33 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Uniform f32* %167 = OpAccessChain %21 %89 %33 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                Private f32* %170 = OpAccessChain %157 %33 
                                                      OpStore %170 %169 
                                Private f32* %172 = OpAccessChain %157 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %174 %100 
                                                      OpStore %171 %175 
                                Private f32* %176 = OpAccessChain %9 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpLoad %171 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %157 %33 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFAdd %179 %181 
                                Private f32* %183 = OpAccessChain %157 %33 
                                                      OpStore %183 %182 
                                       f32_3 %184 = OpLoad %157 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 0 0 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %157 %190 
                         read_only Texture2D %193 = OpLoad %192 
                                     sampler %195 = OpLoad %194 
                  read_only Texture2DSampled %197 = OpSampledImage %193 %195 
                                       f32_2 %200 = OpLoad vs_TEXCOORD0 
                                       f32_4 %201 = OpImageSampleImplicitLod %197 %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                                      OpStore %191 %202 
                                       f32_3 %203 = OpLoad %157 
                                       f32_3 %204 = OpLoad %191 
                                       f32_3 %205 = OpFMul %203 %204 
                                                      OpStore %157 %205 
                                       f32_3 %207 = OpLoad vs_TEXCOORD1 
                                       f32_4 %208 = OpLoad %49 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %49 %209 
                                Private f32* %210 = OpAccessChain %49 %77 
                                                      OpStore %210 %100 
                              Uniform f32_4* %212 = OpAccessChain %21 %61 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %49 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %211 %33 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %127 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %49 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %211 %59 
                                                      OpStore %221 %220 
                              Uniform f32_4* %223 = OpAccessChain %21 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %49 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %211 %51 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %211 
                                       f32_3 %230 = OpLoad vs_TEXCOORD3 
                                       f32_3 %231 = OpFAdd %228 %230 
                                                      OpStore %211 %231 
                                       f32_3 %232 = OpLoad %211 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %211 %234 
                                       f32_3 %236 = OpLoad %211 
                                       f32_3 %237 = OpExtInst %1 30 %236 
                                                      OpStore %235 %237 
                                       f32_3 %238 = OpLoad %235 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %235 %241 
                                       f32_3 %242 = OpLoad %235 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                                      OpStore %235 %243 
                                       f32_3 %244 = OpLoad %235 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_3 %250 = OpFAdd %247 %249 
                                                      OpStore %235 %250 
                                       f32_3 %251 = OpLoad %235 
                                       f32_3 %252 = OpExtInst %1 40 %251 %233 
                                                      OpStore %235 %252 
                                       f32_3 %253 = OpLoad %191 
                                       f32_3 %254 = OpLoad %235 
                                       f32_3 %255 = OpFMul %253 %254 
                                                      OpStore %211 %255 
                                       f32_3 %257 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %258 = OpAccessChain %21 %56 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                         f32 %261 = OpDot %257 %260 
                                                      OpStore %256 %261 
                                         f32 %262 = OpLoad %256 
                                         f32 %263 = OpExtInst %1 40 %262 %99 
                                                      OpStore %256 %263 
                                       f32_3 %266 = OpLoad %157 
                                         f32 %267 = OpLoad %256 
                                       f32_3 %268 = OpCompositeConstruct %267 %267 %267 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %211 
                                       f32_3 %271 = OpFAdd %269 %270 
                                       f32_4 %272 = OpLoad %265 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %265 %273 
                                 Output f32* %275 = OpAccessChain %265 %77 
                                                      OpStore %275 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 210
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %191 %200 %203 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 191 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 200 
                                                      OpDecorate vs_TEXCOORD6 Location 203 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 6 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 7 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 5 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %154 = OpVariable Private 
                              Private f32_4* %168 = OpVariable Private 
                                             %174 = OpTypePointer Private %51 
                              Private f32_3* %175 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %201 = OpConstant 3.674022E-40 
                                       f32_4 %202 = OpConstantComposite %201 %201 %201 %201 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %204 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                Private f32* %155 = OpAccessChain %9 %83 
                                         f32 %156 = OpLoad %155 
                                Private f32* %157 = OpAccessChain %9 %83 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                Private f32* %160 = OpAccessChain %9 %120 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                         f32 %165 = OpLoad %154 
                                         f32 %166 = OpFNegate %165 
                                         f32 %167 = OpFAdd %164 %166 
                                                      OpStore %154 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_4 %170 = OpVectorShuffle %169 %169 1 2 2 0 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %171 0 1 2 2 
                                       f32_4 %173 = OpFMul %170 %172 
                                                      OpStore %168 %173 
                              Uniform f32_4* %176 = OpAccessChain %21 %29 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpLoad %168 
                                         f32 %179 = OpDot %177 %178 
                                Private f32* %180 = OpAccessChain %175 %120 
                                                      OpStore %180 %179 
                              Uniform f32_4* %181 = OpAccessChain %21 %24 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %168 
                                         f32 %184 = OpDot %182 %183 
                                Private f32* %185 = OpAccessChain %175 %83 
                                                      OpStore %185 %184 
                              Uniform f32_4* %186 = OpAccessChain %21 %37 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %168 
                                         f32 %189 = OpDot %187 %188 
                                Private f32* %190 = OpAccessChain %175 %134 
                                                      OpStore %190 %189 
                              Uniform f32_4* %192 = OpAccessChain %21 %47 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpLoad %154 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_3 %198 = OpLoad %175 
                                       f32_3 %199 = OpFAdd %197 %198 
                                                      OpStore vs_TEXCOORD3 %199 
                                                      OpStore vs_TEXCOORD5 %202 
                                                      OpStore vs_TEXCOORD6 %202 
                                 Output f32* %205 = OpAccessChain %87 %29 %83 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                 Output f32* %208 = OpAccessChain %87 %29 %83 
                                                      OpStore %208 %207 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %199 %206 %229 %265 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 DescriptorSet 149 
                                                      OpDecorate %149 Binding 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 DescriptorSet 192 
                                                      OpDecorate %192 Binding 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %194 DescriptorSet 194 
                                                      OpDecorate %194 Binding 194 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 206 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 229 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %265 Location 265 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                                              %48 = OpTypePointer Private %13 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %50 = OpConstant 8 
                                          u32 %51 = OpConstant 2 
                                              %52 = OpTypePointer Uniform %6 
                                          i32 %56 = OpConstant 1 
                                          u32 %59 = OpConstant 1 
                                          i32 %61 = OpConstant 2 
                                          u32 %77 = OpConstant 3 
                                          i32 %89 = OpConstant 6 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         i32 %105 = OpConstant 5 
                                         i32 %127 = OpConstant 3 
                                             %132 = OpTypePointer Function %7 
                                             %134 = OpTypeVector %6 2 
                                Private f32* %142 = OpVariable Private 
                                             %143 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %144 = OpTypePointer UniformConstant %143 
        UniformConstant read_only Texture2D* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeSampler 
                                             %148 = OpTypePointer UniformConstant %147 
                    UniformConstant sampler* %149 = OpVariable UniformConstant 
                                             %151 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %152 = OpTypeSampledImage %151 
                              Private f32_3* %157 = OpVariable Private 
                                Private f32* %171 = OpVariable Private 
                                         i32 %186 = OpConstant 9 
                              Private f32_3* %191 = OpVariable Private 
        UniformConstant read_only Texture2D* %192 = OpVariable UniformConstant 
                    UniformConstant sampler* %194 = OpVariable UniformConstant 
                                             %196 = OpTypeSampledImage %143 
                                             %198 = OpTypePointer Input %134 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %211 = OpVariable Private 
                                         i32 %222 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %233 = OpConstantComposite %99 %99 %99 
                              Private f32_3* %235 = OpVariable Private 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                Private f32* %256 = OpVariable Private 
                                             %264 = OpTypePointer Output %13 
                               Output f32_4* %265 = OpVariable Output 
                                             %274 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %133 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %53 = OpAccessChain %21 %50 %43 %51 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %49 %33 
                                                      OpStore %55 %54 
                                 Uniform f32* %57 = OpAccessChain %21 %50 %56 %51 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %60 = OpAccessChain %49 %59 
                                                      OpStore %60 %58 
                                 Uniform f32* %62 = OpAccessChain %21 %50 %61 %51 
                                          f32 %63 = OpLoad %62 
                                 Private f32* %64 = OpAccessChain %49 %51 
                                                      OpStore %64 %63 
                                        f32_3 %65 = OpLoad %40 
                                        f32_4 %66 = OpLoad %49 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %68 = OpDot %65 %67 
                                 Private f32* %69 = OpAccessChain %40 %33 
                                                      OpStore %69 %68 
                                 Private f32* %70 = OpAccessChain %40 %33 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %33 
                                                      OpStore %76 %75 
                                 Uniform f32* %78 = OpAccessChain %21 %23 %77 
                                          f32 %79 = OpLoad %78 
                                 Private f32* %80 = OpAccessChain %9 %33 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFMul %79 %81 
                                 Private f32* %83 = OpAccessChain %40 %33 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFAdd %82 %84 
                                 Private f32* %86 = OpAccessChain %9 %33 
                                                      OpStore %86 %85 
                                 Private f32* %87 = OpAccessChain %9 %33 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %90 = OpAccessChain %21 %89 %51 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %93 = OpAccessChain %21 %89 %77 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %33 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %33 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %33 
                                                      OpStore %102 %101 
                                       f32_3 %103 = OpLoad vs_TEXCOORD2 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %21 %105 %56 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %40 %109 
                              Uniform f32_4* %110 = OpAccessChain %21 %105 %43 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpLoad vs_TEXCOORD2 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %40 
                                       f32_3 %117 = OpFAdd %115 %116 
                                                      OpStore %40 %117 
                              Uniform f32_4* %118 = OpAccessChain %21 %105 %61 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpLoad vs_TEXCOORD2 
                                       f32_3 %122 = OpVectorShuffle %121 %121 2 2 2 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %40 
                                       f32_3 %125 = OpFAdd %123 %124 
                                                      OpStore %40 %125 
                                       f32_3 %126 = OpLoad %40 
                              Uniform f32_4* %128 = OpAccessChain %21 %105 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %126 %130 
                                                      OpStore %40 %131 
                                       f32_3 %135 = OpLoad %40 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Private f32* %137 = OpAccessChain %40 %51 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpCompositeExtract %136 0 
                                         f32 %140 = OpCompositeExtract %136 1 
                                       f32_3 %141 = OpCompositeConstruct %139 %140 %138 
                                                      OpStore %133 %141 
                         read_only Texture2D %146 = OpLoad %145 
                                     sampler %150 = OpLoad %149 
                  read_only Texture2DSampled %153 = OpSampledImage %146 %150 
                                       f32_3 %154 = OpLoad %133 
                                         f32 %155 = OpCompositeExtract %154 2 
                                         f32 %156 = OpImageSampleDrefExplicitLod %153 %154 %155 Lod %6 
                                                      OpStore %142 %156 
                                Uniform f32* %158 = OpAccessChain %21 %89 %33 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFNegate %159 
                                         f32 %161 = OpFAdd %160 %100 
                                Private f32* %162 = OpAccessChain %157 %33 
                                                      OpStore %162 %161 
                                         f32 %163 = OpLoad %142 
                                Private f32* %164 = OpAccessChain %157 %33 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Uniform f32* %167 = OpAccessChain %21 %89 %33 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                Private f32* %170 = OpAccessChain %157 %33 
                                                      OpStore %170 %169 
                                Private f32* %172 = OpAccessChain %157 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %174 %100 
                                                      OpStore %171 %175 
                                Private f32* %176 = OpAccessChain %9 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpLoad %171 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %157 %33 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFAdd %179 %181 
                                Private f32* %183 = OpAccessChain %157 %33 
                                                      OpStore %183 %182 
                                       f32_3 %184 = OpLoad %157 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 0 0 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %157 %190 
                         read_only Texture2D %193 = OpLoad %192 
                                     sampler %195 = OpLoad %194 
                  read_only Texture2DSampled %197 = OpSampledImage %193 %195 
                                       f32_2 %200 = OpLoad vs_TEXCOORD0 
                                       f32_4 %201 = OpImageSampleImplicitLod %197 %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                                      OpStore %191 %202 
                                       f32_3 %203 = OpLoad %157 
                                       f32_3 %204 = OpLoad %191 
                                       f32_3 %205 = OpFMul %203 %204 
                                                      OpStore %157 %205 
                                       f32_3 %207 = OpLoad vs_TEXCOORD1 
                                       f32_4 %208 = OpLoad %49 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %49 %209 
                                Private f32* %210 = OpAccessChain %49 %77 
                                                      OpStore %210 %100 
                              Uniform f32_4* %212 = OpAccessChain %21 %61 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %49 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %211 %33 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %127 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %49 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %211 %59 
                                                      OpStore %221 %220 
                              Uniform f32_4* %223 = OpAccessChain %21 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %49 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %211 %51 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %211 
                                       f32_3 %230 = OpLoad vs_TEXCOORD3 
                                       f32_3 %231 = OpFAdd %228 %230 
                                                      OpStore %211 %231 
                                       f32_3 %232 = OpLoad %211 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %211 %234 
                                       f32_3 %236 = OpLoad %211 
                                       f32_3 %237 = OpExtInst %1 30 %236 
                                                      OpStore %235 %237 
                                       f32_3 %238 = OpLoad %235 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %235 %241 
                                       f32_3 %242 = OpLoad %235 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                                      OpStore %235 %243 
                                       f32_3 %244 = OpLoad %235 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_3 %250 = OpFAdd %247 %249 
                                                      OpStore %235 %250 
                                       f32_3 %251 = OpLoad %235 
                                       f32_3 %252 = OpExtInst %1 40 %251 %233 
                                                      OpStore %235 %252 
                                       f32_3 %253 = OpLoad %191 
                                       f32_3 %254 = OpLoad %235 
                                       f32_3 %255 = OpFMul %253 %254 
                                                      OpStore %211 %255 
                                       f32_3 %257 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %258 = OpAccessChain %21 %56 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                         f32 %261 = OpDot %257 %260 
                                                      OpStore %256 %261 
                                         f32 %262 = OpLoad %256 
                                         f32 %263 = OpExtInst %1 40 %262 %99 
                                                      OpStore %256 %263 
                                       f32_3 %266 = OpLoad %157 
                                         f32 %267 = OpLoad %256 
                                       f32_3 %268 = OpCompositeConstruct %267 %267 %267 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %211 
                                       f32_3 %271 = OpFAdd %269 %270 
                                       f32_4 %272 = OpLoad %265 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %265 %273 
                                 Output f32* %275 = OpAccessChain %265 %77 
                                                      OpStore %275 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 66
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                                     %52 = OpTypePointer Output %13 
                       Output f32_4* %53 = OpVariable Output 
                                 f32 %60 = OpConstant 3.674022E-40 
                                     %61 = OpTypeInt 32 0 
                                 u32 %62 = OpConstant 3 
                                     %63 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                                 f32 %54 = OpLoad %8 
                               f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                               f32_3 %56 = OpLoad %45 
                               f32_3 %57 = OpFMul %55 %56 
                               f32_4 %58 = OpLoad %53 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %53 %59 
                         Output f32* %64 = OpAccessChain %53 %62 
                                             OpStore %64 %60 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 66
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                                     %52 = OpTypePointer Output %13 
                       Output f32_4* %53 = OpVariable Output 
                                 f32 %60 = OpConstant 3.674022E-40 
                                     %61 = OpTypeInt 32 0 
                                 u32 %62 = OpConstant 3 
                                     %63 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                                 f32 %54 = OpLoad %8 
                               f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                               f32_3 %56 = OpLoad %45 
                               f32_3 %57 = OpFMul %55 %56 
                               f32_4 %58 = OpLoad %53 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %53 %59 
                         Output f32* %64 = OpAccessChain %53 %62 
                                             OpStore %64 %60 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 66
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                                     %52 = OpTypePointer Output %13 
                       Output f32_4* %53 = OpVariable Output 
                                 f32 %60 = OpConstant 3.674022E-40 
                                     %61 = OpTypeInt 32 0 
                                 u32 %62 = OpConstant 3 
                                     %63 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                                 f32 %54 = OpLoad %8 
                               f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                               f32_3 %56 = OpLoad %45 
                               f32_3 %57 = OpFMul %55 %56 
                               f32_4 %58 = OpLoad %53 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %53 %59 
                         Output f32* %64 = OpAccessChain %53 %62 
                                             OpStore %64 %60 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat16_5.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat16_5.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat16_5.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 399
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %386 %392 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate vs_TEXCOORD1 Location 155 
                                                      OpDecorate vs_TEXCOORD2 Location 158 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 386 
                                                      OpDecorate vs_TEXCOORD5 Location 392 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 15 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %180 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_4 %221 = OpConstantComposite %220 %220 %220 %220 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_4 %230 = OpConstantComposite %229 %229 %229 %229 
                                         i32 %237 = OpConstant 4 
                                             %277 = OpTypePointer Private %53 
                              Private f32_3* %278 = OpVariable Private 
                              Private f32_4* %295 = OpVariable Private 
                              Private f32_3* %301 = OpVariable Private 
                                         i32 %302 = OpConstant 8 
                                         i32 %308 = OpConstant 9 
                                         i32 %314 = OpConstant 10 
                                         i32 %320 = OpConstant 11 
                                         u32 %329 = OpConstant 3 
                                         i32 %331 = OpConstant 5 
                                         i32 %337 = OpConstant 6 
                                         i32 %343 = OpConstant 7 
                                       f32_3 %353 = OpConstantComposite %229 %229 %229 
                                         f32 %361 = OpConstant 3.674022E-40 
                                       f32_3 %362 = OpConstantComposite %361 %361 %361 
                                         f32 %373 = OpConstant 3.674022E-40 
                                       f32_3 %374 = OpConstantComposite %373 %373 %373 
                                         f32 %376 = OpConstant 3.674022E-40 
                                       f32_3 %377 = OpConstantComposite %376 %376 %376 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %393 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore vs_TEXCOORD1 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore vs_TEXCOORD2 %160 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 0 0 0 0 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %31 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %65 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpFNegate %169 
                              Uniform f32_4* %171 = OpAccessChain %23 %26 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %167 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 2 2 2 2 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %39 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %167 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %167 
                                       f32_4 %186 = OpLoad %167 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %167 %187 
                                       f32_4 %188 = OpLoad %65 
                                       f32_4 %189 = OpLoad %65 
                                       f32_4 %190 = OpFMul %188 %189 
                                       f32_4 %191 = OpLoad %167 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %167 %192 
                                       f32_4 %193 = OpLoad %65 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %180 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %65 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %65 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %65 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %167 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %167 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %217 = OpAccessChain %23 %49 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpFDiv %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpLoad %167 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %65 %227 
                                       f32_4 %228 = OpLoad %65 
                                       f32_4 %231 = OpExtInst %1 40 %228 %230 
                                                      OpStore %65 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpLoad %65 
                                       f32_4 %234 = OpFMul %232 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 %26 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %65 %243 
                              Uniform f32_4* %244 = OpAccessChain %23 %237 %31 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %65 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %65 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %65 %254 
                              Uniform f32_4* %255 = OpAccessChain %23 %237 %39 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %9 %265 
                              Uniform f32_4* %266 = OpAccessChain %23 %237 %49 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %9 %276 
                                Private f32* %279 = OpAccessChain %47 %86 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %47 %86 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                Private f32* %284 = OpAccessChain %278 %123 
                                                      OpStore %284 %283 
                                Private f32* %285 = OpAccessChain %47 %123 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %47 %123 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                Private f32* %290 = OpAccessChain %278 %123 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                         f32 %293 = OpFAdd %289 %292 
                                Private f32* %294 = OpAccessChain %278 %123 
                                                      OpStore %294 %293 
                                       f32_4 %296 = OpLoad %47 
                                       f32_4 %297 = OpVectorShuffle %296 %296 1 2 2 0 
                                       f32_4 %298 = OpLoad %47 
                                       f32_4 %299 = OpVectorShuffle %298 %298 0 1 2 2 
                                       f32_4 %300 = OpFMul %297 %299 
                                                      OpStore %295 %300 
                              Uniform f32_4* %303 = OpAccessChain %23 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_4 %305 = OpLoad %295 
                                         f32 %306 = OpDot %304 %305 
                                Private f32* %307 = OpAccessChain %301 %123 
                                                      OpStore %307 %306 
                              Uniform f32_4* %309 = OpAccessChain %23 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpLoad %295 
                                         f32 %312 = OpDot %310 %311 
                                Private f32* %313 = OpAccessChain %301 %86 
                                                      OpStore %313 %312 
                              Uniform f32_4* %315 = OpAccessChain %23 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %295 
                                         f32 %318 = OpDot %316 %317 
                                Private f32* %319 = OpAccessChain %301 %137 
                                                      OpStore %319 %318 
                              Uniform f32_4* %321 = OpAccessChain %23 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpLoad %278 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_3 %327 = OpLoad %301 
                                       f32_3 %328 = OpFAdd %326 %327 
                                                      OpStore %278 %328 
                                Private f32* %330 = OpAccessChain %47 %329 
                                                      OpStore %330 %220 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpLoad %47 
                                         f32 %335 = OpDot %333 %334 
                                Private f32* %336 = OpAccessChain %301 %123 
                                                      OpStore %336 %335 
                              Uniform f32_4* %338 = OpAccessChain %23 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %47 
                                         f32 %341 = OpDot %339 %340 
                                Private f32* %342 = OpAccessChain %301 %86 
                                                      OpStore %342 %341 
                              Uniform f32_4* %344 = OpAccessChain %23 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_4 %346 = OpLoad %47 
                                         f32 %347 = OpDot %345 %346 
                                Private f32* %348 = OpAccessChain %301 %137 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %278 
                                       f32_3 %350 = OpLoad %301 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %278 %351 
                                       f32_3 %352 = OpLoad %278 
                                       f32_3 %354 = OpExtInst %1 40 %352 %353 
                                                      OpStore %278 %354 
                                       f32_3 %355 = OpLoad %278 
                                       f32_3 %356 = OpExtInst %1 30 %355 
                                       f32_4 %357 = OpLoad %47 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %47 %358 
                                       f32_4 %359 = OpLoad %47 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %363 = OpFMul %360 %362 
                                       f32_4 %364 = OpLoad %47 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
                                                      OpStore %47 %365 
                                       f32_4 %366 = OpLoad %47 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpExtInst %1 29 %367 
                                       f32_4 %369 = OpLoad %47 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %47 %370 
                                       f32_4 %371 = OpLoad %47 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %47 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %47 %380 
                                       f32_4 %381 = OpLoad %47 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpExtInst %1 40 %382 %353 
                                       f32_4 %384 = OpLoad %47 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %47 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %47 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                                      OpStore vs_TEXCOORD3 %391 
                                                      OpStore vs_TEXCOORD5 %230 
                                 Output f32* %394 = OpAccessChain %90 %31 %86 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFNegate %395 
                                 Output f32* %397 = OpAccessChain %90 %31 %86 
                                                      OpStore %397 %396 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %54 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 Location 54 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                      Private f32_3* %52 = OpVariable Private 
               Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                     %57 = OpTypePointer Output %13 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                               f32_3 %53 = OpLoad %28 
                               f32_3 %55 = OpLoad vs_TEXCOORD3 
                               f32_3 %56 = OpFMul %53 %55 
                                             OpStore %52 %56 
                               f32_3 %59 = OpLoad %45 
                                 f32 %60 = OpLoad %8 
                               f32_3 %61 = OpCompositeConstruct %60 %60 %60 
                               f32_3 %62 = OpFMul %59 %61 
                               f32_3 %63 = OpLoad %52 
                               f32_3 %64 = OpFAdd %62 %63 
                               f32_4 %65 = OpLoad %58 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %58 %66 
                         Output f32* %71 = OpAccessChain %58 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 399
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %386 %392 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate vs_TEXCOORD1 Location 155 
                                                      OpDecorate vs_TEXCOORD2 Location 158 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 386 
                                                      OpDecorate vs_TEXCOORD5 Location 392 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 15 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %180 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_4 %221 = OpConstantComposite %220 %220 %220 %220 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_4 %230 = OpConstantComposite %229 %229 %229 %229 
                                         i32 %237 = OpConstant 4 
                                             %277 = OpTypePointer Private %53 
                              Private f32_3* %278 = OpVariable Private 
                              Private f32_4* %295 = OpVariable Private 
                              Private f32_3* %301 = OpVariable Private 
                                         i32 %302 = OpConstant 8 
                                         i32 %308 = OpConstant 9 
                                         i32 %314 = OpConstant 10 
                                         i32 %320 = OpConstant 11 
                                         u32 %329 = OpConstant 3 
                                         i32 %331 = OpConstant 5 
                                         i32 %337 = OpConstant 6 
                                         i32 %343 = OpConstant 7 
                                       f32_3 %353 = OpConstantComposite %229 %229 %229 
                                         f32 %361 = OpConstant 3.674022E-40 
                                       f32_3 %362 = OpConstantComposite %361 %361 %361 
                                         f32 %373 = OpConstant 3.674022E-40 
                                       f32_3 %374 = OpConstantComposite %373 %373 %373 
                                         f32 %376 = OpConstant 3.674022E-40 
                                       f32_3 %377 = OpConstantComposite %376 %376 %376 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %393 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore vs_TEXCOORD1 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore vs_TEXCOORD2 %160 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 0 0 0 0 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %31 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %65 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpFNegate %169 
                              Uniform f32_4* %171 = OpAccessChain %23 %26 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %167 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 2 2 2 2 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %39 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %167 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %167 
                                       f32_4 %186 = OpLoad %167 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %167 %187 
                                       f32_4 %188 = OpLoad %65 
                                       f32_4 %189 = OpLoad %65 
                                       f32_4 %190 = OpFMul %188 %189 
                                       f32_4 %191 = OpLoad %167 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %167 %192 
                                       f32_4 %193 = OpLoad %65 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %180 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %65 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %65 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %65 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %167 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %167 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %217 = OpAccessChain %23 %49 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpFDiv %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpLoad %167 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %65 %227 
                                       f32_4 %228 = OpLoad %65 
                                       f32_4 %231 = OpExtInst %1 40 %228 %230 
                                                      OpStore %65 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpLoad %65 
                                       f32_4 %234 = OpFMul %232 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 %26 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %65 %243 
                              Uniform f32_4* %244 = OpAccessChain %23 %237 %31 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %65 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %65 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %65 %254 
                              Uniform f32_4* %255 = OpAccessChain %23 %237 %39 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %9 %265 
                              Uniform f32_4* %266 = OpAccessChain %23 %237 %49 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %9 %276 
                                Private f32* %279 = OpAccessChain %47 %86 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %47 %86 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                Private f32* %284 = OpAccessChain %278 %123 
                                                      OpStore %284 %283 
                                Private f32* %285 = OpAccessChain %47 %123 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %47 %123 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                Private f32* %290 = OpAccessChain %278 %123 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                         f32 %293 = OpFAdd %289 %292 
                                Private f32* %294 = OpAccessChain %278 %123 
                                                      OpStore %294 %293 
                                       f32_4 %296 = OpLoad %47 
                                       f32_4 %297 = OpVectorShuffle %296 %296 1 2 2 0 
                                       f32_4 %298 = OpLoad %47 
                                       f32_4 %299 = OpVectorShuffle %298 %298 0 1 2 2 
                                       f32_4 %300 = OpFMul %297 %299 
                                                      OpStore %295 %300 
                              Uniform f32_4* %303 = OpAccessChain %23 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_4 %305 = OpLoad %295 
                                         f32 %306 = OpDot %304 %305 
                                Private f32* %307 = OpAccessChain %301 %123 
                                                      OpStore %307 %306 
                              Uniform f32_4* %309 = OpAccessChain %23 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpLoad %295 
                                         f32 %312 = OpDot %310 %311 
                                Private f32* %313 = OpAccessChain %301 %86 
                                                      OpStore %313 %312 
                              Uniform f32_4* %315 = OpAccessChain %23 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %295 
                                         f32 %318 = OpDot %316 %317 
                                Private f32* %319 = OpAccessChain %301 %137 
                                                      OpStore %319 %318 
                              Uniform f32_4* %321 = OpAccessChain %23 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpLoad %278 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_3 %327 = OpLoad %301 
                                       f32_3 %328 = OpFAdd %326 %327 
                                                      OpStore %278 %328 
                                Private f32* %330 = OpAccessChain %47 %329 
                                                      OpStore %330 %220 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpLoad %47 
                                         f32 %335 = OpDot %333 %334 
                                Private f32* %336 = OpAccessChain %301 %123 
                                                      OpStore %336 %335 
                              Uniform f32_4* %338 = OpAccessChain %23 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %47 
                                         f32 %341 = OpDot %339 %340 
                                Private f32* %342 = OpAccessChain %301 %86 
                                                      OpStore %342 %341 
                              Uniform f32_4* %344 = OpAccessChain %23 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_4 %346 = OpLoad %47 
                                         f32 %347 = OpDot %345 %346 
                                Private f32* %348 = OpAccessChain %301 %137 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %278 
                                       f32_3 %350 = OpLoad %301 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %278 %351 
                                       f32_3 %352 = OpLoad %278 
                                       f32_3 %354 = OpExtInst %1 40 %352 %353 
                                                      OpStore %278 %354 
                                       f32_3 %355 = OpLoad %278 
                                       f32_3 %356 = OpExtInst %1 30 %355 
                                       f32_4 %357 = OpLoad %47 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %47 %358 
                                       f32_4 %359 = OpLoad %47 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %363 = OpFMul %360 %362 
                                       f32_4 %364 = OpLoad %47 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
                                                      OpStore %47 %365 
                                       f32_4 %366 = OpLoad %47 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpExtInst %1 29 %367 
                                       f32_4 %369 = OpLoad %47 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %47 %370 
                                       f32_4 %371 = OpLoad %47 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %47 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %47 %380 
                                       f32_4 %381 = OpLoad %47 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpExtInst %1 40 %382 %353 
                                       f32_4 %384 = OpLoad %47 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %47 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %47 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                                      OpStore vs_TEXCOORD3 %391 
                                                      OpStore vs_TEXCOORD5 %230 
                                 Output f32* %394 = OpAccessChain %90 %31 %86 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFNegate %395 
                                 Output f32* %397 = OpAccessChain %90 %31 %86 
                                                      OpStore %397 %396 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %54 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 Location 54 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                      Private f32_3* %52 = OpVariable Private 
               Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                     %57 = OpTypePointer Output %13 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                               f32_3 %53 = OpLoad %28 
                               f32_3 %55 = OpLoad vs_TEXCOORD3 
                               f32_3 %56 = OpFMul %53 %55 
                                             OpStore %52 %56 
                               f32_3 %59 = OpLoad %45 
                                 f32 %60 = OpLoad %8 
                               f32_3 %61 = OpCompositeConstruct %60 %60 %60 
                               f32_3 %62 = OpFMul %59 %61 
                               f32_3 %63 = OpLoad %52 
                               f32_3 %64 = OpFAdd %62 %63 
                               f32_4 %65 = OpLoad %58 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %58 %66 
                         Output f32* %71 = OpAccessChain %58 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 399
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %386 %392 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate vs_TEXCOORD1 Location 155 
                                                      OpDecorate vs_TEXCOORD2 Location 158 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 386 
                                                      OpDecorate vs_TEXCOORD5 Location 392 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 15 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %180 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_4 %221 = OpConstantComposite %220 %220 %220 %220 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_4 %230 = OpConstantComposite %229 %229 %229 %229 
                                         i32 %237 = OpConstant 4 
                                             %277 = OpTypePointer Private %53 
                              Private f32_3* %278 = OpVariable Private 
                              Private f32_4* %295 = OpVariable Private 
                              Private f32_3* %301 = OpVariable Private 
                                         i32 %302 = OpConstant 8 
                                         i32 %308 = OpConstant 9 
                                         i32 %314 = OpConstant 10 
                                         i32 %320 = OpConstant 11 
                                         u32 %329 = OpConstant 3 
                                         i32 %331 = OpConstant 5 
                                         i32 %337 = OpConstant 6 
                                         i32 %343 = OpConstant 7 
                                       f32_3 %353 = OpConstantComposite %229 %229 %229 
                                         f32 %361 = OpConstant 3.674022E-40 
                                       f32_3 %362 = OpConstantComposite %361 %361 %361 
                                         f32 %373 = OpConstant 3.674022E-40 
                                       f32_3 %374 = OpConstantComposite %373 %373 %373 
                                         f32 %376 = OpConstant 3.674022E-40 
                                       f32_3 %377 = OpConstantComposite %376 %376 %376 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %393 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore vs_TEXCOORD1 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore vs_TEXCOORD2 %160 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 0 0 0 0 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %31 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %65 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpFNegate %169 
                              Uniform f32_4* %171 = OpAccessChain %23 %26 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %167 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 2 2 2 2 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %39 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %167 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %167 
                                       f32_4 %186 = OpLoad %167 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %167 %187 
                                       f32_4 %188 = OpLoad %65 
                                       f32_4 %189 = OpLoad %65 
                                       f32_4 %190 = OpFMul %188 %189 
                                       f32_4 %191 = OpLoad %167 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %167 %192 
                                       f32_4 %193 = OpLoad %65 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %180 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %65 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %65 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %65 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %167 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %167 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %217 = OpAccessChain %23 %49 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpFDiv %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpLoad %167 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %65 %227 
                                       f32_4 %228 = OpLoad %65 
                                       f32_4 %231 = OpExtInst %1 40 %228 %230 
                                                      OpStore %65 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpLoad %65 
                                       f32_4 %234 = OpFMul %232 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 %26 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %65 %243 
                              Uniform f32_4* %244 = OpAccessChain %23 %237 %31 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %65 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %65 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %65 %254 
                              Uniform f32_4* %255 = OpAccessChain %23 %237 %39 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %9 %265 
                              Uniform f32_4* %266 = OpAccessChain %23 %237 %49 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %9 %276 
                                Private f32* %279 = OpAccessChain %47 %86 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %47 %86 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                Private f32* %284 = OpAccessChain %278 %123 
                                                      OpStore %284 %283 
                                Private f32* %285 = OpAccessChain %47 %123 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %47 %123 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                Private f32* %290 = OpAccessChain %278 %123 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                         f32 %293 = OpFAdd %289 %292 
                                Private f32* %294 = OpAccessChain %278 %123 
                                                      OpStore %294 %293 
                                       f32_4 %296 = OpLoad %47 
                                       f32_4 %297 = OpVectorShuffle %296 %296 1 2 2 0 
                                       f32_4 %298 = OpLoad %47 
                                       f32_4 %299 = OpVectorShuffle %298 %298 0 1 2 2 
                                       f32_4 %300 = OpFMul %297 %299 
                                                      OpStore %295 %300 
                              Uniform f32_4* %303 = OpAccessChain %23 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_4 %305 = OpLoad %295 
                                         f32 %306 = OpDot %304 %305 
                                Private f32* %307 = OpAccessChain %301 %123 
                                                      OpStore %307 %306 
                              Uniform f32_4* %309 = OpAccessChain %23 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpLoad %295 
                                         f32 %312 = OpDot %310 %311 
                                Private f32* %313 = OpAccessChain %301 %86 
                                                      OpStore %313 %312 
                              Uniform f32_4* %315 = OpAccessChain %23 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %295 
                                         f32 %318 = OpDot %316 %317 
                                Private f32* %319 = OpAccessChain %301 %137 
                                                      OpStore %319 %318 
                              Uniform f32_4* %321 = OpAccessChain %23 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpLoad %278 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_3 %327 = OpLoad %301 
                                       f32_3 %328 = OpFAdd %326 %327 
                                                      OpStore %278 %328 
                                Private f32* %330 = OpAccessChain %47 %329 
                                                      OpStore %330 %220 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpLoad %47 
                                         f32 %335 = OpDot %333 %334 
                                Private f32* %336 = OpAccessChain %301 %123 
                                                      OpStore %336 %335 
                              Uniform f32_4* %338 = OpAccessChain %23 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %47 
                                         f32 %341 = OpDot %339 %340 
                                Private f32* %342 = OpAccessChain %301 %86 
                                                      OpStore %342 %341 
                              Uniform f32_4* %344 = OpAccessChain %23 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_4 %346 = OpLoad %47 
                                         f32 %347 = OpDot %345 %346 
                                Private f32* %348 = OpAccessChain %301 %137 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %278 
                                       f32_3 %350 = OpLoad %301 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %278 %351 
                                       f32_3 %352 = OpLoad %278 
                                       f32_3 %354 = OpExtInst %1 40 %352 %353 
                                                      OpStore %278 %354 
                                       f32_3 %355 = OpLoad %278 
                                       f32_3 %356 = OpExtInst %1 30 %355 
                                       f32_4 %357 = OpLoad %47 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %47 %358 
                                       f32_4 %359 = OpLoad %47 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %363 = OpFMul %360 %362 
                                       f32_4 %364 = OpLoad %47 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
                                                      OpStore %47 %365 
                                       f32_4 %366 = OpLoad %47 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpExtInst %1 29 %367 
                                       f32_4 %369 = OpLoad %47 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %47 %370 
                                       f32_4 %371 = OpLoad %47 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %47 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %47 %380 
                                       f32_4 %381 = OpLoad %47 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpExtInst %1 40 %382 %353 
                                       f32_4 %384 = OpLoad %47 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %47 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %47 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                                      OpStore vs_TEXCOORD3 %391 
                                                      OpStore vs_TEXCOORD5 %230 
                                 Output f32* %394 = OpAccessChain %90 %31 %86 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFNegate %395 
                                 Output f32* %397 = OpAccessChain %90 %31 %86 
                                                      OpStore %397 %396 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %54 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 RelaxedPrecision 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 RelaxedPrecision 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD3 Location 54 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %45 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                      Private f32_3* %52 = OpVariable Private 
               Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                     %57 = OpTypePointer Output %13 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %46 = OpLoad %28 
                      Uniform f32_4* %48 = OpAccessChain %16 %47 
                               f32_4 %49 = OpLoad %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                               f32_3 %51 = OpFMul %46 %50 
                                             OpStore %45 %51 
                               f32_3 %53 = OpLoad %28 
                               f32_3 %55 = OpLoad vs_TEXCOORD3 
                               f32_3 %56 = OpFMul %53 %55 
                                             OpStore %52 %56 
                               f32_3 %59 = OpLoad %45 
                                 f32 %60 = OpLoad %8 
                               f32_3 %61 = OpCompositeConstruct %60 %60 %60 
                               f32_3 %62 = OpFMul %59 %61 
                               f32_3 %63 = OpLoad %52 
                               f32_3 %64 = OpFAdd %62 %63 
                               f32_4 %65 = OpLoad %58 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %58 %66 
                         Output f32* %71 = OpAccessChain %58 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_5;
mediump float u_xlat16_11;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat3.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_11 = max(u_xlat16_11, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_5;
mediump float u_xlat16_11;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat3.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_11 = max(u_xlat16_11, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_5;
mediump float u_xlat16_11;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat3.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_11 = max(u_xlat16_11, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 156
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                                      OpDecorate vs_TEXCOORD6 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %150 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                                      OpStore vs_TEXCOORD6 %148 
                                 Output f32* %151 = OpAccessChain %85 %23 %81 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                 Output f32* %154 = OpAccessChain %85 %23 %81 
                                                      OpStore %154 %153 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %195 %203 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %190 DescriptorSet 190 
                                                      OpDecorate %190 Binding 190 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 195 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 203 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_3* %48 = OpVariable Private 
                                          i32 %49 = OpConstant 5 
                                          u32 %50 = OpConstant 2 
                                              %51 = OpTypePointer Uniform %6 
                                          i32 %55 = OpConstant 1 
                                          u32 %58 = OpConstant 1 
                                          i32 %60 = OpConstant 2 
                                          u32 %75 = OpConstant 3 
                                          i32 %87 = OpConstant 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                             %128 = OpTypePointer Function %7 
                                             %130 = OpTypeVector %6 2 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %140 = OpTypePointer UniformConstant %139 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                                             %143 = OpTypeSampler 
                                             %144 = OpTypePointer UniformConstant %143 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %148 = OpTypeSampledImage %147 
                              Private f32_3* %153 = OpVariable Private 
                                Private f32* %167 = OpVariable Private 
                                         i32 %182 = OpConstant 6 
                              Private f32_3* %187 = OpVariable Private 
        UniformConstant read_only Texture2D* %188 = OpVariable UniformConstant 
                    UniformConstant sampler* %190 = OpVariable UniformConstant 
                                             %192 = OpTypeSampledImage %139 
                                             %194 = OpTypePointer Input %130 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %211 = OpTypePointer Output %13 
                               Output f32_4* %212 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %129 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %52 = OpAccessChain %21 %49 %43 %50 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %48 %33 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %21 %49 %55 %50 
                                          f32 %57 = OpLoad %56 
                                 Private f32* %59 = OpAccessChain %48 %58 
                                                      OpStore %59 %57 
                                 Uniform f32* %61 = OpAccessChain %21 %49 %60 %50 
                                          f32 %62 = OpLoad %61 
                                 Private f32* %63 = OpAccessChain %48 %50 
                                                      OpStore %63 %62 
                                        f32_3 %64 = OpLoad %40 
                                        f32_3 %65 = OpLoad %48 
                                          f32 %66 = OpDot %64 %65 
                                 Private f32* %67 = OpAccessChain %40 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %40 %33 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                 Private f32* %71 = OpAccessChain %9 %33 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %70 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %76 = OpAccessChain %21 %23 %75 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %40 %33 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFAdd %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %33 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %9 %33 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %88 = OpAccessChain %21 %87 %50 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFMul %86 %89 
                                 Uniform f32* %91 = OpAccessChain %21 %87 %75 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFAdd %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %33 
                                                      OpStore %94 %93 
                                 Private f32* %95 = OpAccessChain %9 %33 
                                          f32 %96 = OpLoad %95 
                                          f32 %99 = OpExtInst %1 43 %96 %97 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD2 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %60 %55 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_3 %106 = OpFMul %102 %105 
                                                      OpStore %40 %106 
                              Uniform f32_4* %107 = OpAccessChain %21 %60 %43 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpLoad vs_TEXCOORD2 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 0 0 
                                       f32_3 %112 = OpFMul %109 %111 
                                       f32_3 %113 = OpLoad %40 
                                       f32_3 %114 = OpFAdd %112 %113 
                                                      OpStore %40 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %60 %60 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad vs_TEXCOORD2 
                                       f32_3 %119 = OpVectorShuffle %118 %118 2 2 2 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %40 
                                       f32_3 %122 = OpFAdd %120 %121 
                                                      OpStore %40 %122 
                                       f32_3 %123 = OpLoad %40 
                              Uniform f32_4* %124 = OpAccessChain %21 %60 %87 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %123 %126 
                                                      OpStore %40 %127 
                                       f32_3 %131 = OpLoad %40 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                Private f32* %133 = OpAccessChain %40 %50 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpCompositeExtract %132 0 
                                         f32 %136 = OpCompositeExtract %132 1 
                                       f32_3 %137 = OpCompositeConstruct %135 %136 %134 
                                                      OpStore %129 %137 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %149 = OpSampledImage %142 %146 
                                       f32_3 %150 = OpLoad %129 
                                         f32 %151 = OpCompositeExtract %150 2 
                                         f32 %152 = OpImageSampleDrefExplicitLod %149 %150 %151 Lod %6 
                                                      OpStore %138 %152 
                                Uniform f32* %154 = OpAccessChain %21 %87 %33 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFNegate %155 
                                         f32 %157 = OpFAdd %156 %98 
                                Private f32* %158 = OpAccessChain %153 %33 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %138 
                                Private f32* %160 = OpAccessChain %153 %33 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                Uniform f32* %163 = OpAccessChain %21 %87 %33 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %153 %33 
                                                      OpStore %166 %165 
                                Private f32* %168 = OpAccessChain %153 %33 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %170 %98 
                                                      OpStore %167 %171 
                                Private f32* %172 = OpAccessChain %9 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpLoad %167 
                                         f32 %175 = OpFMul %173 %174 
                                Private f32* %176 = OpAccessChain %153 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFAdd %175 %177 
                                Private f32* %179 = OpAccessChain %153 %33 
                                                      OpStore %179 %178 
                                       f32_3 %180 = OpLoad %153 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %181 %185 
                                                      OpStore %153 %186 
                         read_only Texture2D %189 = OpLoad %188 
                                     sampler %191 = OpLoad %190 
                  read_only Texture2DSampled %193 = OpSampledImage %189 %191 
                                       f32_2 %196 = OpLoad vs_TEXCOORD0 
                                       f32_4 %197 = OpImageSampleImplicitLod %193 %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %187 %198 
                                       f32_3 %199 = OpLoad %153 
                                       f32_3 %200 = OpLoad %187 
                                       f32_3 %201 = OpFMul %199 %200 
                                                      OpStore %153 %201 
                                       f32_3 %204 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %205 = OpAccessChain %21 %55 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                                      OpStore %202 %208 
                                         f32 %209 = OpLoad %202 
                                         f32 %210 = OpExtInst %1 40 %209 %97 
                                                      OpStore %202 %210 
                                         f32 %213 = OpLoad %202 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %153 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                 Output f32* %220 = OpAccessChain %212 %75 
                                                      OpStore %220 %98 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 156
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                                      OpDecorate vs_TEXCOORD6 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %150 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                                      OpStore vs_TEXCOORD6 %148 
                                 Output f32* %151 = OpAccessChain %85 %23 %81 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                 Output f32* %154 = OpAccessChain %85 %23 %81 
                                                      OpStore %154 %153 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %195 %203 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %190 DescriptorSet 190 
                                                      OpDecorate %190 Binding 190 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 195 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 203 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_3* %48 = OpVariable Private 
                                          i32 %49 = OpConstant 5 
                                          u32 %50 = OpConstant 2 
                                              %51 = OpTypePointer Uniform %6 
                                          i32 %55 = OpConstant 1 
                                          u32 %58 = OpConstant 1 
                                          i32 %60 = OpConstant 2 
                                          u32 %75 = OpConstant 3 
                                          i32 %87 = OpConstant 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                             %128 = OpTypePointer Function %7 
                                             %130 = OpTypeVector %6 2 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %140 = OpTypePointer UniformConstant %139 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                                             %143 = OpTypeSampler 
                                             %144 = OpTypePointer UniformConstant %143 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %148 = OpTypeSampledImage %147 
                              Private f32_3* %153 = OpVariable Private 
                                Private f32* %167 = OpVariable Private 
                                         i32 %182 = OpConstant 6 
                              Private f32_3* %187 = OpVariable Private 
        UniformConstant read_only Texture2D* %188 = OpVariable UniformConstant 
                    UniformConstant sampler* %190 = OpVariable UniformConstant 
                                             %192 = OpTypeSampledImage %139 
                                             %194 = OpTypePointer Input %130 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %211 = OpTypePointer Output %13 
                               Output f32_4* %212 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %129 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %52 = OpAccessChain %21 %49 %43 %50 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %48 %33 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %21 %49 %55 %50 
                                          f32 %57 = OpLoad %56 
                                 Private f32* %59 = OpAccessChain %48 %58 
                                                      OpStore %59 %57 
                                 Uniform f32* %61 = OpAccessChain %21 %49 %60 %50 
                                          f32 %62 = OpLoad %61 
                                 Private f32* %63 = OpAccessChain %48 %50 
                                                      OpStore %63 %62 
                                        f32_3 %64 = OpLoad %40 
                                        f32_3 %65 = OpLoad %48 
                                          f32 %66 = OpDot %64 %65 
                                 Private f32* %67 = OpAccessChain %40 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %40 %33 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                 Private f32* %71 = OpAccessChain %9 %33 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %70 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %76 = OpAccessChain %21 %23 %75 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %40 %33 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFAdd %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %33 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %9 %33 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %88 = OpAccessChain %21 %87 %50 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFMul %86 %89 
                                 Uniform f32* %91 = OpAccessChain %21 %87 %75 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFAdd %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %33 
                                                      OpStore %94 %93 
                                 Private f32* %95 = OpAccessChain %9 %33 
                                          f32 %96 = OpLoad %95 
                                          f32 %99 = OpExtInst %1 43 %96 %97 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD2 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %60 %55 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_3 %106 = OpFMul %102 %105 
                                                      OpStore %40 %106 
                              Uniform f32_4* %107 = OpAccessChain %21 %60 %43 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpLoad vs_TEXCOORD2 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 0 0 
                                       f32_3 %112 = OpFMul %109 %111 
                                       f32_3 %113 = OpLoad %40 
                                       f32_3 %114 = OpFAdd %112 %113 
                                                      OpStore %40 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %60 %60 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad vs_TEXCOORD2 
                                       f32_3 %119 = OpVectorShuffle %118 %118 2 2 2 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %40 
                                       f32_3 %122 = OpFAdd %120 %121 
                                                      OpStore %40 %122 
                                       f32_3 %123 = OpLoad %40 
                              Uniform f32_4* %124 = OpAccessChain %21 %60 %87 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %123 %126 
                                                      OpStore %40 %127 
                                       f32_3 %131 = OpLoad %40 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                Private f32* %133 = OpAccessChain %40 %50 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpCompositeExtract %132 0 
                                         f32 %136 = OpCompositeExtract %132 1 
                                       f32_3 %137 = OpCompositeConstruct %135 %136 %134 
                                                      OpStore %129 %137 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %149 = OpSampledImage %142 %146 
                                       f32_3 %150 = OpLoad %129 
                                         f32 %151 = OpCompositeExtract %150 2 
                                         f32 %152 = OpImageSampleDrefExplicitLod %149 %150 %151 Lod %6 
                                                      OpStore %138 %152 
                                Uniform f32* %154 = OpAccessChain %21 %87 %33 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFNegate %155 
                                         f32 %157 = OpFAdd %156 %98 
                                Private f32* %158 = OpAccessChain %153 %33 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %138 
                                Private f32* %160 = OpAccessChain %153 %33 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                Uniform f32* %163 = OpAccessChain %21 %87 %33 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %153 %33 
                                                      OpStore %166 %165 
                                Private f32* %168 = OpAccessChain %153 %33 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %170 %98 
                                                      OpStore %167 %171 
                                Private f32* %172 = OpAccessChain %9 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpLoad %167 
                                         f32 %175 = OpFMul %173 %174 
                                Private f32* %176 = OpAccessChain %153 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFAdd %175 %177 
                                Private f32* %179 = OpAccessChain %153 %33 
                                                      OpStore %179 %178 
                                       f32_3 %180 = OpLoad %153 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %181 %185 
                                                      OpStore %153 %186 
                         read_only Texture2D %189 = OpLoad %188 
                                     sampler %191 = OpLoad %190 
                  read_only Texture2DSampled %193 = OpSampledImage %189 %191 
                                       f32_2 %196 = OpLoad vs_TEXCOORD0 
                                       f32_4 %197 = OpImageSampleImplicitLod %193 %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %187 %198 
                                       f32_3 %199 = OpLoad %153 
                                       f32_3 %200 = OpLoad %187 
                                       f32_3 %201 = OpFMul %199 %200 
                                                      OpStore %153 %201 
                                       f32_3 %204 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %205 = OpAccessChain %21 %55 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                                      OpStore %202 %208 
                                         f32 %209 = OpLoad %202 
                                         f32 %210 = OpExtInst %1 40 %209 %97 
                                                      OpStore %202 %210 
                                         f32 %213 = OpLoad %202 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %153 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                 Output f32* %220 = OpAccessChain %212 %75 
                                                      OpStore %220 %98 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 156
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                                      OpDecorate vs_TEXCOORD6 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %150 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                                      OpStore vs_TEXCOORD6 %148 
                                 Output f32* %151 = OpAccessChain %85 %23 %81 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                 Output f32* %154 = OpAccessChain %85 %23 %81 
                                                      OpStore %154 %153 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %195 %203 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %190 DescriptorSet 190 
                                                      OpDecorate %190 Binding 190 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 195 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 203 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 4 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_3* %48 = OpVariable Private 
                                          i32 %49 = OpConstant 5 
                                          u32 %50 = OpConstant 2 
                                              %51 = OpTypePointer Uniform %6 
                                          i32 %55 = OpConstant 1 
                                          u32 %58 = OpConstant 1 
                                          i32 %60 = OpConstant 2 
                                          u32 %75 = OpConstant 3 
                                          i32 %87 = OpConstant 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                             %128 = OpTypePointer Function %7 
                                             %130 = OpTypeVector %6 2 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %140 = OpTypePointer UniformConstant %139 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                                             %143 = OpTypeSampler 
                                             %144 = OpTypePointer UniformConstant %143 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %148 = OpTypeSampledImage %147 
                              Private f32_3* %153 = OpVariable Private 
                                Private f32* %167 = OpVariable Private 
                                         i32 %182 = OpConstant 6 
                              Private f32_3* %187 = OpVariable Private 
        UniformConstant read_only Texture2D* %188 = OpVariable UniformConstant 
                    UniformConstant sampler* %190 = OpVariable UniformConstant 
                                             %192 = OpTypeSampledImage %139 
                                             %194 = OpTypePointer Input %130 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %211 = OpTypePointer Output %13 
                               Output f32_4* %212 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %129 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %52 = OpAccessChain %21 %49 %43 %50 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %48 %33 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %21 %49 %55 %50 
                                          f32 %57 = OpLoad %56 
                                 Private f32* %59 = OpAccessChain %48 %58 
                                                      OpStore %59 %57 
                                 Uniform f32* %61 = OpAccessChain %21 %49 %60 %50 
                                          f32 %62 = OpLoad %61 
                                 Private f32* %63 = OpAccessChain %48 %50 
                                                      OpStore %63 %62 
                                        f32_3 %64 = OpLoad %40 
                                        f32_3 %65 = OpLoad %48 
                                          f32 %66 = OpDot %64 %65 
                                 Private f32* %67 = OpAccessChain %40 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %40 %33 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                 Private f32* %71 = OpAccessChain %9 %33 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %70 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %76 = OpAccessChain %21 %23 %75 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %40 %33 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFAdd %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %33 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %9 %33 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %88 = OpAccessChain %21 %87 %50 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFMul %86 %89 
                                 Uniform f32* %91 = OpAccessChain %21 %87 %75 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFAdd %90 %92 
                                 Private f32* %94 = OpAccessChain %9 %33 
                                                      OpStore %94 %93 
                                 Private f32* %95 = OpAccessChain %9 %33 
                                          f32 %96 = OpLoad %95 
                                          f32 %99 = OpExtInst %1 43 %96 %97 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD2 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %60 %55 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_3 %106 = OpFMul %102 %105 
                                                      OpStore %40 %106 
                              Uniform f32_4* %107 = OpAccessChain %21 %60 %43 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpLoad vs_TEXCOORD2 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 0 0 
                                       f32_3 %112 = OpFMul %109 %111 
                                       f32_3 %113 = OpLoad %40 
                                       f32_3 %114 = OpFAdd %112 %113 
                                                      OpStore %40 %114 
                              Uniform f32_4* %115 = OpAccessChain %21 %60 %60 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad vs_TEXCOORD2 
                                       f32_3 %119 = OpVectorShuffle %118 %118 2 2 2 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %40 
                                       f32_3 %122 = OpFAdd %120 %121 
                                                      OpStore %40 %122 
                                       f32_3 %123 = OpLoad %40 
                              Uniform f32_4* %124 = OpAccessChain %21 %60 %87 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %123 %126 
                                                      OpStore %40 %127 
                                       f32_3 %131 = OpLoad %40 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                Private f32* %133 = OpAccessChain %40 %50 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpCompositeExtract %132 0 
                                         f32 %136 = OpCompositeExtract %132 1 
                                       f32_3 %137 = OpCompositeConstruct %135 %136 %134 
                                                      OpStore %129 %137 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %149 = OpSampledImage %142 %146 
                                       f32_3 %150 = OpLoad %129 
                                         f32 %151 = OpCompositeExtract %150 2 
                                         f32 %152 = OpImageSampleDrefExplicitLod %149 %150 %151 Lod %6 
                                                      OpStore %138 %152 
                                Uniform f32* %154 = OpAccessChain %21 %87 %33 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFNegate %155 
                                         f32 %157 = OpFAdd %156 %98 
                                Private f32* %158 = OpAccessChain %153 %33 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %138 
                                Private f32* %160 = OpAccessChain %153 %33 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                Uniform f32* %163 = OpAccessChain %21 %87 %33 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %153 %33 
                                                      OpStore %166 %165 
                                Private f32* %168 = OpAccessChain %153 %33 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %170 %98 
                                                      OpStore %167 %171 
                                Private f32* %172 = OpAccessChain %9 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpLoad %167 
                                         f32 %175 = OpFMul %173 %174 
                                Private f32* %176 = OpAccessChain %153 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFAdd %175 %177 
                                Private f32* %179 = OpAccessChain %153 %33 
                                                      OpStore %179 %178 
                                       f32_3 %180 = OpLoad %153 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %181 %185 
                                                      OpStore %153 %186 
                         read_only Texture2D %189 = OpLoad %188 
                                     sampler %191 = OpLoad %190 
                  read_only Texture2DSampled %193 = OpSampledImage %189 %191 
                                       f32_2 %196 = OpLoad vs_TEXCOORD0 
                                       f32_4 %197 = OpImageSampleImplicitLod %193 %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %187 %198 
                                       f32_3 %199 = OpLoad %153 
                                       f32_3 %200 = OpLoad %187 
                                       f32_3 %201 = OpFMul %199 %200 
                                                      OpStore %153 %201 
                                       f32_3 %204 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %205 = OpAccessChain %21 %55 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                                      OpStore %202 %208 
                                         f32 %209 = OpLoad %202 
                                         f32 %210 = OpExtInst %1 40 %209 %97 
                                                      OpStore %202 %210 
                                         f32 %213 = OpLoad %202 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %153 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                 Output f32* %220 = OpAccessChain %212 %75 
                                                      OpStore %220 %98 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump float u_xlat16_4;
mediump float u_xlat16_6;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_14 = max(u_xlat16_14, 0.0);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump float u_xlat16_4;
mediump float u_xlat16_6;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_14 = max(u_xlat16_14, 0.0);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform mediump sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump float u_xlat16_4;
mediump float u_xlat16_6;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + _LightShadowData.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_14 = max(u_xlat16_14, 0.0);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 365
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %349 %357 %358 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate vs_TEXCOORD1 Location 155 
                                                      OpDecorate vs_TEXCOORD2 Location 158 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 349 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 357 
                                                      OpDecorate vs_TEXCOORD6 Location 358 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 9 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 11 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 12 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 10 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %180 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_4 %221 = OpConstantComposite %220 %220 %220 %220 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_4 %230 = OpConstantComposite %229 %229 %229 %229 
                                         i32 %237 = OpConstant 4 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_3 %280 = OpConstantComposite %279 %279 %279 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_3 %283 = OpConstantComposite %282 %282 %282 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_3 %293 = OpConstantComposite %292 %292 %292 
                                             %297 = OpTypePointer Private %53 
                              Private f32_3* %298 = OpVariable Private 
                              Private f32_4* %315 = OpVariable Private 
                              Private f32_3* %321 = OpVariable Private 
                                         i32 %322 = OpConstant 5 
                                         i32 %328 = OpConstant 6 
                                         i32 %334 = OpConstant 7 
                                         i32 %340 = OpConstant 8 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %359 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore vs_TEXCOORD1 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore vs_TEXCOORD2 %160 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 0 0 0 0 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %31 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %65 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpFNegate %169 
                              Uniform f32_4* %171 = OpAccessChain %23 %26 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %167 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 2 2 2 2 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %39 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %167 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %167 
                                       f32_4 %186 = OpLoad %167 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %167 %187 
                                       f32_4 %188 = OpLoad %65 
                                       f32_4 %189 = OpLoad %65 
                                       f32_4 %190 = OpFMul %188 %189 
                                       f32_4 %191 = OpLoad %167 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %167 %192 
                                       f32_4 %193 = OpLoad %65 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %180 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %65 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %65 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %65 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %167 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %167 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %217 = OpAccessChain %23 %49 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpFDiv %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpLoad %167 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %65 %227 
                                       f32_4 %228 = OpLoad %65 
                                       f32_4 %231 = OpExtInst %1 40 %228 %230 
                                                      OpStore %65 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpLoad %65 
                                       f32_4 %234 = OpFMul %232 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 %26 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %65 %243 
                              Uniform f32_4* %244 = OpAccessChain %23 %237 %31 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %65 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %65 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %65 %254 
                              Uniform f32_4* %255 = OpAccessChain %23 %237 %39 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %9 %265 
                              Uniform f32_4* %266 = OpAccessChain %23 %237 %49 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %9 %276 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %281 = OpFMul %278 %280 
                                       f32_3 %284 = OpFAdd %281 %283 
                                       f32_4 %285 = OpLoad %65 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %65 %286 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_4 %289 = OpLoad %65 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %65 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %65 %296 
                                Private f32* %299 = OpAccessChain %47 %86 
                                         f32 %300 = OpLoad %299 
                                Private f32* %301 = OpAccessChain %47 %86 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFMul %300 %302 
                                Private f32* %304 = OpAccessChain %298 %123 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %47 %123 
                                         f32 %306 = OpLoad %305 
                                Private f32* %307 = OpAccessChain %47 %123 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                Private f32* %310 = OpAccessChain %298 %123 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                         f32 %313 = OpFAdd %309 %312 
                                Private f32* %314 = OpAccessChain %298 %123 
                                                      OpStore %314 %313 
                                       f32_4 %316 = OpLoad %47 
                                       f32_4 %317 = OpVectorShuffle %316 %316 1 2 2 0 
                                       f32_4 %318 = OpLoad %47 
                                       f32_4 %319 = OpVectorShuffle %318 %318 0 1 2 2 
                                       f32_4 %320 = OpFMul %317 %319 
                                                      OpStore %315 %320 
                              Uniform f32_4* %323 = OpAccessChain %23 %322 
                                       f32_4 %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %315 
                                         f32 %326 = OpDot %324 %325 
                                Private f32* %327 = OpAccessChain %321 %123 
                                                      OpStore %327 %326 
                              Uniform f32_4* %329 = OpAccessChain %23 %328 
                                       f32_4 %330 = OpLoad %329 
                                       f32_4 %331 = OpLoad %315 
                                         f32 %332 = OpDot %330 %331 
                                Private f32* %333 = OpAccessChain %321 %86 
                                                      OpStore %333 %332 
                              Uniform f32_4* %335 = OpAccessChain %23 %334 
                                       f32_4 %336 = OpLoad %335 
                                       f32_4 %337 = OpLoad %315 
                                         f32 %338 = OpDot %336 %337 
                                Private f32* %339 = OpAccessChain %321 %137 
                                                      OpStore %339 %338 
                              Uniform f32_4* %341 = OpAccessChain %23 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpLoad %298 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpFMul %343 %345 
                                       f32_3 %347 = OpLoad %321 
                                       f32_3 %348 = OpFAdd %346 %347 
                                                      OpStore %298 %348 
                                       f32_4 %350 = OpLoad %9 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %65 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %298 
                                       f32_3 %356 = OpFAdd %354 %355 
                                                      OpStore vs_TEXCOORD3 %356 
                                                      OpStore vs_TEXCOORD5 %230 
                                                      OpStore vs_TEXCOORD6 %230 
                                 Output f32* %360 = OpAccessChain %90 %31 %86 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFNegate %361 
                                 Output f32* %363 = OpAccessChain %90 %31 %86 
                                                      OpStore %363 %362 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %199 %206 %229 %265 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 DescriptorSet 149 
                                                      OpDecorate %149 Binding 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 DescriptorSet 192 
                                                      OpDecorate %192 Binding 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %194 DescriptorSet 194 
                                                      OpDecorate %194 Binding 194 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 206 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 229 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %265 Location 265 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                                              %48 = OpTypePointer Private %13 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %50 = OpConstant 8 
                                          u32 %51 = OpConstant 2 
                                              %52 = OpTypePointer Uniform %6 
                                          i32 %56 = OpConstant 1 
                                          u32 %59 = OpConstant 1 
                                          i32 %61 = OpConstant 2 
                                          u32 %77 = OpConstant 3 
                                          i32 %89 = OpConstant 6 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         i32 %105 = OpConstant 5 
                                         i32 %127 = OpConstant 3 
                                             %132 = OpTypePointer Function %7 
                                             %134 = OpTypeVector %6 2 
                                Private f32* %142 = OpVariable Private 
                                             %143 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %144 = OpTypePointer UniformConstant %143 
        UniformConstant read_only Texture2D* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeSampler 
                                             %148 = OpTypePointer UniformConstant %147 
                    UniformConstant sampler* %149 = OpVariable UniformConstant 
                                             %151 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %152 = OpTypeSampledImage %151 
                              Private f32_3* %157 = OpVariable Private 
                                Private f32* %171 = OpVariable Private 
                                         i32 %186 = OpConstant 9 
                              Private f32_3* %191 = OpVariable Private 
        UniformConstant read_only Texture2D* %192 = OpVariable UniformConstant 
                    UniformConstant sampler* %194 = OpVariable UniformConstant 
                                             %196 = OpTypeSampledImage %143 
                                             %198 = OpTypePointer Input %134 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %211 = OpVariable Private 
                                         i32 %222 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %233 = OpConstantComposite %99 %99 %99 
                              Private f32_3* %235 = OpVariable Private 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                Private f32* %256 = OpVariable Private 
                                             %264 = OpTypePointer Output %13 
                               Output f32_4* %265 = OpVariable Output 
                                             %274 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %133 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %53 = OpAccessChain %21 %50 %43 %51 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %49 %33 
                                                      OpStore %55 %54 
                                 Uniform f32* %57 = OpAccessChain %21 %50 %56 %51 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %60 = OpAccessChain %49 %59 
                                                      OpStore %60 %58 
                                 Uniform f32* %62 = OpAccessChain %21 %50 %61 %51 
                                          f32 %63 = OpLoad %62 
                                 Private f32* %64 = OpAccessChain %49 %51 
                                                      OpStore %64 %63 
                                        f32_3 %65 = OpLoad %40 
                                        f32_4 %66 = OpLoad %49 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %68 = OpDot %65 %67 
                                 Private f32* %69 = OpAccessChain %40 %33 
                                                      OpStore %69 %68 
                                 Private f32* %70 = OpAccessChain %40 %33 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %33 
                                                      OpStore %76 %75 
                                 Uniform f32* %78 = OpAccessChain %21 %23 %77 
                                          f32 %79 = OpLoad %78 
                                 Private f32* %80 = OpAccessChain %9 %33 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFMul %79 %81 
                                 Private f32* %83 = OpAccessChain %40 %33 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFAdd %82 %84 
                                 Private f32* %86 = OpAccessChain %9 %33 
                                                      OpStore %86 %85 
                                 Private f32* %87 = OpAccessChain %9 %33 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %90 = OpAccessChain %21 %89 %51 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %93 = OpAccessChain %21 %89 %77 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %33 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %33 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %33 
                                                      OpStore %102 %101 
                                       f32_3 %103 = OpLoad vs_TEXCOORD2 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %21 %105 %56 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %40 %109 
                              Uniform f32_4* %110 = OpAccessChain %21 %105 %43 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpLoad vs_TEXCOORD2 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %40 
                                       f32_3 %117 = OpFAdd %115 %116 
                                                      OpStore %40 %117 
                              Uniform f32_4* %118 = OpAccessChain %21 %105 %61 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpLoad vs_TEXCOORD2 
                                       f32_3 %122 = OpVectorShuffle %121 %121 2 2 2 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %40 
                                       f32_3 %125 = OpFAdd %123 %124 
                                                      OpStore %40 %125 
                                       f32_3 %126 = OpLoad %40 
                              Uniform f32_4* %128 = OpAccessChain %21 %105 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %126 %130 
                                                      OpStore %40 %131 
                                       f32_3 %135 = OpLoad %40 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Private f32* %137 = OpAccessChain %40 %51 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpCompositeExtract %136 0 
                                         f32 %140 = OpCompositeExtract %136 1 
                                       f32_3 %141 = OpCompositeConstruct %139 %140 %138 
                                                      OpStore %133 %141 
                         read_only Texture2D %146 = OpLoad %145 
                                     sampler %150 = OpLoad %149 
                  read_only Texture2DSampled %153 = OpSampledImage %146 %150 
                                       f32_3 %154 = OpLoad %133 
                                         f32 %155 = OpCompositeExtract %154 2 
                                         f32 %156 = OpImageSampleDrefExplicitLod %153 %154 %155 Lod %6 
                                                      OpStore %142 %156 
                                Uniform f32* %158 = OpAccessChain %21 %89 %33 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFNegate %159 
                                         f32 %161 = OpFAdd %160 %100 
                                Private f32* %162 = OpAccessChain %157 %33 
                                                      OpStore %162 %161 
                                         f32 %163 = OpLoad %142 
                                Private f32* %164 = OpAccessChain %157 %33 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Uniform f32* %167 = OpAccessChain %21 %89 %33 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                Private f32* %170 = OpAccessChain %157 %33 
                                                      OpStore %170 %169 
                                Private f32* %172 = OpAccessChain %157 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %174 %100 
                                                      OpStore %171 %175 
                                Private f32* %176 = OpAccessChain %9 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpLoad %171 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %157 %33 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFAdd %179 %181 
                                Private f32* %183 = OpAccessChain %157 %33 
                                                      OpStore %183 %182 
                                       f32_3 %184 = OpLoad %157 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 0 0 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %157 %190 
                         read_only Texture2D %193 = OpLoad %192 
                                     sampler %195 = OpLoad %194 
                  read_only Texture2DSampled %197 = OpSampledImage %193 %195 
                                       f32_2 %200 = OpLoad vs_TEXCOORD0 
                                       f32_4 %201 = OpImageSampleImplicitLod %197 %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                                      OpStore %191 %202 
                                       f32_3 %203 = OpLoad %157 
                                       f32_3 %204 = OpLoad %191 
                                       f32_3 %205 = OpFMul %203 %204 
                                                      OpStore %157 %205 
                                       f32_3 %207 = OpLoad vs_TEXCOORD1 
                                       f32_4 %208 = OpLoad %49 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %49 %209 
                                Private f32* %210 = OpAccessChain %49 %77 
                                                      OpStore %210 %100 
                              Uniform f32_4* %212 = OpAccessChain %21 %61 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %49 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %211 %33 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %127 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %49 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %211 %59 
                                                      OpStore %221 %220 
                              Uniform f32_4* %223 = OpAccessChain %21 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %49 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %211 %51 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %211 
                                       f32_3 %230 = OpLoad vs_TEXCOORD3 
                                       f32_3 %231 = OpFAdd %228 %230 
                                                      OpStore %211 %231 
                                       f32_3 %232 = OpLoad %211 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %211 %234 
                                       f32_3 %236 = OpLoad %211 
                                       f32_3 %237 = OpExtInst %1 30 %236 
                                                      OpStore %235 %237 
                                       f32_3 %238 = OpLoad %235 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %235 %241 
                                       f32_3 %242 = OpLoad %235 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                                      OpStore %235 %243 
                                       f32_3 %244 = OpLoad %235 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_3 %250 = OpFAdd %247 %249 
                                                      OpStore %235 %250 
                                       f32_3 %251 = OpLoad %235 
                                       f32_3 %252 = OpExtInst %1 40 %251 %233 
                                                      OpStore %235 %252 
                                       f32_3 %253 = OpLoad %191 
                                       f32_3 %254 = OpLoad %235 
                                       f32_3 %255 = OpFMul %253 %254 
                                                      OpStore %211 %255 
                                       f32_3 %257 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %258 = OpAccessChain %21 %56 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                         f32 %261 = OpDot %257 %260 
                                                      OpStore %256 %261 
                                         f32 %262 = OpLoad %256 
                                         f32 %263 = OpExtInst %1 40 %262 %99 
                                                      OpStore %256 %263 
                                       f32_3 %266 = OpLoad %157 
                                         f32 %267 = OpLoad %256 
                                       f32_3 %268 = OpCompositeConstruct %267 %267 %267 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %211 
                                       f32_3 %271 = OpFAdd %269 %270 
                                       f32_4 %272 = OpLoad %265 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %265 %273 
                                 Output f32* %275 = OpAccessChain %265 %77 
                                                      OpStore %275 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 365
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %349 %357 %358 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate vs_TEXCOORD1 Location 155 
                                                      OpDecorate vs_TEXCOORD2 Location 158 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 349 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 357 
                                                      OpDecorate vs_TEXCOORD6 Location 358 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 9 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 11 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 12 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 10 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %180 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_4 %221 = OpConstantComposite %220 %220 %220 %220 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_4 %230 = OpConstantComposite %229 %229 %229 %229 
                                         i32 %237 = OpConstant 4 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_3 %280 = OpConstantComposite %279 %279 %279 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_3 %283 = OpConstantComposite %282 %282 %282 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_3 %293 = OpConstantComposite %292 %292 %292 
                                             %297 = OpTypePointer Private %53 
                              Private f32_3* %298 = OpVariable Private 
                              Private f32_4* %315 = OpVariable Private 
                              Private f32_3* %321 = OpVariable Private 
                                         i32 %322 = OpConstant 5 
                                         i32 %328 = OpConstant 6 
                                         i32 %334 = OpConstant 7 
                                         i32 %340 = OpConstant 8 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %359 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore vs_TEXCOORD1 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore vs_TEXCOORD2 %160 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 0 0 0 0 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %31 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %65 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpFNegate %169 
                              Uniform f32_4* %171 = OpAccessChain %23 %26 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %167 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 2 2 2 2 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %39 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %167 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %167 
                                       f32_4 %186 = OpLoad %167 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %167 %187 
                                       f32_4 %188 = OpLoad %65 
                                       f32_4 %189 = OpLoad %65 
                                       f32_4 %190 = OpFMul %188 %189 
                                       f32_4 %191 = OpLoad %167 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %167 %192 
                                       f32_4 %193 = OpLoad %65 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %180 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %65 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %65 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %65 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %167 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %167 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %217 = OpAccessChain %23 %49 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpFDiv %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpLoad %167 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %65 %227 
                                       f32_4 %228 = OpLoad %65 
                                       f32_4 %231 = OpExtInst %1 40 %228 %230 
                                                      OpStore %65 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpLoad %65 
                                       f32_4 %234 = OpFMul %232 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 %26 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %65 %243 
                              Uniform f32_4* %244 = OpAccessChain %23 %237 %31 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %65 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %65 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %65 %254 
                              Uniform f32_4* %255 = OpAccessChain %23 %237 %39 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %9 %265 
                              Uniform f32_4* %266 = OpAccessChain %23 %237 %49 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %9 %276 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %281 = OpFMul %278 %280 
                                       f32_3 %284 = OpFAdd %281 %283 
                                       f32_4 %285 = OpLoad %65 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %65 %286 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_4 %289 = OpLoad %65 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %65 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %65 %296 
                                Private f32* %299 = OpAccessChain %47 %86 
                                         f32 %300 = OpLoad %299 
                                Private f32* %301 = OpAccessChain %47 %86 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFMul %300 %302 
                                Private f32* %304 = OpAccessChain %298 %123 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %47 %123 
                                         f32 %306 = OpLoad %305 
                                Private f32* %307 = OpAccessChain %47 %123 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                Private f32* %310 = OpAccessChain %298 %123 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                         f32 %313 = OpFAdd %309 %312 
                                Private f32* %314 = OpAccessChain %298 %123 
                                                      OpStore %314 %313 
                                       f32_4 %316 = OpLoad %47 
                                       f32_4 %317 = OpVectorShuffle %316 %316 1 2 2 0 
                                       f32_4 %318 = OpLoad %47 
                                       f32_4 %319 = OpVectorShuffle %318 %318 0 1 2 2 
                                       f32_4 %320 = OpFMul %317 %319 
                                                      OpStore %315 %320 
                              Uniform f32_4* %323 = OpAccessChain %23 %322 
                                       f32_4 %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %315 
                                         f32 %326 = OpDot %324 %325 
                                Private f32* %327 = OpAccessChain %321 %123 
                                                      OpStore %327 %326 
                              Uniform f32_4* %329 = OpAccessChain %23 %328 
                                       f32_4 %330 = OpLoad %329 
                                       f32_4 %331 = OpLoad %315 
                                         f32 %332 = OpDot %330 %331 
                                Private f32* %333 = OpAccessChain %321 %86 
                                                      OpStore %333 %332 
                              Uniform f32_4* %335 = OpAccessChain %23 %334 
                                       f32_4 %336 = OpLoad %335 
                                       f32_4 %337 = OpLoad %315 
                                         f32 %338 = OpDot %336 %337 
                                Private f32* %339 = OpAccessChain %321 %137 
                                                      OpStore %339 %338 
                              Uniform f32_4* %341 = OpAccessChain %23 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpLoad %298 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpFMul %343 %345 
                                       f32_3 %347 = OpLoad %321 
                                       f32_3 %348 = OpFAdd %346 %347 
                                                      OpStore %298 %348 
                                       f32_4 %350 = OpLoad %9 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %65 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %298 
                                       f32_3 %356 = OpFAdd %354 %355 
                                                      OpStore vs_TEXCOORD3 %356 
                                                      OpStore vs_TEXCOORD5 %230 
                                                      OpStore vs_TEXCOORD6 %230 
                                 Output f32* %360 = OpAccessChain %90 %31 %86 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFNegate %361 
                                 Output f32* %363 = OpAccessChain %90 %31 %86 
                                                      OpStore %363 %362 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %199 %206 %229 %265 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 DescriptorSet 149 
                                                      OpDecorate %149 Binding 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 DescriptorSet 192 
                                                      OpDecorate %192 Binding 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %194 DescriptorSet 194 
                                                      OpDecorate %194 Binding 194 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 206 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 229 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %265 Location 265 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                                              %48 = OpTypePointer Private %13 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %50 = OpConstant 8 
                                          u32 %51 = OpConstant 2 
                                              %52 = OpTypePointer Uniform %6 
                                          i32 %56 = OpConstant 1 
                                          u32 %59 = OpConstant 1 
                                          i32 %61 = OpConstant 2 
                                          u32 %77 = OpConstant 3 
                                          i32 %89 = OpConstant 6 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         i32 %105 = OpConstant 5 
                                         i32 %127 = OpConstant 3 
                                             %132 = OpTypePointer Function %7 
                                             %134 = OpTypeVector %6 2 
                                Private f32* %142 = OpVariable Private 
                                             %143 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %144 = OpTypePointer UniformConstant %143 
        UniformConstant read_only Texture2D* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeSampler 
                                             %148 = OpTypePointer UniformConstant %147 
                    UniformConstant sampler* %149 = OpVariable UniformConstant 
                                             %151 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %152 = OpTypeSampledImage %151 
                              Private f32_3* %157 = OpVariable Private 
                                Private f32* %171 = OpVariable Private 
                                         i32 %186 = OpConstant 9 
                              Private f32_3* %191 = OpVariable Private 
        UniformConstant read_only Texture2D* %192 = OpVariable UniformConstant 
                    UniformConstant sampler* %194 = OpVariable UniformConstant 
                                             %196 = OpTypeSampledImage %143 
                                             %198 = OpTypePointer Input %134 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %211 = OpVariable Private 
                                         i32 %222 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %233 = OpConstantComposite %99 %99 %99 
                              Private f32_3* %235 = OpVariable Private 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                Private f32* %256 = OpVariable Private 
                                             %264 = OpTypePointer Output %13 
                               Output f32_4* %265 = OpVariable Output 
                                             %274 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %133 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %53 = OpAccessChain %21 %50 %43 %51 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %49 %33 
                                                      OpStore %55 %54 
                                 Uniform f32* %57 = OpAccessChain %21 %50 %56 %51 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %60 = OpAccessChain %49 %59 
                                                      OpStore %60 %58 
                                 Uniform f32* %62 = OpAccessChain %21 %50 %61 %51 
                                          f32 %63 = OpLoad %62 
                                 Private f32* %64 = OpAccessChain %49 %51 
                                                      OpStore %64 %63 
                                        f32_3 %65 = OpLoad %40 
                                        f32_4 %66 = OpLoad %49 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %68 = OpDot %65 %67 
                                 Private f32* %69 = OpAccessChain %40 %33 
                                                      OpStore %69 %68 
                                 Private f32* %70 = OpAccessChain %40 %33 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %33 
                                                      OpStore %76 %75 
                                 Uniform f32* %78 = OpAccessChain %21 %23 %77 
                                          f32 %79 = OpLoad %78 
                                 Private f32* %80 = OpAccessChain %9 %33 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFMul %79 %81 
                                 Private f32* %83 = OpAccessChain %40 %33 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFAdd %82 %84 
                                 Private f32* %86 = OpAccessChain %9 %33 
                                                      OpStore %86 %85 
                                 Private f32* %87 = OpAccessChain %9 %33 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %90 = OpAccessChain %21 %89 %51 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %93 = OpAccessChain %21 %89 %77 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %33 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %33 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %33 
                                                      OpStore %102 %101 
                                       f32_3 %103 = OpLoad vs_TEXCOORD2 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %21 %105 %56 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %40 %109 
                              Uniform f32_4* %110 = OpAccessChain %21 %105 %43 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpLoad vs_TEXCOORD2 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %40 
                                       f32_3 %117 = OpFAdd %115 %116 
                                                      OpStore %40 %117 
                              Uniform f32_4* %118 = OpAccessChain %21 %105 %61 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpLoad vs_TEXCOORD2 
                                       f32_3 %122 = OpVectorShuffle %121 %121 2 2 2 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %40 
                                       f32_3 %125 = OpFAdd %123 %124 
                                                      OpStore %40 %125 
                                       f32_3 %126 = OpLoad %40 
                              Uniform f32_4* %128 = OpAccessChain %21 %105 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %126 %130 
                                                      OpStore %40 %131 
                                       f32_3 %135 = OpLoad %40 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Private f32* %137 = OpAccessChain %40 %51 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpCompositeExtract %136 0 
                                         f32 %140 = OpCompositeExtract %136 1 
                                       f32_3 %141 = OpCompositeConstruct %139 %140 %138 
                                                      OpStore %133 %141 
                         read_only Texture2D %146 = OpLoad %145 
                                     sampler %150 = OpLoad %149 
                  read_only Texture2DSampled %153 = OpSampledImage %146 %150 
                                       f32_3 %154 = OpLoad %133 
                                         f32 %155 = OpCompositeExtract %154 2 
                                         f32 %156 = OpImageSampleDrefExplicitLod %153 %154 %155 Lod %6 
                                                      OpStore %142 %156 
                                Uniform f32* %158 = OpAccessChain %21 %89 %33 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFNegate %159 
                                         f32 %161 = OpFAdd %160 %100 
                                Private f32* %162 = OpAccessChain %157 %33 
                                                      OpStore %162 %161 
                                         f32 %163 = OpLoad %142 
                                Private f32* %164 = OpAccessChain %157 %33 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Uniform f32* %167 = OpAccessChain %21 %89 %33 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                Private f32* %170 = OpAccessChain %157 %33 
                                                      OpStore %170 %169 
                                Private f32* %172 = OpAccessChain %157 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %174 %100 
                                                      OpStore %171 %175 
                                Private f32* %176 = OpAccessChain %9 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpLoad %171 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %157 %33 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFAdd %179 %181 
                                Private f32* %183 = OpAccessChain %157 %33 
                                                      OpStore %183 %182 
                                       f32_3 %184 = OpLoad %157 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 0 0 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %157 %190 
                         read_only Texture2D %193 = OpLoad %192 
                                     sampler %195 = OpLoad %194 
                  read_only Texture2DSampled %197 = OpSampledImage %193 %195 
                                       f32_2 %200 = OpLoad vs_TEXCOORD0 
                                       f32_4 %201 = OpImageSampleImplicitLod %197 %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                                      OpStore %191 %202 
                                       f32_3 %203 = OpLoad %157 
                                       f32_3 %204 = OpLoad %191 
                                       f32_3 %205 = OpFMul %203 %204 
                                                      OpStore %157 %205 
                                       f32_3 %207 = OpLoad vs_TEXCOORD1 
                                       f32_4 %208 = OpLoad %49 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %49 %209 
                                Private f32* %210 = OpAccessChain %49 %77 
                                                      OpStore %210 %100 
                              Uniform f32_4* %212 = OpAccessChain %21 %61 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %49 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %211 %33 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %127 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %49 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %211 %59 
                                                      OpStore %221 %220 
                              Uniform f32_4* %223 = OpAccessChain %21 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %49 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %211 %51 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %211 
                                       f32_3 %230 = OpLoad vs_TEXCOORD3 
                                       f32_3 %231 = OpFAdd %228 %230 
                                                      OpStore %211 %231 
                                       f32_3 %232 = OpLoad %211 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %211 %234 
                                       f32_3 %236 = OpLoad %211 
                                       f32_3 %237 = OpExtInst %1 30 %236 
                                                      OpStore %235 %237 
                                       f32_3 %238 = OpLoad %235 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %235 %241 
                                       f32_3 %242 = OpLoad %235 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                                      OpStore %235 %243 
                                       f32_3 %244 = OpLoad %235 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_3 %250 = OpFAdd %247 %249 
                                                      OpStore %235 %250 
                                       f32_3 %251 = OpLoad %235 
                                       f32_3 %252 = OpExtInst %1 40 %251 %233 
                                                      OpStore %235 %252 
                                       f32_3 %253 = OpLoad %191 
                                       f32_3 %254 = OpLoad %235 
                                       f32_3 %255 = OpFMul %253 %254 
                                                      OpStore %211 %255 
                                       f32_3 %257 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %258 = OpAccessChain %21 %56 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                         f32 %261 = OpDot %257 %260 
                                                      OpStore %256 %261 
                                         f32 %262 = OpLoad %256 
                                         f32 %263 = OpExtInst %1 40 %262 %99 
                                                      OpStore %256 %263 
                                       f32_3 %266 = OpLoad %157 
                                         f32 %267 = OpLoad %256 
                                       f32_3 %268 = OpCompositeConstruct %267 %267 %267 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %211 
                                       f32_3 %271 = OpFAdd %269 %270 
                                       f32_4 %272 = OpLoad %265 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %265 %273 
                                 Output f32* %275 = OpAccessChain %265 %77 
                                                      OpStore %275 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 365
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %349 %357 %358 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate vs_TEXCOORD1 Location 155 
                                                      OpDecorate vs_TEXCOORD2 Location 158 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 349 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 357 
                                                      OpDecorate vs_TEXCOORD6 Location 358 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 9 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 11 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 12 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 10 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %180 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_4 %221 = OpConstantComposite %220 %220 %220 %220 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_4 %230 = OpConstantComposite %229 %229 %229 %229 
                                         i32 %237 = OpConstant 4 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_3 %280 = OpConstantComposite %279 %279 %279 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_3 %283 = OpConstantComposite %282 %282 %282 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_3 %293 = OpConstantComposite %292 %292 %292 
                                             %297 = OpTypePointer Private %53 
                              Private f32_3* %298 = OpVariable Private 
                              Private f32_4* %315 = OpVariable Private 
                              Private f32_3* %321 = OpVariable Private 
                                         i32 %322 = OpConstant 5 
                                         i32 %328 = OpConstant 6 
                                         i32 %334 = OpConstant 7 
                                         i32 %340 = OpConstant 8 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %359 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore vs_TEXCOORD1 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore vs_TEXCOORD2 %160 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 0 0 0 0 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %31 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %65 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpFNegate %169 
                              Uniform f32_4* %171 = OpAccessChain %23 %26 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %167 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 2 2 2 2 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %39 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %167 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %167 
                                       f32_4 %186 = OpLoad %167 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %167 %187 
                                       f32_4 %188 = OpLoad %65 
                                       f32_4 %189 = OpLoad %65 
                                       f32_4 %190 = OpFMul %188 %189 
                                       f32_4 %191 = OpLoad %167 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %167 %192 
                                       f32_4 %193 = OpLoad %65 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %180 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %65 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %65 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %65 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %167 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %167 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %217 = OpAccessChain %23 %49 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpFDiv %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpLoad %167 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %65 %227 
                                       f32_4 %228 = OpLoad %65 
                                       f32_4 %231 = OpExtInst %1 40 %228 %230 
                                                      OpStore %65 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpLoad %65 
                                       f32_4 %234 = OpFMul %232 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 %26 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %65 %243 
                              Uniform f32_4* %244 = OpAccessChain %23 %237 %31 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %65 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %65 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %65 %254 
                              Uniform f32_4* %255 = OpAccessChain %23 %237 %39 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %9 %265 
                              Uniform f32_4* %266 = OpAccessChain %23 %237 %49 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %9 %276 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %281 = OpFMul %278 %280 
                                       f32_3 %284 = OpFAdd %281 %283 
                                       f32_4 %285 = OpLoad %65 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %65 %286 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_4 %289 = OpLoad %65 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %65 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %65 %296 
                                Private f32* %299 = OpAccessChain %47 %86 
                                         f32 %300 = OpLoad %299 
                                Private f32* %301 = OpAccessChain %47 %86 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFMul %300 %302 
                                Private f32* %304 = OpAccessChain %298 %123 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %47 %123 
                                         f32 %306 = OpLoad %305 
                                Private f32* %307 = OpAccessChain %47 %123 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                Private f32* %310 = OpAccessChain %298 %123 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                         f32 %313 = OpFAdd %309 %312 
                                Private f32* %314 = OpAccessChain %298 %123 
                                                      OpStore %314 %313 
                                       f32_4 %316 = OpLoad %47 
                                       f32_4 %317 = OpVectorShuffle %316 %316 1 2 2 0 
                                       f32_4 %318 = OpLoad %47 
                                       f32_4 %319 = OpVectorShuffle %318 %318 0 1 2 2 
                                       f32_4 %320 = OpFMul %317 %319 
                                                      OpStore %315 %320 
                              Uniform f32_4* %323 = OpAccessChain %23 %322 
                                       f32_4 %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %315 
                                         f32 %326 = OpDot %324 %325 
                                Private f32* %327 = OpAccessChain %321 %123 
                                                      OpStore %327 %326 
                              Uniform f32_4* %329 = OpAccessChain %23 %328 
                                       f32_4 %330 = OpLoad %329 
                                       f32_4 %331 = OpLoad %315 
                                         f32 %332 = OpDot %330 %331 
                                Private f32* %333 = OpAccessChain %321 %86 
                                                      OpStore %333 %332 
                              Uniform f32_4* %335 = OpAccessChain %23 %334 
                                       f32_4 %336 = OpLoad %335 
                                       f32_4 %337 = OpLoad %315 
                                         f32 %338 = OpDot %336 %337 
                                Private f32* %339 = OpAccessChain %321 %137 
                                                      OpStore %339 %338 
                              Uniform f32_4* %341 = OpAccessChain %23 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpLoad %298 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpFMul %343 %345 
                                       f32_3 %347 = OpLoad %321 
                                       f32_3 %348 = OpFAdd %346 %347 
                                                      OpStore %298 %348 
                                       f32_4 %350 = OpLoad %9 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %65 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %298 
                                       f32_3 %356 = OpFAdd %354 %355 
                                                      OpStore vs_TEXCOORD3 %356 
                                                      OpStore vs_TEXCOORD5 %230 
                                                      OpStore vs_TEXCOORD6 %230 
                                 Output f32* %360 = OpAccessChain %90 %31 %86 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFNegate %361 
                                 Output f32* %363 = OpAccessChain %90 %31 %86 
                                                      OpStore %363 %362 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %199 %206 %229 %265 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 DescriptorSet 149 
                                                      OpDecorate %149 Binding 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 DescriptorSet 192 
                                                      OpDecorate %192 Binding 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %194 DescriptorSet 194 
                                                      OpDecorate %194 Binding 194 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 206 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 229 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %265 Location 265 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 16 
                                              %16 = OpTypeArray %13 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %13 %17 
                                              %19 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %18 %13 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                              %24 = OpTypePointer Uniform %13 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                               Private f32_3* %40 = OpVariable Private 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                                              %48 = OpTypePointer Private %13 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %50 = OpConstant 8 
                                          u32 %51 = OpConstant 2 
                                              %52 = OpTypePointer Uniform %6 
                                          i32 %56 = OpConstant 1 
                                          u32 %59 = OpConstant 1 
                                          i32 %61 = OpConstant 2 
                                          u32 %77 = OpConstant 3 
                                          i32 %89 = OpConstant 6 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         i32 %105 = OpConstant 5 
                                         i32 %127 = OpConstant 3 
                                             %132 = OpTypePointer Function %7 
                                             %134 = OpTypeVector %6 2 
                                Private f32* %142 = OpVariable Private 
                                             %143 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %144 = OpTypePointer UniformConstant %143 
        UniformConstant read_only Texture2D* %145 = OpVariable UniformConstant 
                                             %147 = OpTypeSampler 
                                             %148 = OpTypePointer UniformConstant %147 
                    UniformConstant sampler* %149 = OpVariable UniformConstant 
                                             %151 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %152 = OpTypeSampledImage %151 
                              Private f32_3* %157 = OpVariable Private 
                                Private f32* %171 = OpVariable Private 
                                         i32 %186 = OpConstant 9 
                              Private f32_3* %191 = OpVariable Private 
        UniformConstant read_only Texture2D* %192 = OpVariable UniformConstant 
                    UniformConstant sampler* %194 = OpVariable UniformConstant 
                                             %196 = OpTypeSampledImage %143 
                                             %198 = OpTypePointer Input %134 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %211 = OpVariable Private 
                                         i32 %222 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %233 = OpConstantComposite %99 %99 %99 
                              Private f32_3* %235 = OpVariable Private 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                Private f32* %256 = OpVariable Private 
                                             %264 = OpTypePointer Output %13 
                               Output f32_4* %265 = OpVariable Output 
                                             %274 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %133 = OpVariable Function 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFNegate %27 
                                        f32_3 %29 = OpFAdd %12 %28 
                                                      OpStore %9 %29 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpLoad %9 
                                          f32 %32 = OpDot %30 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Private f32* %36 = OpAccessChain %9 %33 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpExtInst %1 31 %37 
                                 Private f32* %39 = OpAccessChain %9 %33 
                                                      OpStore %39 %38 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %21 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %40 %47 
                                 Uniform f32* %53 = OpAccessChain %21 %50 %43 %51 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %49 %33 
                                                      OpStore %55 %54 
                                 Uniform f32* %57 = OpAccessChain %21 %50 %56 %51 
                                          f32 %58 = OpLoad %57 
                                 Private f32* %60 = OpAccessChain %49 %59 
                                                      OpStore %60 %58 
                                 Uniform f32* %62 = OpAccessChain %21 %50 %61 %51 
                                          f32 %63 = OpLoad %62 
                                 Private f32* %64 = OpAccessChain %49 %51 
                                                      OpStore %64 %63 
                                        f32_3 %65 = OpLoad %40 
                                        f32_4 %66 = OpLoad %49 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %68 = OpDot %65 %67 
                                 Private f32* %69 = OpAccessChain %40 %33 
                                                      OpStore %69 %68 
                                 Private f32* %70 = OpAccessChain %40 %33 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %33 
                                                      OpStore %76 %75 
                                 Uniform f32* %78 = OpAccessChain %21 %23 %77 
                                          f32 %79 = OpLoad %78 
                                 Private f32* %80 = OpAccessChain %9 %33 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFMul %79 %81 
                                 Private f32* %83 = OpAccessChain %40 %33 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFAdd %82 %84 
                                 Private f32* %86 = OpAccessChain %9 %33 
                                                      OpStore %86 %85 
                                 Private f32* %87 = OpAccessChain %9 %33 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %90 = OpAccessChain %21 %89 %51 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %93 = OpAccessChain %21 %89 %77 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %33 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %33 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %33 
                                                      OpStore %102 %101 
                                       f32_3 %103 = OpLoad vs_TEXCOORD2 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %21 %105 %56 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %40 %109 
                              Uniform f32_4* %110 = OpAccessChain %21 %105 %43 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpLoad vs_TEXCOORD2 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %40 
                                       f32_3 %117 = OpFAdd %115 %116 
                                                      OpStore %40 %117 
                              Uniform f32_4* %118 = OpAccessChain %21 %105 %61 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpLoad vs_TEXCOORD2 
                                       f32_3 %122 = OpVectorShuffle %121 %121 2 2 2 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %40 
                                       f32_3 %125 = OpFAdd %123 %124 
                                                      OpStore %40 %125 
                                       f32_3 %126 = OpLoad %40 
                              Uniform f32_4* %128 = OpAccessChain %21 %105 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %126 %130 
                                                      OpStore %40 %131 
                                       f32_3 %135 = OpLoad %40 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                Private f32* %137 = OpAccessChain %40 %51 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpCompositeExtract %136 0 
                                         f32 %140 = OpCompositeExtract %136 1 
                                       f32_3 %141 = OpCompositeConstruct %139 %140 %138 
                                                      OpStore %133 %141 
                         read_only Texture2D %146 = OpLoad %145 
                                     sampler %150 = OpLoad %149 
                  read_only Texture2DSampled %153 = OpSampledImage %146 %150 
                                       f32_3 %154 = OpLoad %133 
                                         f32 %155 = OpCompositeExtract %154 2 
                                         f32 %156 = OpImageSampleDrefExplicitLod %153 %154 %155 Lod %6 
                                                      OpStore %142 %156 
                                Uniform f32* %158 = OpAccessChain %21 %89 %33 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFNegate %159 
                                         f32 %161 = OpFAdd %160 %100 
                                Private f32* %162 = OpAccessChain %157 %33 
                                                      OpStore %162 %161 
                                         f32 %163 = OpLoad %142 
                                Private f32* %164 = OpAccessChain %157 %33 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Uniform f32* %167 = OpAccessChain %21 %89 %33 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                Private f32* %170 = OpAccessChain %157 %33 
                                                      OpStore %170 %169 
                                Private f32* %172 = OpAccessChain %157 %33 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %174 %100 
                                                      OpStore %171 %175 
                                Private f32* %176 = OpAccessChain %9 %33 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpLoad %171 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %157 %33 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFAdd %179 %181 
                                Private f32* %183 = OpAccessChain %157 %33 
                                                      OpStore %183 %182 
                                       f32_3 %184 = OpLoad %157 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 0 0 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %185 %189 
                                                      OpStore %157 %190 
                         read_only Texture2D %193 = OpLoad %192 
                                     sampler %195 = OpLoad %194 
                  read_only Texture2DSampled %197 = OpSampledImage %193 %195 
                                       f32_2 %200 = OpLoad vs_TEXCOORD0 
                                       f32_4 %201 = OpImageSampleImplicitLod %197 %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                                      OpStore %191 %202 
                                       f32_3 %203 = OpLoad %157 
                                       f32_3 %204 = OpLoad %191 
                                       f32_3 %205 = OpFMul %203 %204 
                                                      OpStore %157 %205 
                                       f32_3 %207 = OpLoad vs_TEXCOORD1 
                                       f32_4 %208 = OpLoad %49 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %49 %209 
                                Private f32* %210 = OpAccessChain %49 %77 
                                                      OpStore %210 %100 
                              Uniform f32_4* %212 = OpAccessChain %21 %61 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %49 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %211 %33 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %127 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %49 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %211 %59 
                                                      OpStore %221 %220 
                              Uniform f32_4* %223 = OpAccessChain %21 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %49 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %211 %51 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %211 
                                       f32_3 %230 = OpLoad vs_TEXCOORD3 
                                       f32_3 %231 = OpFAdd %228 %230 
                                                      OpStore %211 %231 
                                       f32_3 %232 = OpLoad %211 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %211 %234 
                                       f32_3 %236 = OpLoad %211 
                                       f32_3 %237 = OpExtInst %1 30 %236 
                                                      OpStore %235 %237 
                                       f32_3 %238 = OpLoad %235 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %235 %241 
                                       f32_3 %242 = OpLoad %235 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                                      OpStore %235 %243 
                                       f32_3 %244 = OpLoad %235 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_3 %250 = OpFAdd %247 %249 
                                                      OpStore %235 %250 
                                       f32_3 %251 = OpLoad %235 
                                       f32_3 %252 = OpExtInst %1 40 %251 %233 
                                                      OpStore %235 %252 
                                       f32_3 %253 = OpLoad %191 
                                       f32_3 %254 = OpLoad %235 
                                       f32_3 %255 = OpFMul %253 %254 
                                                      OpStore %211 %255 
                                       f32_3 %257 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %258 = OpAccessChain %21 %56 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                         f32 %261 = OpDot %257 %260 
                                                      OpStore %256 %261 
                                         f32 %262 = OpLoad %256 
                                         f32 %263 = OpExtInst %1 40 %262 %99 
                                                      OpStore %256 %263 
                                       f32_3 %266 = OpLoad %157 
                                         f32 %267 = OpLoad %256 
                                       f32_3 %268 = OpCompositeConstruct %267 %267 %267 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %211 
                                       f32_3 %271 = OpFAdd %269 %270 
                                       f32_4 %272 = OpLoad %265 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %265 %273 
                                 Output f32* %275 = OpAccessChain %265 %77 
                                                      OpStore %275 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 150
  Tags { "LIGHTMODE" = "PREPASSBASE" "RenderType" = "Opaque" }
  GpuProgramID 123660
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 138
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate vs_TEXCOORD0 Location 126 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypePointer Input %50 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD0 = OpVariable Output 
                                             %132 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD1 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %9 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %9 %81 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %9 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %127 = OpLoad %118 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %128 %130 
                                                      OpStore vs_TEXCOORD0 %131 
                                 Output f32* %133 = OpAccessChain %85 %23 %81 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                 Output f32* %136 = OpAccessChain %85 %23 %81 
                                                      OpStore %136 %135 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 26
; Schema: 0
                              OpCapability Shader 
                       %1 = OpExtInstImport "GLSL.std.450" 
                              OpMemoryModel Logical GLSL450 
                              OpEntryPoint Fragment %4 "main" %9 %12 
                              OpExecutionMode %4 OriginUpperLeft 
                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                              OpDecorate %9 RelaxedPrecision 
                              OpDecorate %9 Location 9 
                              OpDecorate vs_TEXCOORD0 Location 12 
                       %2 = OpTypeVoid 
                       %3 = OpTypeFunction %2 
                       %6 = OpTypeFloat 32 
                       %7 = OpTypeVector %6 4 
                       %8 = OpTypePointer Output %7 
         Output f32_4* %9 = OpVariable Output 
                      %10 = OpTypeVector %6 3 
                      %11 = OpTypePointer Input %10 
Input f32_3* vs_TEXCOORD0 = OpVariable Input 
                  f32 %14 = OpConstant 3.674022E-40 
                f32_3 %15 = OpConstantComposite %14 %14 %14 
                  f32 %20 = OpConstant 3.674022E-40 
                      %21 = OpTypeInt 32 0 
                  u32 %22 = OpConstant 3 
                      %23 = OpTypePointer Output %6 
                  void %4 = OpFunction None %3 
                       %5 = OpLabel 
                f32_3 %13 = OpLoad vs_TEXCOORD0 
                f32_3 %16 = OpFMul %13 %15 
                f32_3 %17 = OpFAdd %16 %15 
                f32_4 %18 = OpLoad %9 
                f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
                              OpStore %9 %19 
          Output f32* %24 = OpAccessChain %9 %22 
                              OpStore %24 %20 
                              OpReturn
                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 138
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate vs_TEXCOORD0 Location 126 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypePointer Input %50 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD0 = OpVariable Output 
                                             %132 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD1 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %9 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %9 %81 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %9 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %127 = OpLoad %118 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %128 %130 
                                                      OpStore vs_TEXCOORD0 %131 
                                 Output f32* %133 = OpAccessChain %85 %23 %81 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                 Output f32* %136 = OpAccessChain %85 %23 %81 
                                                      OpStore %136 %135 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 26
; Schema: 0
                              OpCapability Shader 
                       %1 = OpExtInstImport "GLSL.std.450" 
                              OpMemoryModel Logical GLSL450 
                              OpEntryPoint Fragment %4 "main" %9 %12 
                              OpExecutionMode %4 OriginUpperLeft 
                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                              OpDecorate %9 RelaxedPrecision 
                              OpDecorate %9 Location 9 
                              OpDecorate vs_TEXCOORD0 Location 12 
                       %2 = OpTypeVoid 
                       %3 = OpTypeFunction %2 
                       %6 = OpTypeFloat 32 
                       %7 = OpTypeVector %6 4 
                       %8 = OpTypePointer Output %7 
         Output f32_4* %9 = OpVariable Output 
                      %10 = OpTypeVector %6 3 
                      %11 = OpTypePointer Input %10 
Input f32_3* vs_TEXCOORD0 = OpVariable Input 
                  f32 %14 = OpConstant 3.674022E-40 
                f32_3 %15 = OpConstantComposite %14 %14 %14 
                  f32 %20 = OpConstant 3.674022E-40 
                      %21 = OpTypeInt 32 0 
                  u32 %22 = OpConstant 3 
                      %23 = OpTypePointer Output %6 
                  void %4 = OpFunction None %3 
                       %5 = OpLabel 
                f32_3 %13 = OpLoad vs_TEXCOORD0 
                f32_3 %16 = OpFMul %13 %15 
                f32_3 %17 = OpFAdd %16 %15 
                f32_4 %18 = OpLoad %9 
                f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
                              OpStore %9 %19 
          Output f32* %24 = OpAccessChain %9 %22 
                              OpStore %24 %20 
                              OpReturn
                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 138
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate vs_TEXCOORD0 Location 126 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypePointer Input %50 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD0 = OpVariable Output 
                                             %132 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD1 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %9 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %9 %81 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %9 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %127 = OpLoad %118 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %128 %130 
                                                      OpStore vs_TEXCOORD0 %131 
                                 Output f32* %133 = OpAccessChain %85 %23 %81 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                 Output f32* %136 = OpAccessChain %85 %23 %81 
                                                      OpStore %136 %135 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 26
; Schema: 0
                              OpCapability Shader 
                       %1 = OpExtInstImport "GLSL.std.450" 
                              OpMemoryModel Logical GLSL450 
                              OpEntryPoint Fragment %4 "main" %9 %12 
                              OpExecutionMode %4 OriginUpperLeft 
                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                              OpDecorate %9 RelaxedPrecision 
                              OpDecorate %9 Location 9 
                              OpDecorate vs_TEXCOORD0 Location 12 
                       %2 = OpTypeVoid 
                       %3 = OpTypeFunction %2 
                       %6 = OpTypeFloat 32 
                       %7 = OpTypeVector %6 4 
                       %8 = OpTypePointer Output %7 
         Output f32_4* %9 = OpVariable Output 
                      %10 = OpTypeVector %6 3 
                      %11 = OpTypePointer Input %10 
Input f32_3* vs_TEXCOORD0 = OpVariable Input 
                  f32 %14 = OpConstant 3.674022E-40 
                f32_3 %15 = OpConstantComposite %14 %14 %14 
                  f32 %20 = OpConstant 3.674022E-40 
                      %21 = OpTypeInt 32 0 
                  u32 %22 = OpConstant 3 
                      %23 = OpTypePointer Output %6 
                  void %4 = OpFunction None %3 
                       %5 = OpLabel 
                f32_3 %13 = OpLoad vs_TEXCOORD0 
                f32_3 %16 = OpFMul %13 %15 
                f32_3 %17 = OpFAdd %16 %15 
                f32_4 %18 = OpLoad %9 
                f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
                              OpStore %9 %19 
          Output f32* %24 = OpAccessChain %9 %22 
                              OpStore %24 %20 
                              OpReturn
                              OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 150
  Tags { "LIGHTMODE" = "PREPASSFINAL" "RenderType" = "Opaque" }
  ZWrite Off
  GpuProgramID 138913
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %46 %56 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 46 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %50 DescriptorSet 50 
                                             OpDecorate %50 Binding 50 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %52 DescriptorSet 52 
                                             OpDecorate %52 Binding 52 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 56 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %61 Location 61 
                                             OpDecorate %63 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %45 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %49 = OpVariable Private 
UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
            UniformConstant sampler* %52 = OpVariable UniformConstant 
                                     %55 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %60 = OpTypePointer Output %10 
                       Output f32_4* %61 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %42 = OpExtInst %1 30 %41 
                                             OpStore %36 %42 
                               f32_3 %43 = OpLoad %36 
                               f32_3 %44 = OpFNegate %43 
                               f32_3 %47 = OpLoad vs_TEXCOORD4 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                 read_only Texture2D %51 = OpLoad %50 
                             sampler %53 = OpLoad %52 
          read_only Texture2DSampled %54 = OpSampledImage %51 %53 
                               f32_2 %57 = OpLoad vs_TEXCOORD0 
                               f32_4 %58 = OpImageSampleImplicitLod %54 %57 
                               f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                             OpStore %49 %59 
                               f32_3 %62 = OpLoad %9 
                               f32_3 %63 = OpLoad %49 
                               f32_3 %64 = OpFMul %62 %63 
                               f32_4 %65 = OpLoad %61 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %61 %66 
                         Output f32* %71 = OpAccessChain %61 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %46 %56 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 46 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %50 DescriptorSet 50 
                                             OpDecorate %50 Binding 50 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %52 DescriptorSet 52 
                                             OpDecorate %52 Binding 52 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 56 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %61 Location 61 
                                             OpDecorate %63 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %45 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %49 = OpVariable Private 
UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
            UniformConstant sampler* %52 = OpVariable UniformConstant 
                                     %55 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %60 = OpTypePointer Output %10 
                       Output f32_4* %61 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %42 = OpExtInst %1 30 %41 
                                             OpStore %36 %42 
                               f32_3 %43 = OpLoad %36 
                               f32_3 %44 = OpFNegate %43 
                               f32_3 %47 = OpLoad vs_TEXCOORD4 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                 read_only Texture2D %51 = OpLoad %50 
                             sampler %53 = OpLoad %52 
          read_only Texture2DSampled %54 = OpSampledImage %51 %53 
                               f32_2 %57 = OpLoad vs_TEXCOORD0 
                               f32_4 %58 = OpImageSampleImplicitLod %54 %57 
                               f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                             OpStore %49 %59 
                               f32_3 %62 = OpLoad %9 
                               f32_3 %63 = OpLoad %49 
                               f32_3 %64 = OpFMul %62 %63 
                               f32_4 %65 = OpLoad %61 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %61 %66 
                         Output f32* %71 = OpAccessChain %61 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %46 %56 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 46 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %50 DescriptorSet 50 
                                             OpDecorate %50 Binding 50 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %52 DescriptorSet 52 
                                             OpDecorate %52 Binding 52 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 56 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %61 Location 61 
                                             OpDecorate %63 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %45 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %49 = OpVariable Private 
UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
            UniformConstant sampler* %52 = OpVariable UniformConstant 
                                     %55 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %60 = OpTypePointer Output %10 
                       Output f32_4* %61 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %42 = OpExtInst %1 30 %41 
                                             OpStore %36 %42 
                               f32_3 %43 = OpLoad %36 
                               f32_3 %44 = OpFNegate %43 
                               f32_3 %47 = OpLoad vs_TEXCOORD4 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                 read_only Texture2D %51 = OpLoad %50 
                             sampler %53 = OpLoad %52 
          read_only Texture2DSampled %54 = OpSampledImage %51 %53 
                               f32_2 %57 = OpLoad vs_TEXCOORD0 
                               f32_4 %58 = OpImageSampleImplicitLod %54 %57 
                               f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                             OpStore %49 %59 
                               f32_3 %62 = OpLoad %9 
                               f32_3 %63 = OpLoad %49 
                               f32_3 %64 = OpFMul %62 %63 
                               f32_4 %65 = OpLoad %61 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %61 %66 
                         Output f32* %71 = OpAccessChain %61 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %46 %56 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 46 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %50 DescriptorSet 50 
                                             OpDecorate %50 Binding 50 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %52 DescriptorSet 52 
                                             OpDecorate %52 Binding 52 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 56 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %61 Location 61 
                                             OpDecorate %63 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %45 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %49 = OpVariable Private 
UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
            UniformConstant sampler* %52 = OpVariable UniformConstant 
                                     %55 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %60 = OpTypePointer Output %10 
                       Output f32_4* %61 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %42 = OpExtInst %1 30 %41 
                                             OpStore %36 %42 
                               f32_3 %43 = OpLoad %36 
                               f32_3 %44 = OpFNegate %43 
                               f32_3 %47 = OpLoad vs_TEXCOORD4 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                 read_only Texture2D %51 = OpLoad %50 
                             sampler %53 = OpLoad %52 
          read_only Texture2DSampled %54 = OpSampledImage %51 %53 
                               f32_2 %57 = OpLoad vs_TEXCOORD0 
                               f32_4 %58 = OpImageSampleImplicitLod %54 %57 
                               f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                             OpStore %49 %59 
                               f32_3 %62 = OpLoad %9 
                               f32_3 %63 = OpLoad %49 
                               f32_3 %64 = OpFMul %62 %63 
                               f32_4 %65 = OpLoad %61 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %61 %66 
                         Output f32* %71 = OpAccessChain %61 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %46 %56 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 46 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %50 DescriptorSet 50 
                                             OpDecorate %50 Binding 50 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %52 DescriptorSet 52 
                                             OpDecorate %52 Binding 52 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 56 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %61 Location 61 
                                             OpDecorate %63 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %45 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %49 = OpVariable Private 
UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
            UniformConstant sampler* %52 = OpVariable UniformConstant 
                                     %55 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %60 = OpTypePointer Output %10 
                       Output f32_4* %61 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %42 = OpExtInst %1 30 %41 
                                             OpStore %36 %42 
                               f32_3 %43 = OpLoad %36 
                               f32_3 %44 = OpFNegate %43 
                               f32_3 %47 = OpLoad vs_TEXCOORD4 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                 read_only Texture2D %51 = OpLoad %50 
                             sampler %53 = OpLoad %52 
          read_only Texture2DSampled %54 = OpSampledImage %51 %53 
                               f32_2 %57 = OpLoad vs_TEXCOORD0 
                               f32_4 %58 = OpImageSampleImplicitLod %54 %57 
                               f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                             OpStore %49 %59 
                               f32_3 %62 = OpLoad %9 
                               f32_3 %63 = OpLoad %49 
                               f32_3 %64 = OpFMul %62 %63 
                               f32_4 %65 = OpLoad %61 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %61 %66 
                         Output f32* %71 = OpAccessChain %61 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 73
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %46 %56 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 46 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate %50 DescriptorSet 50 
                                             OpDecorate %50 Binding 50 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %52 RelaxedPrecision 
                                             OpDecorate %52 DescriptorSet 52 
                                             OpDecorate %52 Binding 52 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 56 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %61 Location 61 
                                             OpDecorate %63 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %45 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %49 = OpVariable Private 
UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
            UniformConstant sampler* %52 = OpVariable UniformConstant 
                                     %55 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %60 = OpTypePointer Output %10 
                       Output f32_4* %61 = OpVariable Output 
                                 f32 %67 = OpConstant 3.674022E-40 
                                     %68 = OpTypeInt 32 0 
                                 u32 %69 = OpConstant 3 
                                     %70 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %42 = OpExtInst %1 30 %41 
                                             OpStore %36 %42 
                               f32_3 %43 = OpLoad %36 
                               f32_3 %44 = OpFNegate %43 
                               f32_3 %47 = OpLoad vs_TEXCOORD4 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                 read_only Texture2D %51 = OpLoad %50 
                             sampler %53 = OpLoad %52 
          read_only Texture2DSampled %54 = OpSampledImage %51 %53 
                               f32_2 %57 = OpLoad vs_TEXCOORD0 
                               f32_4 %58 = OpImageSampleImplicitLod %54 %57 
                               f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                             OpStore %49 %59 
                               f32_3 %62 = OpLoad %9 
                               f32_3 %63 = OpLoad %49 
                               f32_3 %64 = OpFMul %62 %63 
                               f32_4 %65 = OpLoad %61 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                             OpStore %61 %66 
                         Output f32* %71 = OpAccessChain %61 %69 
                                             OpStore %71 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 70
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %43 %53 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 43 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 53 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %60 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %46 = OpVariable Private 
UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %52 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %57 = OpTypePointer Output %10 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %64 = OpConstant 3.674022E-40 
                                     %65 = OpTypeInt 32 0 
                                 u32 %66 = OpConstant 3 
                                     %67 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %44 = OpLoad vs_TEXCOORD4 
                               f32_3 %45 = OpFAdd %41 %44 
                                             OpStore %9 %45 
                 read_only Texture2D %48 = OpLoad %47 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %51 = OpSampledImage %48 %50 
                               f32_2 %54 = OpLoad vs_TEXCOORD0 
                               f32_4 %55 = OpImageSampleImplicitLod %51 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %46 %56 
                               f32_3 %59 = OpLoad %9 
                               f32_3 %60 = OpLoad %46 
                               f32_3 %61 = OpFMul %59 %60 
                               f32_4 %62 = OpLoad %58 
                               f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                             OpStore %58 %63 
                         Output f32* %68 = OpAccessChain %58 %66 
                                             OpStore %68 %64 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 70
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %43 %53 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 43 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 53 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %60 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %46 = OpVariable Private 
UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %52 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %57 = OpTypePointer Output %10 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %64 = OpConstant 3.674022E-40 
                                     %65 = OpTypeInt 32 0 
                                 u32 %66 = OpConstant 3 
                                     %67 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %44 = OpLoad vs_TEXCOORD4 
                               f32_3 %45 = OpFAdd %41 %44 
                                             OpStore %9 %45 
                 read_only Texture2D %48 = OpLoad %47 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %51 = OpSampledImage %48 %50 
                               f32_2 %54 = OpLoad vs_TEXCOORD0 
                               f32_4 %55 = OpImageSampleImplicitLod %51 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %46 %56 
                               f32_3 %59 = OpLoad %9 
                               f32_3 %60 = OpLoad %46 
                               f32_3 %61 = OpFMul %59 %60 
                               f32_4 %62 = OpLoad %58 
                               f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                             OpStore %58 %63 
                         Output f32* %68 = OpAccessChain %58 %66 
                                             OpStore %68 %64 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 70
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %43 %53 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 43 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 53 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %60 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %46 = OpVariable Private 
UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %52 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %57 = OpTypePointer Output %10 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %64 = OpConstant 3.674022E-40 
                                     %65 = OpTypeInt 32 0 
                                 u32 %66 = OpConstant 3 
                                     %67 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %44 = OpLoad vs_TEXCOORD4 
                               f32_3 %45 = OpFAdd %41 %44 
                                             OpStore %9 %45 
                 read_only Texture2D %48 = OpLoad %47 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %51 = OpSampledImage %48 %50 
                               f32_2 %54 = OpLoad vs_TEXCOORD0 
                               f32_4 %55 = OpImageSampleImplicitLod %51 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %46 %56 
                               f32_3 %59 = OpLoad %9 
                               f32_3 %60 = OpLoad %46 
                               f32_3 %61 = OpFMul %59 %60 
                               f32_4 %62 = OpLoad %58 
                               f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                             OpStore %58 %63 
                         Output f32* %68 = OpAccessChain %58 %66 
                                             OpStore %68 %64 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat16_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 70
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %43 %53 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 43 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 53 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %60 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %46 = OpVariable Private 
UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %52 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %57 = OpTypePointer Output %10 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %64 = OpConstant 3.674022E-40 
                                     %65 = OpTypeInt 32 0 
                                 u32 %66 = OpConstant 3 
                                     %67 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %44 = OpLoad vs_TEXCOORD4 
                               f32_3 %45 = OpFAdd %41 %44 
                                             OpStore %9 %45 
                 read_only Texture2D %48 = OpLoad %47 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %51 = OpSampledImage %48 %50 
                               f32_2 %54 = OpLoad vs_TEXCOORD0 
                               f32_4 %55 = OpImageSampleImplicitLod %51 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %46 %56 
                               f32_3 %59 = OpLoad %9 
                               f32_3 %60 = OpLoad %46 
                               f32_3 %61 = OpFMul %59 %60 
                               f32_4 %62 = OpLoad %58 
                               f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                             OpStore %58 %63 
                         Output f32* %68 = OpAccessChain %58 %66 
                                             OpStore %68 %64 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 70
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %43 %53 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 43 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 53 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %60 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %46 = OpVariable Private 
UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %52 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %57 = OpTypePointer Output %10 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %64 = OpConstant 3.674022E-40 
                                     %65 = OpTypeInt 32 0 
                                 u32 %66 = OpConstant 3 
                                     %67 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %44 = OpLoad vs_TEXCOORD4 
                               f32_3 %45 = OpFAdd %41 %44 
                                             OpStore %9 %45 
                 read_only Texture2D %48 = OpLoad %47 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %51 = OpSampledImage %48 %50 
                               f32_2 %54 = OpLoad vs_TEXCOORD0 
                               f32_4 %55 = OpImageSampleImplicitLod %51 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %46 %56 
                               f32_3 %59 = OpLoad %9 
                               f32_3 %60 = OpLoad %46 
                               f32_3 %61 = OpFMul %59 %60 
                               f32_4 %62 = OpLoad %58 
                               f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                             OpStore %58 %63 
                         Output f32* %68 = OpAccessChain %58 %66 
                                             OpStore %68 %64 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore vs_TEXCOORD4 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 70
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %43 %53 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 43 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %50 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 53 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %58 Location 58 
                                             OpDecorate %60 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                      Private f32_3* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                      Private f32_3* %36 = OpVariable Private 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_3 %39 = OpConstantComposite %38 %38 %38 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %46 = OpVariable Private 
UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %52 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %57 = OpTypePointer Output %10 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %64 = OpConstant 3.674022E-40 
                                     %65 = OpTypeInt 32 0 
                                 u32 %66 = OpConstant 3 
                                     %67 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_3 %32 = OpLoad %9 
                               f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                               f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                             OpStore %21 %35 
                               f32_3 %37 = OpLoad %21 
                               f32_3 %40 = OpExtInst %1 40 %37 %39 
                                             OpStore %36 %40 
                               f32_3 %41 = OpLoad %36 
                               f32_3 %44 = OpLoad vs_TEXCOORD4 
                               f32_3 %45 = OpFAdd %41 %44 
                                             OpStore %9 %45 
                 read_only Texture2D %48 = OpLoad %47 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %51 = OpSampledImage %48 %50 
                               f32_2 %54 = OpLoad vs_TEXCOORD0 
                               f32_4 %55 = OpImageSampleImplicitLod %51 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %46 %56 
                               f32_3 %59 = OpLoad %9 
                               f32_3 %60 = OpLoad %46 
                               f32_3 %61 = OpFMul %59 %60 
                               f32_4 %62 = OpLoad %58 
                               f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                             OpStore %58 %63 
                         Output f32* %68 = OpAccessChain %58 %66 
                                             OpStore %68 %64 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 150
  Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
  GpuProgramID 203025
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD3 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD3 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 58
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %37 %43 %53 %55 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate vs_TEXCOORD1 Location 43 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 Location 55 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                 f32 %32 = OpConstant 3.674022E-40 
                                     %33 = OpTypeInt 32 0 
                                 u32 %34 = OpConstant 3 
                                     %35 = OpTypePointer Output %6 
                       Output f32_4* %37 = OpVariable Output 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_4 %39 = OpConstantComposite %38 %38 %38 %38 
                                     %40 = OpTypePointer Private %24 
                      Private f32_4* %41 = OpVariable Private 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %45 %45 %45 
                                     %51 = OpTypePointer Private %6 
                       Output f32_4* %53 = OpVariable Output 
                       Output f32_4* %55 = OpVariable Output 
                               f32_4 %56 = OpConstantComposite %32 %32 %32 %32 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %30 = OpLoad %28 
                               f32_4 %31 = OpVectorShuffle %30 %29 4 5 6 3 
                                             OpStore %28 %31 
                         Output f32* %36 = OpAccessChain %28 %34 
                                             OpStore %36 %32 
                                             OpStore %37 %39 
                               f32_3 %44 = OpLoad vs_TEXCOORD1 
                               f32_3 %47 = OpFMul %44 %46 
                               f32_3 %48 = OpFAdd %47 %46 
                               f32_4 %49 = OpLoad %41 
                               f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                             OpStore %41 %50 
                        Private f32* %52 = OpAccessChain %41 %34 
                                             OpStore %52 %32 
                               f32_4 %54 = OpLoad %41 
                                             OpStore %53 %54 
                                             OpStore %55 %56 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD3 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD3 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 58
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %37 %43 %53 %55 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate vs_TEXCOORD1 Location 43 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 Location 55 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                 f32 %32 = OpConstant 3.674022E-40 
                                     %33 = OpTypeInt 32 0 
                                 u32 %34 = OpConstant 3 
                                     %35 = OpTypePointer Output %6 
                       Output f32_4* %37 = OpVariable Output 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_4 %39 = OpConstantComposite %38 %38 %38 %38 
                                     %40 = OpTypePointer Private %24 
                      Private f32_4* %41 = OpVariable Private 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %45 %45 %45 
                                     %51 = OpTypePointer Private %6 
                       Output f32_4* %53 = OpVariable Output 
                       Output f32_4* %55 = OpVariable Output 
                               f32_4 %56 = OpConstantComposite %32 %32 %32 %32 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %30 = OpLoad %28 
                               f32_4 %31 = OpVectorShuffle %30 %29 4 5 6 3 
                                             OpStore %28 %31 
                         Output f32* %36 = OpAccessChain %28 %34 
                                             OpStore %36 %32 
                                             OpStore %37 %39 
                               f32_3 %44 = OpLoad vs_TEXCOORD1 
                               f32_3 %47 = OpFMul %44 %46 
                               f32_3 %48 = OpFAdd %47 %46 
                               f32_4 %49 = OpLoad %41 
                               f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                             OpStore %41 %50 
                        Private f32* %52 = OpAccessChain %41 %34 
                                             OpStore %52 %32 
                               f32_4 %54 = OpLoad %41 
                                             OpStore %53 %54 
                                             OpStore %55 %56 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD3 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD3 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 58
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %37 %43 %53 %55 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate vs_TEXCOORD1 Location 43 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 Location 55 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                 f32 %32 = OpConstant 3.674022E-40 
                                     %33 = OpTypeInt 32 0 
                                 u32 %34 = OpConstant 3 
                                     %35 = OpTypePointer Output %6 
                       Output f32_4* %37 = OpVariable Output 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_4 %39 = OpConstantComposite %38 %38 %38 %38 
                                     %40 = OpTypePointer Private %24 
                      Private f32_4* %41 = OpVariable Private 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %45 %45 %45 
                                     %51 = OpTypePointer Private %6 
                       Output f32_4* %53 = OpVariable Output 
                       Output f32_4* %55 = OpVariable Output 
                               f32_4 %56 = OpConstantComposite %32 %32 %32 %32 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %30 = OpLoad %28 
                               f32_4 %31 = OpVectorShuffle %30 %29 4 5 6 3 
                                             OpStore %28 %31 
                         Output f32* %36 = OpAccessChain %28 %34 
                                             OpStore %36 %32 
                                             OpStore %37 %39 
                               f32_3 %44 = OpLoad vs_TEXCOORD1 
                               f32_3 %47 = OpFMul %44 %46 
                               f32_3 %48 = OpFAdd %47 %46 
                               f32_4 %49 = OpLoad %41 
                               f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                             OpStore %41 %50 
                        Private f32* %52 = OpAccessChain %41 %34 
                                             OpStore %52 %32 
                               f32_4 %54 = OpLoad %41 
                                             OpStore %53 %54 
                                             OpStore %55 %56 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                                      OpStore vs_TEXCOORD3 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore vs_TEXCOORD4 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 68
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %30 %40 %43 %49 %54 %64 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %20 DescriptorSet 20 
                                             OpDecorate %20 Binding 20 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 Location 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate vs_TEXCOORD1 Location 54 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %64 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypeVector %6 3 
                                     %16 = OpTypePointer Private %15 
                      Private f32_3* %17 = OpVariable Private 
                                     %18 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %19 = OpTypePointer UniformConstant %18 
UniformConstant read_only Texture2D* %20 = OpVariable UniformConstant 
                                     %22 = OpTypeSampler 
                                     %23 = OpTypePointer UniformConstant %22 
            UniformConstant sampler* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampledImage %18 
                                     %28 = OpTypeVector %6 2 
                                     %29 = OpTypePointer Input %28 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %37 = OpVariable Private 
                                     %39 = OpTypePointer Input %15 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                       Output f32_4* %43 = OpVariable Output 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %50 = OpConstant 3.674022E-40 
                               f32_4 %51 = OpConstantComposite %50 %50 %50 %50 
                                     %52 = OpTypePointer Private %7 
                      Private f32_4* %53 = OpVariable Private 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %56 = OpConstant 3.674022E-40 
                               f32_3 %57 = OpConstantComposite %56 %56 %56 
                                     %62 = OpTypePointer Private %6 
                       Output f32_4* %64 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %21 = OpLoad %20 
                             sampler %25 = OpLoad %24 
          read_only Texture2DSampled %27 = OpSampledImage %21 %25 
                               f32_2 %31 = OpLoad vs_TEXCOORD0 
                               f32_4 %32 = OpImageSampleImplicitLod %27 %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                             OpStore %17 %33 
                               f32_3 %34 = OpLoad %17 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_3 %38 = OpLoad %17 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFMul %38 %41 
                                             OpStore %37 %42 
                               f32_3 %44 = OpLoad %37 
                               f32_3 %45 = OpFNegate %44 
                               f32_3 %46 = OpExtInst %1 29 %45 
                               f32_4 %47 = OpLoad %43 
                               f32_4 %48 = OpVectorShuffle %47 %46 4 5 6 3 
                                             OpStore %43 %48 
                                             OpStore %49 %51 
                               f32_3 %55 = OpLoad vs_TEXCOORD1 
                               f32_3 %58 = OpFMul %55 %57 
                               f32_3 %59 = OpFAdd %58 %57 
                               f32_4 %60 = OpLoad %53 
                               f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                             OpStore %53 %61 
                        Private f32* %63 = OpAccessChain %53 %12 
                                             OpStore %63 %10 
                               f32_4 %65 = OpLoad %53 
                                             OpStore %64 %65 
                         Output f32* %66 = OpAccessChain %43 %12 
                                             OpStore %66 %10 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                                      OpStore vs_TEXCOORD3 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore vs_TEXCOORD4 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 68
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %30 %40 %43 %49 %54 %64 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %20 DescriptorSet 20 
                                             OpDecorate %20 Binding 20 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 Location 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate vs_TEXCOORD1 Location 54 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %64 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypeVector %6 3 
                                     %16 = OpTypePointer Private %15 
                      Private f32_3* %17 = OpVariable Private 
                                     %18 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %19 = OpTypePointer UniformConstant %18 
UniformConstant read_only Texture2D* %20 = OpVariable UniformConstant 
                                     %22 = OpTypeSampler 
                                     %23 = OpTypePointer UniformConstant %22 
            UniformConstant sampler* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampledImage %18 
                                     %28 = OpTypeVector %6 2 
                                     %29 = OpTypePointer Input %28 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %37 = OpVariable Private 
                                     %39 = OpTypePointer Input %15 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                       Output f32_4* %43 = OpVariable Output 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %50 = OpConstant 3.674022E-40 
                               f32_4 %51 = OpConstantComposite %50 %50 %50 %50 
                                     %52 = OpTypePointer Private %7 
                      Private f32_4* %53 = OpVariable Private 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %56 = OpConstant 3.674022E-40 
                               f32_3 %57 = OpConstantComposite %56 %56 %56 
                                     %62 = OpTypePointer Private %6 
                       Output f32_4* %64 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %21 = OpLoad %20 
                             sampler %25 = OpLoad %24 
          read_only Texture2DSampled %27 = OpSampledImage %21 %25 
                               f32_2 %31 = OpLoad vs_TEXCOORD0 
                               f32_4 %32 = OpImageSampleImplicitLod %27 %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                             OpStore %17 %33 
                               f32_3 %34 = OpLoad %17 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_3 %38 = OpLoad %17 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFMul %38 %41 
                                             OpStore %37 %42 
                               f32_3 %44 = OpLoad %37 
                               f32_3 %45 = OpFNegate %44 
                               f32_3 %46 = OpExtInst %1 29 %45 
                               f32_4 %47 = OpLoad %43 
                               f32_4 %48 = OpVectorShuffle %47 %46 4 5 6 3 
                                             OpStore %43 %48 
                                             OpStore %49 %51 
                               f32_3 %55 = OpLoad vs_TEXCOORD1 
                               f32_3 %58 = OpFMul %55 %57 
                               f32_3 %59 = OpFAdd %58 %57 
                               f32_4 %60 = OpLoad %53 
                               f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                             OpStore %53 %61 
                        Private f32* %63 = OpAccessChain %53 %12 
                                             OpStore %63 %10 
                               f32_4 %65 = OpLoad %53 
                                             OpStore %64 %65 
                         Output f32* %66 = OpAccessChain %43 %12 
                                             OpStore %66 %10 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                                      OpStore vs_TEXCOORD3 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore vs_TEXCOORD4 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 68
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %30 %40 %43 %49 %54 %64 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %20 DescriptorSet 20 
                                             OpDecorate %20 Binding 20 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 Location 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate vs_TEXCOORD1 Location 54 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %64 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypeVector %6 3 
                                     %16 = OpTypePointer Private %15 
                      Private f32_3* %17 = OpVariable Private 
                                     %18 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %19 = OpTypePointer UniformConstant %18 
UniformConstant read_only Texture2D* %20 = OpVariable UniformConstant 
                                     %22 = OpTypeSampler 
                                     %23 = OpTypePointer UniformConstant %22 
            UniformConstant sampler* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampledImage %18 
                                     %28 = OpTypeVector %6 2 
                                     %29 = OpTypePointer Input %28 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %37 = OpVariable Private 
                                     %39 = OpTypePointer Input %15 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                       Output f32_4* %43 = OpVariable Output 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %50 = OpConstant 3.674022E-40 
                               f32_4 %51 = OpConstantComposite %50 %50 %50 %50 
                                     %52 = OpTypePointer Private %7 
                      Private f32_4* %53 = OpVariable Private 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %56 = OpConstant 3.674022E-40 
                               f32_3 %57 = OpConstantComposite %56 %56 %56 
                                     %62 = OpTypePointer Private %6 
                       Output f32_4* %64 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %21 = OpLoad %20 
                             sampler %25 = OpLoad %24 
          read_only Texture2DSampled %27 = OpSampledImage %21 %25 
                               f32_2 %31 = OpLoad vs_TEXCOORD0 
                               f32_4 %32 = OpImageSampleImplicitLod %27 %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                             OpStore %17 %33 
                               f32_3 %34 = OpLoad %17 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_3 %38 = OpLoad %17 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFMul %38 %41 
                                             OpStore %37 %42 
                               f32_3 %44 = OpLoad %37 
                               f32_3 %45 = OpFNegate %44 
                               f32_3 %46 = OpExtInst %1 29 %45 
                               f32_4 %47 = OpLoad %43 
                               f32_4 %48 = OpVectorShuffle %47 %46 4 5 6 3 
                                             OpStore %43 %48 
                                             OpStore %49 %51 
                               f32_3 %55 = OpLoad vs_TEXCOORD1 
                               f32_3 %58 = OpFMul %55 %57 
                               f32_3 %59 = OpFAdd %58 %57 
                               f32_4 %60 = OpLoad %53 
                               f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                             OpStore %53 %61 
                        Private f32* %63 = OpAccessChain %53 %12 
                                             OpStore %63 %10 
                               f32_4 %65 = OpLoad %53 
                                             OpStore %64 %65 
                         Output f32* %66 = OpAccessChain %43 %12 
                                             OpStore %66 %10 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD3 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD3 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 58
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %37 %43 %53 %55 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate vs_TEXCOORD1 Location 43 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 Location 55 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                 f32 %32 = OpConstant 3.674022E-40 
                                     %33 = OpTypeInt 32 0 
                                 u32 %34 = OpConstant 3 
                                     %35 = OpTypePointer Output %6 
                       Output f32_4* %37 = OpVariable Output 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_4 %39 = OpConstantComposite %38 %38 %38 %38 
                                     %40 = OpTypePointer Private %24 
                      Private f32_4* %41 = OpVariable Private 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %45 %45 %45 
                                     %51 = OpTypePointer Private %6 
                       Output f32_4* %53 = OpVariable Output 
                       Output f32_4* %55 = OpVariable Output 
                               f32_4 %56 = OpConstantComposite %38 %38 %38 %32 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %30 = OpLoad %28 
                               f32_4 %31 = OpVectorShuffle %30 %29 4 5 6 3 
                                             OpStore %28 %31 
                         Output f32* %36 = OpAccessChain %28 %34 
                                             OpStore %36 %32 
                                             OpStore %37 %39 
                               f32_3 %44 = OpLoad vs_TEXCOORD1 
                               f32_3 %47 = OpFMul %44 %46 
                               f32_3 %48 = OpFAdd %47 %46 
                               f32_4 %49 = OpLoad %41 
                               f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                             OpStore %41 %50 
                        Private f32* %52 = OpAccessChain %41 %34 
                                             OpStore %52 %32 
                               f32_4 %54 = OpLoad %41 
                                             OpStore %53 %54 
                                             OpStore %55 %56 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD3 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD3 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 58
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %37 %43 %53 %55 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate vs_TEXCOORD1 Location 43 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 Location 55 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                 f32 %32 = OpConstant 3.674022E-40 
                                     %33 = OpTypeInt 32 0 
                                 u32 %34 = OpConstant 3 
                                     %35 = OpTypePointer Output %6 
                       Output f32_4* %37 = OpVariable Output 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_4 %39 = OpConstantComposite %38 %38 %38 %38 
                                     %40 = OpTypePointer Private %24 
                      Private f32_4* %41 = OpVariable Private 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %45 %45 %45 
                                     %51 = OpTypePointer Private %6 
                       Output f32_4* %53 = OpVariable Output 
                       Output f32_4* %55 = OpVariable Output 
                               f32_4 %56 = OpConstantComposite %38 %38 %38 %32 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %30 = OpLoad %28 
                               f32_4 %31 = OpVectorShuffle %30 %29 4 5 6 3 
                                             OpStore %28 %31 
                         Output f32* %36 = OpAccessChain %28 %34 
                                             OpStore %36 %32 
                                             OpStore %37 %39 
                               f32_3 %44 = OpLoad vs_TEXCOORD1 
                               f32_3 %47 = OpFMul %44 %46 
                               f32_3 %48 = OpFAdd %47 %46 
                               f32_4 %49 = OpLoad %41 
                               f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                             OpStore %41 %50 
                        Private f32* %52 = OpAccessChain %41 %34 
                                             OpStore %52 %32 
                               f32_4 %54 = OpLoad %41 
                                             OpStore %53 %54 
                                             OpStore %55 %56 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD3 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD3 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 58
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %37 %43 %53 %55 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate vs_TEXCOORD1 Location 43 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %53 Location 53 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 Location 55 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                 f32 %32 = OpConstant 3.674022E-40 
                                     %33 = OpTypeInt 32 0 
                                 u32 %34 = OpConstant 3 
                                     %35 = OpTypePointer Output %6 
                       Output f32_4* %37 = OpVariable Output 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_4 %39 = OpConstantComposite %38 %38 %38 %38 
                                     %40 = OpTypePointer Private %24 
                      Private f32_4* %41 = OpVariable Private 
                                     %42 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %45 %45 %45 
                                     %51 = OpTypePointer Private %6 
                       Output f32_4* %53 = OpVariable Output 
                       Output f32_4* %55 = OpVariable Output 
                               f32_4 %56 = OpConstantComposite %38 %38 %38 %32 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %30 = OpLoad %28 
                               f32_4 %31 = OpVectorShuffle %30 %29 4 5 6 3 
                                             OpStore %28 %31 
                         Output f32* %36 = OpAccessChain %28 %34 
                                             OpStore %36 %32 
                                             OpStore %37 %39 
                               f32_3 %44 = OpLoad vs_TEXCOORD1 
                               f32_3 %47 = OpFMul %44 %46 
                               f32_3 %48 = OpFAdd %47 %46 
                               f32_4 %49 = OpLoad %41 
                               f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                             OpStore %41 %50 
                        Private f32* %52 = OpAccessChain %41 %34 
                                             OpStore %52 %32 
                               f32_4 %54 = OpLoad %41 
                                             OpStore %53 %54 
                                             OpStore %55 %56 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target3.xyz = u_xlat16_0.xyz * vs_TEXCOORD4.xyz;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target3.xyz = u_xlat16_0.xyz * vs_TEXCOORD4.xyz;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target3.xyz = u_xlat16_0.xyz * vs_TEXCOORD4.xyz;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.w = 1.0;
    SV_Target2 = u_xlat0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                                      OpStore vs_TEXCOORD3 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore vs_TEXCOORD4 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 64
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %30 %37 %40 %45 %50 %60 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %20 DescriptorSet 20 
                                             OpDecorate %20 Binding 20 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate vs_TEXCOORD1 Location 50 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %60 Location 60 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypeVector %6 3 
                                     %16 = OpTypePointer Private %15 
                      Private f32_3* %17 = OpVariable Private 
                                     %18 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %19 = OpTypePointer UniformConstant %18 
UniformConstant read_only Texture2D* %20 = OpVariable UniformConstant 
                                     %22 = OpTypeSampler 
                                     %23 = OpTypePointer UniformConstant %22 
            UniformConstant sampler* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampledImage %18 
                                     %28 = OpTypeVector %6 2 
                                     %29 = OpTypePointer Input %28 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                       Output f32_4* %37 = OpVariable Output 
                                     %39 = OpTypePointer Input %15 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %46 = OpConstant 3.674022E-40 
                               f32_4 %47 = OpConstantComposite %46 %46 %46 %46 
                                     %48 = OpTypePointer Private %7 
                      Private f32_4* %49 = OpVariable Private 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %52 = OpConstant 3.674022E-40 
                               f32_3 %53 = OpConstantComposite %52 %52 %52 
                                     %58 = OpTypePointer Private %6 
                       Output f32_4* %60 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %21 = OpLoad %20 
                             sampler %25 = OpLoad %24 
          read_only Texture2DSampled %27 = OpSampledImage %21 %25 
                               f32_2 %31 = OpLoad vs_TEXCOORD0 
                               f32_4 %32 = OpImageSampleImplicitLod %27 %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                             OpStore %17 %33 
                               f32_3 %34 = OpLoad %17 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_3 %38 = OpLoad %17 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFMul %38 %41 
                               f32_4 %43 = OpLoad %37 
                               f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                             OpStore %37 %44 
                                             OpStore %45 %47 
                               f32_3 %51 = OpLoad vs_TEXCOORD1 
                               f32_3 %54 = OpFMul %51 %53 
                               f32_3 %55 = OpFAdd %54 %53 
                               f32_4 %56 = OpLoad %49 
                               f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                             OpStore %49 %57 
                        Private f32* %59 = OpAccessChain %49 %12 
                                             OpStore %59 %10 
                               f32_4 %61 = OpLoad %49 
                                             OpStore %60 %61 
                         Output f32* %62 = OpAccessChain %37 %12 
                                             OpStore %62 %10 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                                      OpStore vs_TEXCOORD3 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore vs_TEXCOORD4 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 64
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %30 %37 %40 %45 %50 %60 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %20 DescriptorSet 20 
                                             OpDecorate %20 Binding 20 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate vs_TEXCOORD1 Location 50 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %60 Location 60 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypeVector %6 3 
                                     %16 = OpTypePointer Private %15 
                      Private f32_3* %17 = OpVariable Private 
                                     %18 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %19 = OpTypePointer UniformConstant %18 
UniformConstant read_only Texture2D* %20 = OpVariable UniformConstant 
                                     %22 = OpTypeSampler 
                                     %23 = OpTypePointer UniformConstant %22 
            UniformConstant sampler* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampledImage %18 
                                     %28 = OpTypeVector %6 2 
                                     %29 = OpTypePointer Input %28 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                       Output f32_4* %37 = OpVariable Output 
                                     %39 = OpTypePointer Input %15 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %46 = OpConstant 3.674022E-40 
                               f32_4 %47 = OpConstantComposite %46 %46 %46 %46 
                                     %48 = OpTypePointer Private %7 
                      Private f32_4* %49 = OpVariable Private 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %52 = OpConstant 3.674022E-40 
                               f32_3 %53 = OpConstantComposite %52 %52 %52 
                                     %58 = OpTypePointer Private %6 
                       Output f32_4* %60 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %21 = OpLoad %20 
                             sampler %25 = OpLoad %24 
          read_only Texture2DSampled %27 = OpSampledImage %21 %25 
                               f32_2 %31 = OpLoad vs_TEXCOORD0 
                               f32_4 %32 = OpImageSampleImplicitLod %27 %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                             OpStore %17 %33 
                               f32_3 %34 = OpLoad %17 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_3 %38 = OpLoad %17 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFMul %38 %41 
                               f32_4 %43 = OpLoad %37 
                               f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                             OpStore %37 %44 
                                             OpStore %45 %47 
                               f32_3 %51 = OpLoad vs_TEXCOORD1 
                               f32_3 %54 = OpFMul %51 %53 
                               f32_3 %55 = OpFAdd %54 %53 
                               f32_4 %56 = OpLoad %49 
                               f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                             OpStore %49 %57 
                        Private f32* %59 = OpAccessChain %49 %12 
                                             OpStore %59 %10 
                               f32_4 %61 = OpLoad %49 
                                             OpStore %60 %61 
                         Output f32* %62 = OpAccessChain %37 %12 
                                             OpStore %62 %10 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                                      OpStore vs_TEXCOORD3 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore vs_TEXCOORD4 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 64
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %30 %37 %40 %45 %50 %60 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %20 DescriptorSet 20 
                                             OpDecorate %20 Binding 20 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %37 Location 37 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate vs_TEXCOORD1 Location 50 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %60 Location 60 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypeVector %6 3 
                                     %16 = OpTypePointer Private %15 
                      Private f32_3* %17 = OpVariable Private 
                                     %18 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %19 = OpTypePointer UniformConstant %18 
UniformConstant read_only Texture2D* %20 = OpVariable UniformConstant 
                                     %22 = OpTypeSampler 
                                     %23 = OpTypePointer UniformConstant %22 
            UniformConstant sampler* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampledImage %18 
                                     %28 = OpTypeVector %6 2 
                                     %29 = OpTypePointer Input %28 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                       Output f32_4* %37 = OpVariable Output 
                                     %39 = OpTypePointer Input %15 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %46 = OpConstant 3.674022E-40 
                               f32_4 %47 = OpConstantComposite %46 %46 %46 %46 
                                     %48 = OpTypePointer Private %7 
                      Private f32_4* %49 = OpVariable Private 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %52 = OpConstant 3.674022E-40 
                               f32_3 %53 = OpConstantComposite %52 %52 %52 
                                     %58 = OpTypePointer Private %6 
                       Output f32_4* %60 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %21 = OpLoad %20 
                             sampler %25 = OpLoad %24 
          read_only Texture2DSampled %27 = OpSampledImage %21 %25 
                               f32_2 %31 = OpLoad vs_TEXCOORD0 
                               f32_4 %32 = OpImageSampleImplicitLod %27 %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                             OpStore %17 %33 
                               f32_3 %34 = OpLoad %17 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_3 %38 = OpLoad %17 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFMul %38 %41 
                               f32_4 %43 = OpLoad %37 
                               f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                             OpStore %37 %44 
                                             OpStore %45 %47 
                               f32_3 %51 = OpLoad vs_TEXCOORD1 
                               f32_3 %54 = OpFMul %51 %53 
                               f32_3 %55 = OpFAdd %54 %53 
                               f32_4 %56 = OpLoad %49 
                               f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                             OpStore %49 %57 
                        Private f32* %59 = OpAccessChain %49 %12 
                                             OpStore %59 %10 
                               f32_4 %61 = OpLoad %49 
                                             OpStore %60 %61 
                         Output f32* %62 = OpAccessChain %37 %12 
                                             OpStore %62 %10 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
}
}
}
Fallback "Mobile/VertexLit"
}